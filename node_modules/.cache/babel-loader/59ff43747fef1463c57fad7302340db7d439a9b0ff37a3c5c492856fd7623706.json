{"ast":null,"code":"import _classCallCheck from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @extends SDK.Action\n * @memberOf Actions.Transcode\n * @description  Defines the video bitrate in bits per second.\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_optimization#bitrate_control|Bitrate control}\n * @see Visit {@link Actions.Transcode|Transcode} for an example\n */\nvar BitRateAction = /*#__PURE__*/function (_Action) {\n  _inherits(BitRateAction, _Action);\n  var _super = _createSuper(BitRateAction);\n  function BitRateAction(bitRate) {\n    var _this;\n    _classCallCheck(this, BitRateAction);\n    _this = _super.call(this);\n    _this.isConstant = false;\n    _this._actionModel = {\n      actionType: 'bitRate'\n    };\n    _this.bitRate = bitRate;\n    _this._actionModel.bitRate = bitRate;\n    return _this;\n  }\n  /**\n   * @description video plays with a constant bitrate (CBR).\n   */\n  _createClass(BitRateAction, [{\n    key: \"constant\",\n    value: function constant() {\n      this.isConstant = true;\n      this._actionModel.constant = true;\n      return this;\n    }\n  }, {\n    key: \"prepareQualifiers\",\n    value: function prepareQualifiers() {\n      var qualifierValue;\n      if (this.isConstant) {\n        qualifierValue = new QualifierValue([this.bitRate, 'constant']).setDelimiter(':');\n      } else {\n        qualifierValue = new QualifierValue(this.bitRate);\n      }\n      this.addQualifier(new Qualifier('br', qualifierValue));\n      return this;\n    }\n  }], [{\n    key: \"fromJson\",\n    value: function fromJson(actionModel) {\n      var bitRate = actionModel.bitRate,\n        constant = actionModel.constant;\n      // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n      // This allows the inheriting classes to determine the class to be created\n      var result = new this(bitRate);\n      constant && result.constant();\n      return result;\n    }\n  }]);\n  return BitRateAction;\n}(Action);\nexport default BitRateAction;","map":{"version":3,"names":["Action","Qualifier","QualifierValue","BitRateAction","bitRate","isConstant","_actionModel","actionType","constant","qualifierValue","setDelimiter","addQualifier","actionModel","result"],"sources":["/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@cloudinary/transformation-builder-sdk/actions/transcode/BitRateAction.js"],"sourcesContent":["import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @extends SDK.Action\n * @memberOf Actions.Transcode\n * @description  Defines the video bitrate in bits per second.\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_optimization#bitrate_control|Bitrate control}\n * @see Visit {@link Actions.Transcode|Transcode} for an example\n */\nclass BitRateAction extends Action {\n    constructor(bitRate) {\n        super();\n        this.isConstant = false;\n        this._actionModel = { actionType: 'bitRate' };\n        this.bitRate = bitRate;\n        this._actionModel.bitRate = bitRate;\n    }\n    /**\n     * @description video plays with a constant bitrate (CBR).\n     */\n    constant() {\n        this.isConstant = true;\n        this._actionModel.constant = true;\n        return this;\n    }\n    prepareQualifiers() {\n        let qualifierValue;\n        if (this.isConstant) {\n            qualifierValue = new QualifierValue([this.bitRate, 'constant']).setDelimiter(':');\n        }\n        else {\n            qualifierValue = new QualifierValue(this.bitRate);\n        }\n        this.addQualifier(new Qualifier('br', qualifierValue));\n        return this;\n    }\n    static fromJson(actionModel) {\n        const { bitRate, constant } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(bitRate);\n        constant && result.constant();\n        return result;\n    }\n}\nexport default BitRateAction;\n"],"mappings":";;;;AAAA,SAASA,MAAM,QAAQ,0BAA0B;AACjD,SAASC,SAAS,QAAQ,uCAAuC;AACjE,SAASC,cAAc,QAAQ,4CAA4C;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA,IAQMC,aAAa;EAAA;EAAA;EACf,uBAAYC,OAAO,EAAE;IAAA;IAAA;IACjB;IACA,MAAKC,UAAU,GAAG,KAAK;IACvB,MAAKC,YAAY,GAAG;MAAEC,UAAU,EAAE;IAAU,CAAC;IAC7C,MAAKH,OAAO,GAAGA,OAAO;IACtB,MAAKE,YAAY,CAACF,OAAO,GAAGA,OAAO;IAAC;EACxC;EACA;AACJ;AACA;EAFI;IAAA;IAAA,OAGA,oBAAW;MACP,IAAI,CAACC,UAAU,GAAG,IAAI;MACtB,IAAI,CAACC,YAAY,CAACE,QAAQ,GAAG,IAAI;MACjC,OAAO,IAAI;IACf;EAAC;IAAA;IAAA,OACD,6BAAoB;MAChB,IAAIC,cAAc;MAClB,IAAI,IAAI,CAACJ,UAAU,EAAE;QACjBI,cAAc,GAAG,IAAIP,cAAc,CAAC,CAAC,IAAI,CAACE,OAAO,EAAE,UAAU,CAAC,CAAC,CAACM,YAAY,CAAC,GAAG,CAAC;MACrF,CAAC,MACI;QACDD,cAAc,GAAG,IAAIP,cAAc,CAAC,IAAI,CAACE,OAAO,CAAC;MACrD;MACA,IAAI,CAACO,YAAY,CAAC,IAAIV,SAAS,CAAC,IAAI,EAAEQ,cAAc,CAAC,CAAC;MACtD,OAAO,IAAI;IACf;EAAC;IAAA;IAAA,OACD,kBAAgBG,WAAW,EAAE;MACzB,IAAQR,OAAO,GAAeQ,WAAW,CAAjCR,OAAO;QAAEI,QAAQ,GAAKI,WAAW,CAAxBJ,QAAQ;MACzB;MACA;MACA,IAAMK,MAAM,GAAG,IAAI,IAAI,CAACT,OAAO,CAAC;MAChCI,QAAQ,IAAIK,MAAM,CAACL,QAAQ,EAAE;MAC7B,OAAOK,MAAM;IACjB;EAAC;EAAA;AAAA,EAlCuBb,MAAM;AAoClC,eAAeG,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}