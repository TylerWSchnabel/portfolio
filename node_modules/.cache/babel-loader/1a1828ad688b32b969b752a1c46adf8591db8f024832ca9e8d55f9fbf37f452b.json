{"ast":null,"code":"import _classCallCheck from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { BaseSource } from \"../BaseSource.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate an image layer\n * <div class=\"panel panel-warning\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}\n *   </ul>\n * </div>\n */\nvar ImageSource = /*#__PURE__*/function (_BaseSource) {\n  _inherits(ImageSource, _BaseSource);\n  var _super = _createSuper(ImageSource);\n  function ImageSource(publicID) {\n    var _this;\n    _classCallCheck(this, ImageSource);\n    _this = _super.call(this);\n    _this._publicID = publicID;\n    _this._qualifierModel = {\n      publicId: publicID,\n      sourceType: 'image'\n    };\n    return _this;\n  }\n  /**\n   * @description\n   * Returns the opening string of the layer,\n   * This method is used internally within {@link SDK.LayerAction|LayerAction}\n   * @returns {string}\n   */\n  _createClass(ImageSource, [{\n    key: \"getOpenSourceString\",\n    value: function getOpenSourceString(layerType) {\n      var encodedPublicID = this.encodeAssetPublicID(this._publicID);\n      if (this._format) {\n        return \"\".concat(layerType, \"_\").concat(encodedPublicID, \".\").concat(this._format.toString());\n      } else {\n        return \"\".concat(layerType, \"_\").concat(encodedPublicID);\n      }\n    }\n    /**\n     * @description\n     * Apply a format for the image source of the layer\n     * @param {FormatQualifier} format A to apply to the layered image, see more {@link Qualifiers.Format|here}\n     * @returns {this}\n     */\n  }, {\n    key: \"format\",\n    value: function format(_format) {\n      this._format = _format;\n      return this;\n    }\n  }, {\n    key: \"toJson\",\n    value: function toJson() {\n      var result = _get(_getPrototypeOf(ImageSource.prototype), \"toJson\", this).call(this);\n      if (result.publicId && this._format) {\n        result.publicId = \"\".concat(result.publicId, \".\").concat(this._format.toString());\n      }\n      return result;\n    }\n  }], [{\n    key: \"fromJson\",\n    value: function fromJson(qualifierModel, transformationFromJson) {\n      var publicId = qualifierModel.publicId,\n        transformation = qualifierModel.transformation;\n      // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\n      // This allows the inheriting classes to determine the class to be created\n      // @ts-ignore\n      var result = new this(publicId);\n      if (transformation) {\n        result.transformation(transformationFromJson(transformation));\n      }\n      return result;\n    }\n  }]);\n  return ImageSource;\n}(BaseSource);\nexport { ImageSource };","map":{"version":3,"names":["BaseSource","ImageSource","publicID","_publicID","_qualifierModel","publicId","sourceType","layerType","encodedPublicID","encodeAssetPublicID","_format","toString","format","result","qualifierModel","transformationFromJson","transformation"],"sources":["/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/ImageSource.js"],"sourcesContent":["import { BaseSource } from \"../BaseSource.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate an image layer\n * <div class=\"panel panel-warning\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}\n *   </ul>\n * </div>\n */\nclass ImageSource extends BaseSource {\n    constructor(publicID) {\n        super();\n        this._publicID = publicID;\n        this._qualifierModel = {\n            publicId: publicID,\n            sourceType: 'image'\n        };\n    }\n    /**\n     * @description\n     * Returns the opening string of the layer,\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\n     * @returns {string}\n     */\n    getOpenSourceString(layerType) {\n        const encodedPublicID = this.encodeAssetPublicID(this._publicID);\n        if (this._format) {\n            return `${layerType}_${encodedPublicID}.${this._format.toString()}`;\n        }\n        else {\n            return `${layerType}_${encodedPublicID}`;\n        }\n    }\n    /**\n     * @description\n     * Apply a format for the image source of the layer\n     * @param {FormatQualifier} format A to apply to the layered image, see more {@link Qualifiers.Format|here}\n     * @returns {this}\n     */\n    format(format) {\n        this._format = format;\n        return this;\n    }\n    toJson() {\n        const result = super.toJson();\n        if (result.publicId && this._format) {\n            result.publicId = `${result.publicId}.${this._format.toString()}`;\n        }\n        return result;\n    }\n    static fromJson(qualifierModel, transformationFromJson) {\n        const { publicId, transformation } = qualifierModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\n        // This allows the inheriting classes to determine the class to be created\n        // @ts-ignore\n        const result = new this(publicId);\n        if (transformation) {\n            result.transformation(transformationFromJson(transformation));\n        }\n        return result;\n    }\n}\nexport { ImageSource };\n"],"mappings":";;;;;;AAAA,SAASA,UAAU,QAAQ,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA,IAgBMC,WAAW;EAAA;EAAA;EACb,qBAAYC,QAAQ,EAAE;IAAA;IAAA;IAClB;IACA,MAAKC,SAAS,GAAGD,QAAQ;IACzB,MAAKE,eAAe,GAAG;MACnBC,QAAQ,EAAEH,QAAQ;MAClBI,UAAU,EAAE;IAChB,CAAC;IAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA;IAAA,OAMA,6BAAoBC,SAAS,EAAE;MAC3B,IAAMC,eAAe,GAAG,IAAI,CAACC,mBAAmB,CAAC,IAAI,CAACN,SAAS,CAAC;MAChE,IAAI,IAAI,CAACO,OAAO,EAAE;QACd,iBAAUH,SAAS,cAAIC,eAAe,cAAI,IAAI,CAACE,OAAO,CAACC,QAAQ,EAAE;MACrE,CAAC,MACI;QACD,iBAAUJ,SAAS,cAAIC,eAAe;MAC1C;IACJ;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA;IAAA,OAMA,gBAAOI,OAAM,EAAE;MACX,IAAI,CAACF,OAAO,GAAGE,OAAM;MACrB,OAAO,IAAI;IACf;EAAC;IAAA;IAAA,OACD,kBAAS;MACL,IAAMC,MAAM,0EAAiB;MAC7B,IAAIA,MAAM,CAACR,QAAQ,IAAI,IAAI,CAACK,OAAO,EAAE;QACjCG,MAAM,CAACR,QAAQ,aAAMQ,MAAM,CAACR,QAAQ,cAAI,IAAI,CAACK,OAAO,CAACC,QAAQ,EAAE,CAAE;MACrE;MACA,OAAOE,MAAM;IACjB;EAAC;IAAA;IAAA,OACD,kBAAgBC,cAAc,EAAEC,sBAAsB,EAAE;MACpD,IAAQV,QAAQ,GAAqBS,cAAc,CAA3CT,QAAQ;QAAEW,cAAc,GAAKF,cAAc,CAAjCE,cAAc;MAChC;MACA;MACA;MACA,IAAMH,MAAM,GAAG,IAAI,IAAI,CAACR,QAAQ,CAAC;MACjC,IAAIW,cAAc,EAAE;QAChBH,MAAM,CAACG,cAAc,CAACD,sBAAsB,CAACC,cAAc,CAAC,CAAC;MACjE;MACA,OAAOH,MAAM;IACjB;EAAC;EAAA;AAAA,EAnDqBb,UAAU;AAqDpC,SAASC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}