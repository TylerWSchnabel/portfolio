{"ast":null,"code":"import _classCallCheck from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { BaseSource } from \"../BaseSource.js\";\nimport { FormatQualifier } from \"../../format/FormatQualifier.js\";\nimport { base64Encode } from \"../../../internal/utils/base64Encode.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate a Fetch layer\n * <div class=\"panel panel-warning\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n  *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}</li>\n *   </ul>\n * </div>\n *\n * {@link https://cloudinary.com/documentation/fetch_remote_images|Learn more about fetching from a remote URL}\n */\nvar FetchSource = /*#__PURE__*/function (_BaseSource) {\n  _inherits(FetchSource, _BaseSource);\n  var _super = _createSuper(FetchSource);\n  function FetchSource(remoteURL) {\n    var _this;\n    _classCallCheck(this, FetchSource);\n    _this = _super.call(this);\n    _this._qualifierModel = {\n      sourceType: 'fetch',\n      url: remoteURL\n    };\n    _this._remoteURL = remoteURL;\n    return _this;\n  }\n  /**\n   * @description\n   * Returns the opening string of the layer,\n   * This method is used internally within {@link SDK.LayerAction|LayerAction}\n   * @returns {string}\n   */\n  _createClass(FetchSource, [{\n    key: \"getOpenSourceString\",\n    value: function getOpenSourceString(layerType) {\n      if (this._format) {\n        return \"\".concat(layerType, \"_fetch:\").concat(base64Encode(this._remoteURL), \".\").concat(this._format.toString());\n      } else {\n        return \"\".concat(layerType, \"_fetch:\").concat(base64Encode(this._remoteURL));\n      }\n    }\n    /**\n     * @description\n     * Apply a format for the image source of the layer\n     * @param {FormatQualifier} format A to apply to the layered image, see more {@link Qualifiers.Format|here}\n     * @returns {this}\n     */\n  }, {\n    key: \"format\",\n    value: function format(_format) {\n      this._qualifierModel.format = _format.toString();\n      this._format = _format;\n      return this;\n    }\n  }], [{\n    key: \"fromJson\",\n    value: function fromJson(qualifierModel, transformationFromJson) {\n      var url = qualifierModel.url,\n        transformation = qualifierModel.transformation,\n        format = qualifierModel.format;\n      // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\n      // This allows the inheriting classes to determine the class to be created\n      var result = new this(url);\n      if (transformation) {\n        result.transformation(transformationFromJson(transformation));\n      }\n      if (format) {\n        result.format(new FormatQualifier(format));\n      }\n      return result;\n    }\n  }]);\n  return FetchSource;\n}(BaseSource);\nexport { FetchSource };","map":{"version":3,"names":["BaseSource","FormatQualifier","base64Encode","FetchSource","remoteURL","_qualifierModel","sourceType","url","_remoteURL","layerType","_format","toString","format","qualifierModel","transformationFromJson","transformation","result"],"sources":["/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/FetchSource.js"],"sourcesContent":["import { BaseSource } from \"../BaseSource.js\";\nimport { FormatQualifier } from \"../../format/FormatQualifier.js\";\nimport { base64Encode } from \"../../../internal/utils/base64Encode.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate a Fetch layer\n * <div class=\"panel panel-warning\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n  *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}</li>\n *   </ul>\n * </div>\n *\n * {@link https://cloudinary.com/documentation/fetch_remote_images|Learn more about fetching from a remote URL}\n */\nclass FetchSource extends BaseSource {\n    constructor(remoteURL) {\n        super();\n        this._qualifierModel = {\n            sourceType: 'fetch',\n            url: remoteURL\n        };\n        this._remoteURL = remoteURL;\n    }\n    /**\n     * @description\n     * Returns the opening string of the layer,\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\n     * @returns {string}\n     */\n    getOpenSourceString(layerType) {\n        if (this._format) {\n            return `${layerType}_fetch:${base64Encode(this._remoteURL)}.${this._format.toString()}`;\n        }\n        else {\n            return `${layerType}_fetch:${base64Encode(this._remoteURL)}`;\n        }\n    }\n    /**\n     * @description\n     * Apply a format for the image source of the layer\n     * @param {FormatQualifier} format A to apply to the layered image, see more {@link Qualifiers.Format|here}\n     * @returns {this}\n     */\n    format(format) {\n        this._qualifierModel.format = format.toString();\n        this._format = format;\n        return this;\n    }\n    static fromJson(qualifierModel, transformationFromJson) {\n        const { url, transformation, format } = qualifierModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(url);\n        if (transformation) {\n            result.transformation(transformationFromJson(transformation));\n        }\n        if (format) {\n            result.format(new FormatQualifier(format));\n        }\n        return result;\n    }\n}\nexport { FetchSource };\n"],"mappings":";;;;AAAA,SAASA,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,eAAe,QAAQ,iCAAiC;AACjE,SAASC,YAAY,QAAQ,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA,IAkBMC,WAAW;EAAA;EAAA;EACb,qBAAYC,SAAS,EAAE;IAAA;IAAA;IACnB;IACA,MAAKC,eAAe,GAAG;MACnBC,UAAU,EAAE,OAAO;MACnBC,GAAG,EAAEH;IACT,CAAC;IACD,MAAKI,UAAU,GAAGJ,SAAS;IAAC;EAChC;EACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA;IAAA,OAMA,6BAAoBK,SAAS,EAAE;MAC3B,IAAI,IAAI,CAACC,OAAO,EAAE;QACd,iBAAUD,SAAS,oBAAUP,YAAY,CAAC,IAAI,CAACM,UAAU,CAAC,cAAI,IAAI,CAACE,OAAO,CAACC,QAAQ,EAAE;MACzF,CAAC,MACI;QACD,iBAAUF,SAAS,oBAAUP,YAAY,CAAC,IAAI,CAACM,UAAU,CAAC;MAC9D;IACJ;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA;IAAA,OAMA,gBAAOI,OAAM,EAAE;MACX,IAAI,CAACP,eAAe,CAACO,MAAM,GAAGA,OAAM,CAACD,QAAQ,EAAE;MAC/C,IAAI,CAACD,OAAO,GAAGE,OAAM;MACrB,OAAO,IAAI;IACf;EAAC;IAAA;IAAA,OACD,kBAAgBC,cAAc,EAAEC,sBAAsB,EAAE;MACpD,IAAQP,GAAG,GAA6BM,cAAc,CAA9CN,GAAG;QAAEQ,cAAc,GAAaF,cAAc,CAAzCE,cAAc;QAAEH,MAAM,GAAKC,cAAc,CAAzBD,MAAM;MACnC;MACA;MACA,IAAMI,MAAM,GAAG,IAAI,IAAI,CAACT,GAAG,CAAC;MAC5B,IAAIQ,cAAc,EAAE;QAChBC,MAAM,CAACD,cAAc,CAACD,sBAAsB,CAACC,cAAc,CAAC,CAAC;MACjE;MACA,IAAIH,MAAM,EAAE;QACRI,MAAM,CAACJ,MAAM,CAAC,IAAIX,eAAe,CAACW,MAAM,CAAC,CAAC;MAC9C;MACA,OAAOI,MAAM;IACjB;EAAC;EAAA;AAAA,EA9CqBhB,UAAU;AAgDpC,SAASG,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}