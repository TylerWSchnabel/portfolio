{"ast":null,"code":"import _classCallCheck from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description Applies stripes to the image to help people with common color-blind conditions to differentiate between colors that are similar for them.\n *              You can replace colors using the xray() method.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nvar AssistColorBlindEffectAction = /*#__PURE__*/function (_Action) {\n  _inherits(AssistColorBlindEffectAction, _Action);\n  var _super = _createSuper(AssistColorBlindEffectAction);\n  function AssistColorBlindEffectAction() {\n    var _this;\n    _classCallCheck(this, AssistColorBlindEffectAction);\n    _this = _super.call(this);\n    _this._actionModel = {};\n    _this._actionModel.actionType = 'assistColorblind';\n    _this.addQualifier(new Qualifier('e', new QualifierValue('assist_colorblind')));\n    return _this;\n  }\n  /**\n   * @description Replaces problematic colors with colors that are easier to differentiate.\n   * @return {this}\n   */\n  _createClass(AssistColorBlindEffectAction, [{\n    key: \"xray\",\n    value: function xray() {\n      this._actionModel.type = 'xray';\n      return this.addQualifier(new Qualifier('e', new QualifierValue(['assist_colorblind', 'xray']).setDelimiter(':')));\n    }\n    /**\n     * @description Applies stripes of the specified intensity to help people with common color blind conditions to differentiate between colors that are similar for them.\n     * @param {number | string} strength The intensity of the stripes. (Range: 1 to 100, Server default: 10)\n     * @return {this}\n     */\n  }, {\n    key: \"stripesStrength\",\n    value: function stripesStrength(strength) {\n      this._actionModel.type = 'stripes';\n      this._actionModel.stripesStrength = strength;\n      return this.addQualifier(new Qualifier('e', new QualifierValue(['assist_colorblind', strength]).setDelimiter(':')));\n    }\n  }], [{\n    key: \"fromJson\",\n    value: function fromJson(actionModel) {\n      var actionType = actionModel.actionType,\n        type = actionModel.type,\n        stripesStrength = actionModel.stripesStrength;\n      // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n      // This allows the inheriting classes to determine the class to be created\n      var result = new this();\n      if (type === 'xray') {\n        result.xray();\n      }\n      if (type === 'stripes') {\n        stripesStrength && result.stripesStrength(stripesStrength);\n      }\n      return result;\n    }\n  }]);\n  return AssistColorBlindEffectAction;\n}(Action);\nexport { AssistColorBlindEffectAction };","map":{"version":3,"names":["Action","QualifierValue","Qualifier","AssistColorBlindEffectAction","_actionModel","actionType","addQualifier","type","setDelimiter","strength","stripesStrength","actionModel","result","xray"],"sources":["/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@cloudinary/transformation-builder-sdk/actions/effect/AssistColorBlind.js"],"sourcesContent":["import { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description Applies stripes to the image to help people with common color-blind conditions to differentiate between colors that are similar for them.\n *              You can replace colors using the xray() method.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass AssistColorBlindEffectAction extends Action {\n    constructor() {\n        super();\n        this._actionModel = {};\n        this._actionModel.actionType = 'assistColorblind';\n        this.addQualifier(new Qualifier('e', new QualifierValue('assist_colorblind')));\n    }\n    /**\n     * @description Replaces problematic colors with colors that are easier to differentiate.\n     * @return {this}\n     */\n    xray() {\n        this._actionModel.type = 'xray';\n        return this.addQualifier(new Qualifier('e', new QualifierValue(['assist_colorblind', 'xray']).setDelimiter(':')));\n    }\n    /**\n     * @description Applies stripes of the specified intensity to help people with common color blind conditions to differentiate between colors that are similar for them.\n     * @param {number | string} strength The intensity of the stripes. (Range: 1 to 100, Server default: 10)\n     * @return {this}\n     */\n    stripesStrength(strength) {\n        this._actionModel.type = 'stripes';\n        this._actionModel.stripesStrength = strength;\n        return this.addQualifier(new Qualifier('e', new QualifierValue(['assist_colorblind', strength]).setDelimiter(':')));\n    }\n    static fromJson(actionModel) {\n        const { actionType, type, stripesStrength } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this();\n        if (type === 'xray') {\n            result.xray();\n        }\n        if (type === 'stripes') {\n            stripesStrength && result.stripesStrength(stripesStrength);\n        }\n        return result;\n    }\n}\nexport { AssistColorBlindEffectAction };\n"],"mappings":";;;;AAAA,SAASA,MAAM,QAAQ,0BAA0B;AACjD,SAASC,cAAc,QAAQ,4CAA4C;AAC3E,SAASC,SAAS,QAAQ,uCAAuC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AANA,IAOMC,4BAA4B;EAAA;EAAA;EAC9B,wCAAc;IAAA;IAAA;IACV;IACA,MAAKC,YAAY,GAAG,CAAC,CAAC;IACtB,MAAKA,YAAY,CAACC,UAAU,GAAG,kBAAkB;IACjD,MAAKC,YAAY,CAAC,IAAIJ,SAAS,CAAC,GAAG,EAAE,IAAID,cAAc,CAAC,mBAAmB,CAAC,CAAC,CAAC;IAAC;EACnF;EACA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,gBAAO;MACH,IAAI,CAACG,YAAY,CAACG,IAAI,GAAG,MAAM;MAC/B,OAAO,IAAI,CAACD,YAAY,CAAC,IAAIJ,SAAS,CAAC,GAAG,EAAE,IAAID,cAAc,CAAC,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC,CAACO,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;IACrH;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,yBAAgBC,QAAQ,EAAE;MACtB,IAAI,CAACL,YAAY,CAACG,IAAI,GAAG,SAAS;MAClC,IAAI,CAACH,YAAY,CAACM,eAAe,GAAGD,QAAQ;MAC5C,OAAO,IAAI,CAACH,YAAY,CAAC,IAAIJ,SAAS,CAAC,GAAG,EAAE,IAAID,cAAc,CAAC,CAAC,mBAAmB,EAAEQ,QAAQ,CAAC,CAAC,CAACD,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;IACvH;EAAC;IAAA;IAAA,OACD,kBAAgBG,WAAW,EAAE;MACzB,IAAQN,UAAU,GAA4BM,WAAW,CAAjDN,UAAU;QAAEE,IAAI,GAAsBI,WAAW,CAArCJ,IAAI;QAAEG,eAAe,GAAKC,WAAW,CAA/BD,eAAe;MACzC;MACA;MACA,IAAME,MAAM,GAAG,IAAI,IAAI,EAAE;MACzB,IAAIL,IAAI,KAAK,MAAM,EAAE;QACjBK,MAAM,CAACC,IAAI,EAAE;MACjB;MACA,IAAIN,IAAI,KAAK,SAAS,EAAE;QACpBG,eAAe,IAAIE,MAAM,CAACF,eAAe,CAACA,eAAe,CAAC;MAC9D;MACA,OAAOE,MAAM;IACjB;EAAC;EAAA;AAAA,EArCsCZ,MAAM;AAuCjD,SAASG,4BAA4B"},"metadata":{},"sourceType":"module","externalDependencies":[]}