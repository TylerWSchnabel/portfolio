{"ast":null,"code":"import _classCallCheck from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Action } from \"../internal/Action.js\";\nimport { QualifierValue } from \"../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../internal/qualifier/Qualifier.js\";\nimport { prepareColor } from \"../internal/utils/prepareColor.js\";\n/**\n * @description Adds a solid border around an image or video.\n *\n *  <b>Learn more:</b>\n * {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#borders|Adding image borders}\n * @memberOf Actions\n * @namespace Border\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {solid} from \"@cloudinary/url-gen/actions/border\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.border(\n *  solid(15, 'green'),\n *  // Or alternatively\n *  solid().width(15).color('green')\n * );\n *\n */\n/**\n * @memberOf Actions.Border\n * @see Actions.Border\n * @example\n * // Used through a builder function Border.solid(), and not by creating a new instance\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.border(\n *  Border.solid(15, 'green'),\n *  // Or alternatively\n *  Border.solid().width(15).color('green')\n * );\n */\nvar BorderAction = /*#__PURE__*/function (_Action) {\n  _inherits(BorderAction, _Action);\n  var _super = _createSuper(BorderAction);\n  /**\n   * @description Adds a border of the specified type around an image or video.\n   * @param {'solid'} borderType The type of border (currently only 'solid' is supported). Use values in {@link Qualifiers.Border|Border Values}.\n   * @param {string} color The color of the border.\n   * @param {number} borderWidth The width in pixels.\n   */\n  function BorderAction(borderType, color, borderWidth) {\n    var _this;\n    _classCallCheck(this, BorderAction);\n    _this = _super.call(this);\n    _this.borderType = borderType;\n    _this.borderColor = prepareColor(color);\n    _this.borderWidth = borderWidth;\n    return _this;\n  }\n  /**\n   * @description Sets the width of the border\n   * @param {number | string} borderWidth The width in pixels.\n   */\n  _createClass(BorderAction, [{\n    key: \"width\",\n    value: function width(borderWidth) {\n      this.borderWidth = borderWidth;\n      return this;\n    }\n    /**\n     * @description Sets the color of the border.\n     * @param {string} borderColor The color of the border.\n     */\n  }, {\n    key: \"color\",\n    value: function color(borderColor) {\n      this.borderColor = prepareColor(borderColor);\n      return this;\n    }\n    /**\n     * @description Rounds the specified corners of an image.\n     * @param {RoundCornersAction} roundCorners\n     * @return {this}\n     */\n  }, {\n    key: \"roundCorners\",\n    value: function roundCorners(_roundCorners) {\n      this._roundCorners = _roundCorners;\n      return this;\n    }\n  }, {\n    key: \"prepareQualifiers\",\n    value: function prepareQualifiers() {\n      var qualifierValue = new QualifierValue([\"\".concat(this.borderWidth, \"px\"), this.borderType, \"\".concat(this.borderColor)]).setDelimiter('_');\n      this.addQualifier(new Qualifier('bo', qualifierValue));\n      if (this._roundCorners) {\n        this.addQualifier(this._roundCorners.qualifiers.get('r'));\n      }\n    }\n  }]);\n  return BorderAction;\n}(Action);\n/**\n * @summary action\n * @memberOf Actions.Border\n * @description Sets the style of the border.\n * @param {number | string} width The width in pixels.\n * @param {string} color The color of the border, e.g 'green', 'yellow'.\n * @return {Actions.Border.BorderAction}\n */\nfunction solid(width, color) {\n  return new BorderAction('solid', color, width);\n}\nvar Border = {\n  solid: solid\n};\nexport { BorderAction, Border, solid };","map":{"version":3,"names":["Action","QualifierValue","Qualifier","prepareColor","BorderAction","borderType","color","borderWidth","borderColor","roundCorners","_roundCorners","qualifierValue","setDelimiter","addQualifier","qualifiers","get","solid","width","Border"],"sources":["/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@cloudinary/transformation-builder-sdk/actions/border.js"],"sourcesContent":["import { Action } from \"../internal/Action.js\";\nimport { QualifierValue } from \"../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../internal/qualifier/Qualifier.js\";\nimport { prepareColor } from \"../internal/utils/prepareColor.js\";\n/**\n * @description Adds a solid border around an image or video.\n *\n *  <b>Learn more:</b>\n * {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#borders|Adding image borders}\n * @memberOf Actions\n * @namespace Border\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {solid} from \"@cloudinary/url-gen/actions/border\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.border(\n *  solid(15, 'green'),\n *  // Or alternatively\n *  solid().width(15).color('green')\n * );\n *\n */\n/**\n * @memberOf Actions.Border\n * @see Actions.Border\n * @example\n * // Used through a builder function Border.solid(), and not by creating a new instance\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.border(\n *  Border.solid(15, 'green'),\n *  // Or alternatively\n *  Border.solid().width(15).color('green')\n * );\n */\nclass BorderAction extends Action {\n    /**\n     * @description Adds a border of the specified type around an image or video.\n     * @param {'solid'} borderType The type of border (currently only 'solid' is supported). Use values in {@link Qualifiers.Border|Border Values}.\n     * @param {string} color The color of the border.\n     * @param {number} borderWidth The width in pixels.\n     */\n    constructor(borderType, color, borderWidth) {\n        super();\n        this.borderType = borderType;\n        this.borderColor = prepareColor(color);\n        this.borderWidth = borderWidth;\n    }\n    /**\n     * @description Sets the width of the border\n     * @param {number | string} borderWidth The width in pixels.\n     */\n    width(borderWidth) {\n        this.borderWidth = borderWidth;\n        return this;\n    }\n    /**\n     * @description Sets the color of the border.\n     * @param {string} borderColor The color of the border.\n     */\n    color(borderColor) {\n        this.borderColor = prepareColor(borderColor);\n        return this;\n    }\n    /**\n     * @description Rounds the specified corners of an image.\n     * @param {RoundCornersAction} roundCorners\n     * @return {this}\n     */\n    roundCorners(roundCorners) {\n        this._roundCorners = roundCorners;\n        return this;\n    }\n    prepareQualifiers() {\n        const qualifierValue = new QualifierValue([`${this.borderWidth}px`, this.borderType, `${this.borderColor}`]).setDelimiter('_');\n        this.addQualifier(new Qualifier('bo', qualifierValue));\n        if (this._roundCorners) {\n            this.addQualifier(this._roundCorners.qualifiers.get('r'));\n        }\n    }\n}\n/**\n * @summary action\n * @memberOf Actions.Border\n * @description Sets the style of the border.\n * @param {number | string} width The width in pixels.\n * @param {string} color The color of the border, e.g 'green', 'yellow'.\n * @return {Actions.Border.BorderAction}\n */\nfunction solid(width, color) {\n    return new BorderAction('solid', color, width);\n}\nconst Border = {\n    solid\n};\nexport { BorderAction, Border, solid };\n"],"mappings":";;;;AAAA,SAASA,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,cAAc,QAAQ,yCAAyC;AACxE,SAASC,SAAS,QAAQ,oCAAoC;AAC9D,SAASC,YAAY,QAAQ,mCAAmC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA,IAeMC,YAAY;EAAA;EAAA;EACd;AACJ;AACA;AACA;AACA;AACA;EACI,sBAAYC,UAAU,EAAEC,KAAK,EAAEC,WAAW,EAAE;IAAA;IAAA;IACxC;IACA,MAAKF,UAAU,GAAGA,UAAU;IAC5B,MAAKG,WAAW,GAAGL,YAAY,CAACG,KAAK,CAAC;IACtC,MAAKC,WAAW,GAAGA,WAAW;IAAC;EACnC;EACA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,eAAMA,WAAW,EAAE;MACf,IAAI,CAACA,WAAW,GAAGA,WAAW;MAC9B,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,eAAMC,WAAW,EAAE;MACf,IAAI,CAACA,WAAW,GAAGL,YAAY,CAACK,WAAW,CAAC;MAC5C,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,sBAAaC,aAAY,EAAE;MACvB,IAAI,CAACC,aAAa,GAAGD,aAAY;MACjC,OAAO,IAAI;IACf;EAAC;IAAA;IAAA,OACD,6BAAoB;MAChB,IAAME,cAAc,GAAG,IAAIV,cAAc,CAAC,WAAI,IAAI,CAACM,WAAW,SAAM,IAAI,CAACF,UAAU,YAAK,IAAI,CAACG,WAAW,EAAG,CAAC,CAACI,YAAY,CAAC,GAAG,CAAC;MAC9H,IAAI,CAACC,YAAY,CAAC,IAAIX,SAAS,CAAC,IAAI,EAAES,cAAc,CAAC,CAAC;MACtD,IAAI,IAAI,CAACD,aAAa,EAAE;QACpB,IAAI,CAACG,YAAY,CAAC,IAAI,CAACH,aAAa,CAACI,UAAU,CAACC,GAAG,CAAC,GAAG,CAAC,CAAC;MAC7D;IACJ;EAAC;EAAA;AAAA,EA5CsBf,MAAM;AA8CjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASgB,KAAK,CAACC,KAAK,EAAEX,KAAK,EAAE;EACzB,OAAO,IAAIF,YAAY,CAAC,OAAO,EAAEE,KAAK,EAAEW,KAAK,CAAC;AAClD;AACA,IAAMC,MAAM,GAAG;EACXF,KAAK,EAALA;AACJ,CAAC;AACD,SAASZ,YAAY,EAAEc,MAAM,EAAEF,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}