{"ast":null,"code":"import _classCallCheck from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { Action } from \"../../internal/Action.js\";\nimport { toFloatAsString } from \"../../internal/utils/toFloatAsString.js\";\nimport { AspectRatioQualifierValue } from \"../../qualifiers/aspectRatio/AspectRatioQualifierValue.js\";\nimport { ignoreInitialAspectRatio, regionRelative as _regionRelative, relative as _relative } from \"../../qualifiers/flag.js\";\nimport { FlagQualifier } from \"../../qualifiers/flag/FlagQualifier.js\";\nimport { ACTION_TYPE_TO_CROP_MODE_MAP, CROP_MODE_TO_ACTION_TYPE_MAP } from \"../../internal/internalConstants.js\";\n/**\n * @description Defines a resize using width and height.\n * @extends SDK.Action\n * @memberOf Actions.Resize\n * @see Visit {@link Actions.Resize| Resize} for examples\n */\nvar ResizeSimpleAction = /*#__PURE__*/function (_Action) {\n  _inherits(ResizeSimpleAction, _Action);\n  var _super = _createSuper(ResizeSimpleAction);\n  /**\n   * @param {string} cropType\n   * @param {number | string} cropWidth The required width of a transformed asset.\n   * @param {number | string} cropHeight The required height of a transformed asset.\n   */\n  function ResizeSimpleAction(cropType, cropWidth, cropHeight) {\n    var _this;\n    _classCallCheck(this, ResizeSimpleAction);\n    _this = _super.call(this);\n    _this._actionModel = {\n      dimensions: {}\n    };\n    _this._actionModel.actionType = CROP_MODE_TO_ACTION_TYPE_MAP[cropType] || cropType;\n    _this.addQualifier(new Qualifier('c', cropType));\n    cropWidth && _this.width(cropWidth);\n    cropHeight && _this.height(cropHeight);\n    return _this;\n  }\n  /**\n   * @description Sets the height of the resize\n   * @param {string | number} x The height in pixels (if an integer is specified) or as a percentage (if a float is specified).\n   */\n  _createClass(ResizeSimpleAction, [{\n    key: \"height\",\n    value: function height(x) {\n      this._actionModel.dimensions.height = x;\n      return this.addQualifier(new Qualifier('h', x));\n    }\n    /**\n     * @description Sets the width of the resize\n     * @param {string | number} x The width in pixels (if an integer is specified) or as a percentage (if a float is specified).\n     */\n  }, {\n    key: \"width\",\n    value: function width(x) {\n      this._actionModel.dimensions.width = x;\n      return this.addQualifier(new Qualifier('w', x));\n    }\n    /**\n     * @description Sets the aspect ratio of the asset.\n     * For a list of supported types see {@link Qualifiers.AspectRatio|\n      * AspectRatio values}\n     * @param {AspectRatioType|number|string} ratio The new aspect ratio, specified as a percentage or ratio.\n     * @return {this}\n     */\n  }, {\n    key: \"aspectRatio\",\n    value: function aspectRatio(ratio) {\n      // toFloatAsString is used to ensure 1 turns into 1.0\n      if (ratio instanceof AspectRatioQualifierValue) {\n        this._actionModel.dimensions.aspectRatio = \"\".concat(ratio);\n        return this.addQualifier(new Qualifier('ar', ratio));\n      }\n      if (typeof ratio === 'number' || typeof ratio === 'string') {\n        this._actionModel.dimensions.aspectRatio = toFloatAsString(ratio);\n        return this.addQualifier(new Qualifier('ar', toFloatAsString(ratio)));\n      }\n      if (ratio instanceof FlagQualifier) {\n        this._actionModel.dimensions.aspectRatio = \"\".concat(ratio.qualifierValue);\n        return this.addFlag(ratio);\n      }\n    }\n    /**\n     * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the containing image instead of the added layer.\n     * @return {this}\n     */\n  }, {\n    key: \"relative\",\n    value: function relative() {\n      this._actionModel.relative = true;\n      return this.addFlag(_relative());\n    }\n    /**\n     * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the overlaid region\n     * @return {this}\n     */\n  }, {\n    key: \"regionRelative\",\n    value: function regionRelative() {\n      this._actionModel.regionRelative = true;\n      return this.addFlag(_regionRelative());\n    }\n  }], [{\n    key: \"fromJson\",\n    value: function fromJson(actionModel) {\n      var actionType = actionModel.actionType,\n        dimensions = actionModel.dimensions,\n        relative = actionModel.relative,\n        regionRelative = actionModel.regionRelative;\n      var aspectRatio = dimensions.aspectRatio,\n        width = dimensions.width,\n        height = dimensions.height;\n      var cropMode = ACTION_TYPE_TO_CROP_MODE_MAP[actionType] || actionType;\n      // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n      // This allows the inheriting classes to determine the class to be created\n      var result = new this(cropMode, width, height);\n      aspectRatio && result.aspectRatio(aspectRatio === 'ignore_aspect_ratio' ? ignoreInitialAspectRatio() : aspectRatio);\n      relative && result.relative();\n      regionRelative && result.regionRelative();\n      return result;\n    }\n  }]);\n  return ResizeSimpleAction;\n}(Action);\nexport { ResizeSimpleAction };","map":{"version":3,"names":["Qualifier","Action","toFloatAsString","AspectRatioQualifierValue","ignoreInitialAspectRatio","regionRelative","relative","FlagQualifier","ACTION_TYPE_TO_CROP_MODE_MAP","CROP_MODE_TO_ACTION_TYPE_MAP","ResizeSimpleAction","cropType","cropWidth","cropHeight","_actionModel","dimensions","actionType","addQualifier","width","height","x","ratio","aspectRatio","qualifierValue","addFlag","actionModel","cropMode","result"],"sources":["/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@cloudinary/transformation-builder-sdk/actions/resize/ResizeSimpleAction.js"],"sourcesContent":["import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { Action } from \"../../internal/Action.js\";\nimport { toFloatAsString } from \"../../internal/utils/toFloatAsString.js\";\nimport { AspectRatioQualifierValue } from \"../../qualifiers/aspectRatio/AspectRatioQualifierValue.js\";\nimport { ignoreInitialAspectRatio, regionRelative, relative } from \"../../qualifiers/flag.js\";\nimport { FlagQualifier } from \"../../qualifiers/flag/FlagQualifier.js\";\nimport { ACTION_TYPE_TO_CROP_MODE_MAP, CROP_MODE_TO_ACTION_TYPE_MAP } from \"../../internal/internalConstants.js\";\n/**\n * @description Defines a resize using width and height.\n * @extends SDK.Action\n * @memberOf Actions.Resize\n * @see Visit {@link Actions.Resize| Resize} for examples\n */\nclass ResizeSimpleAction extends Action {\n    /**\n     * @param {string} cropType\n     * @param {number | string} cropWidth The required width of a transformed asset.\n     * @param {number | string} cropHeight The required height of a transformed asset.\n     */\n    constructor(cropType, cropWidth, cropHeight) {\n        super();\n        this._actionModel = { dimensions: {} };\n        this._actionModel.actionType = CROP_MODE_TO_ACTION_TYPE_MAP[cropType] || cropType;\n        this.addQualifier(new Qualifier('c', cropType));\n        cropWidth && this.width(cropWidth);\n        cropHeight && this.height(cropHeight);\n    }\n    /**\n     * @description Sets the height of the resize\n     * @param {string | number} x The height in pixels (if an integer is specified) or as a percentage (if a float is specified).\n     */\n    height(x) {\n        this._actionModel.dimensions.height = x;\n        return this.addQualifier(new Qualifier('h', x));\n    }\n    /**\n     * @description Sets the width of the resize\n     * @param {string | number} x The width in pixels (if an integer is specified) or as a percentage (if a float is specified).\n     */\n    width(x) {\n        this._actionModel.dimensions.width = x;\n        return this.addQualifier(new Qualifier('w', x));\n    }\n    /**\n     * @description Sets the aspect ratio of the asset.\n     * For a list of supported types see {@link Qualifiers.AspectRatio|\n      * AspectRatio values}\n     * @param {AspectRatioType|number|string} ratio The new aspect ratio, specified as a percentage or ratio.\n     * @return {this}\n     */\n    aspectRatio(ratio) {\n        // toFloatAsString is used to ensure 1 turns into 1.0\n        if (ratio instanceof AspectRatioQualifierValue) {\n            this._actionModel.dimensions.aspectRatio = `${ratio}`;\n            return this.addQualifier(new Qualifier('ar', ratio));\n        }\n        if (typeof ratio === 'number' || typeof ratio === 'string') {\n            this._actionModel.dimensions.aspectRatio = toFloatAsString(ratio);\n            return this.addQualifier(new Qualifier('ar', toFloatAsString(ratio)));\n        }\n        if (ratio instanceof FlagQualifier) {\n            this._actionModel.dimensions.aspectRatio = `${ratio.qualifierValue}`;\n            return this.addFlag(ratio);\n        }\n    }\n    /**\n     * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the containing image instead of the added layer.\n     * @return {this}\n     */\n    relative() {\n        this._actionModel.relative = true;\n        return this.addFlag(relative());\n    }\n    /**\n     * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the overlaid region\n     * @return {this}\n     */\n    regionRelative() {\n        this._actionModel.regionRelative = true;\n        return this.addFlag(regionRelative());\n    }\n    static fromJson(actionModel) {\n        const { actionType, dimensions, relative, regionRelative } = actionModel;\n        const { aspectRatio, width, height } = dimensions;\n        const cropMode = ACTION_TYPE_TO_CROP_MODE_MAP[actionType] || actionType;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(cropMode, width, height);\n        aspectRatio && result.aspectRatio(aspectRatio === 'ignore_aspect_ratio' ? ignoreInitialAspectRatio() : aspectRatio);\n        relative && result.relative();\n        regionRelative && result.regionRelative();\n        return result;\n    }\n}\nexport { ResizeSimpleAction };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}