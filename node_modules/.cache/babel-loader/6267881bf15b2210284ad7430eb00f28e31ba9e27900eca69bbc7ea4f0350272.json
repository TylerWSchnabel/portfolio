{"ast":null,"code":"import _classCallCheck from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { QualifierValue } from \"../internal/qualifier/QualifierValue.js\";\n/**\n * @summary qualifier\n * @namespace AutoFocus\n * @memberOf Qualifiers\n * @see Visit {@link Qualifiers.Gravity|Gravity} for an example\n */\n/**\n * @memberOf Qualifiers.AutoFocus\n * @extends {SDK.QualifierValue}\n * @see Visit {@link Qualifiers.Gravity|Gravity} for an example\n */\nvar AutoFocus = /*#__PURE__*/function (_QualifierValue) {\n  _inherits(AutoFocus, _QualifierValue);\n  var _super = _createSuper(AutoFocus);\n  function AutoFocus(focusOn, weight) {\n    var _this;\n    _classCallCheck(this, AutoFocus);\n    _this = _super.call(this);\n    _this._weight = weight;\n    _this.focusOn = focusOn;\n    _this.shouldAvoid = false;\n    return _this;\n  }\n  /**\n   * @summary qualifier\n   * @description Specifies the object to focus on automatically\n   * Accepts an AutoFocusObject (which is just a wrapper for a FocusOn object, but with extra method: avoid, weight)\n   * @param {Qualifiers.FocusOn} obj The object to focus on.\n   * @param {number} weight\n   */\n  _createClass(AutoFocus, [{\n    key: \"shouldAddWeight\",\n    value: function shouldAddWeight() {\n      return typeof this._weight === 'number' || typeof this._weight === 'string' || this.shouldAvoid;\n    }\n    /**\n     * @summary qualifier\n     * @desc Get the name of the of the object\n     */\n  }, {\n    key: \"getName\",\n    value: function getName() {\n      return this.focusOn.name;\n    }\n    /**\n     * @summary qualifier\n     * @desc Get the weight for the object\n     */\n  }, {\n    key: \"getWeight\",\n    value: function getWeight() {\n      if (this.shouldAvoid) {\n        return 'avoid';\n      } else {\n        return this._weight;\n      }\n    }\n    /**\n     * @summary qualifier\n     * @desc Return the string representation of this QualifierValue\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      // Future proofing, in case we'd like to support some custom string in the future, or if data is coming from a DB\n      if (this.shouldAddWeight()) {\n        return \"\".concat(this.getName(), \"_\").concat(this.getWeight());\n      } else {\n        return \"\".concat(this.getName());\n      }\n    }\n    /**\n     * @summary qualifier\n     * @description Sets the importance level of the object within the automatic gravity algorithm\n     * @param {numebr} w The focus weight for the object\n     * @return {this}\n     */\n  }, {\n    key: \"weight\",\n    value: function weight(w) {\n      this._weight = w;\n      return this;\n    }\n    /**\n     * @summary qualifier\n     * @description Attempts to avoid the detected object in the image\n     * @return {this}\n     */\n  }, {\n    key: \"avoid\",\n    value: function avoid() {\n      this.shouldAvoid = true;\n      return this;\n    }\n  }], [{\n    key: \"focusOn\",\n    value: function focusOn(obj, weight) {\n      return new AutoFocus(obj, weight);\n    }\n  }]);\n  return AutoFocus;\n}(QualifierValue);\nexport { AutoFocus };","map":{"version":3,"names":["QualifierValue","AutoFocus","focusOn","weight","_weight","shouldAvoid","name","shouldAddWeight","getName","getWeight","w","obj"],"sources":["/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@cloudinary/transformation-builder-sdk/qualifiers/autoFocus.js"],"sourcesContent":["import { QualifierValue } from \"../internal/qualifier/QualifierValue.js\";\n/**\n * @summary qualifier\n * @namespace AutoFocus\n * @memberOf Qualifiers\n * @see Visit {@link Qualifiers.Gravity|Gravity} for an example\n */\n/**\n * @memberOf Qualifiers.AutoFocus\n * @extends {SDK.QualifierValue}\n * @see Visit {@link Qualifiers.Gravity|Gravity} for an example\n */\nclass AutoFocus extends QualifierValue {\n    constructor(focusOn, weight) {\n        super();\n        this._weight = weight;\n        this.focusOn = focusOn;\n        this.shouldAvoid = false;\n    }\n    /**\n     * @summary qualifier\n     * @description Specifies the object to focus on automatically\n     * Accepts an AutoFocusObject (which is just a wrapper for a FocusOn object, but with extra method: avoid, weight)\n     * @param {Qualifiers.FocusOn} obj The object to focus on.\n     * @param {number} weight\n     */\n    static focusOn(obj, weight) {\n        return new AutoFocus(obj, weight);\n    }\n    shouldAddWeight() {\n        return typeof this._weight === 'number' || typeof this._weight === 'string' || this.shouldAvoid;\n    }\n    /**\n     * @summary qualifier\n     * @desc Get the name of the of the object\n     */\n    getName() {\n        return this.focusOn.name;\n    }\n    /**\n     * @summary qualifier\n     * @desc Get the weight for the object\n     */\n    getWeight() {\n        if (this.shouldAvoid) {\n            return 'avoid';\n        }\n        else {\n            return this._weight;\n        }\n    }\n    /**\n     * @summary qualifier\n     * @desc Return the string representation of this QualifierValue\n     */\n    toString() {\n        // Future proofing, in case we'd like to support some custom string in the future, or if data is coming from a DB\n        if (this.shouldAddWeight()) {\n            return `${this.getName()}_${this.getWeight()}`;\n        }\n        else {\n            return `${this.getName()}`;\n        }\n    }\n    /**\n     * @summary qualifier\n     * @description Sets the importance level of the object within the automatic gravity algorithm\n     * @param {numebr} w The focus weight for the object\n     * @return {this}\n     */\n    weight(w) {\n        this._weight = w;\n        return this;\n    }\n    /**\n     * @summary qualifier\n     * @description Attempts to avoid the detected object in the image\n     * @return {this}\n     */\n    avoid() {\n        this.shouldAvoid = true;\n        return this;\n    }\n}\nexport { AutoFocus };\n"],"mappings":";;;;AAAA,SAASA,cAAc,QAAQ,yCAAyC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA,IAKMC,SAAS;EAAA;EAAA;EACX,mBAAYC,OAAO,EAAEC,MAAM,EAAE;IAAA;IAAA;IACzB;IACA,MAAKC,OAAO,GAAGD,MAAM;IACrB,MAAKD,OAAO,GAAGA,OAAO;IACtB,MAAKG,WAAW,GAAG,KAAK;IAAC;EAC7B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAA;IAAA,OAUA,2BAAkB;MACd,OAAO,OAAO,IAAI,CAACD,OAAO,KAAK,QAAQ,IAAI,OAAO,IAAI,CAACA,OAAO,KAAK,QAAQ,IAAI,IAAI,CAACC,WAAW;IACnG;IACA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,mBAAU;MACN,OAAO,IAAI,CAACH,OAAO,CAACI,IAAI;IAC5B;IACA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,qBAAY;MACR,IAAI,IAAI,CAACD,WAAW,EAAE;QAClB,OAAO,OAAO;MAClB,CAAC,MACI;QACD,OAAO,IAAI,CAACD,OAAO;MACvB;IACJ;IACA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,oBAAW;MACP;MACA,IAAI,IAAI,CAACG,eAAe,EAAE,EAAE;QACxB,iBAAU,IAAI,CAACC,OAAO,EAAE,cAAI,IAAI,CAACC,SAAS,EAAE;MAChD,CAAC,MACI;QACD,iBAAU,IAAI,CAACD,OAAO,EAAE;MAC5B;IACJ;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA;IAAA,OAMA,gBAAOE,CAAC,EAAE;MACN,IAAI,CAACN,OAAO,GAAGM,CAAC;MAChB,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,iBAAQ;MACJ,IAAI,CAACL,WAAW,GAAG,IAAI;MACvB,OAAO,IAAI;IACf;EAAC;IAAA;IAAA,OAxDD,iBAAeM,GAAG,EAAER,MAAM,EAAE;MACxB,OAAO,IAAIF,SAAS,CAACU,GAAG,EAAER,MAAM,CAAC;IACrC;EAAC;EAAA;AAAA,EAhBmBH,cAAc;AAwEtC,SAASC,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}