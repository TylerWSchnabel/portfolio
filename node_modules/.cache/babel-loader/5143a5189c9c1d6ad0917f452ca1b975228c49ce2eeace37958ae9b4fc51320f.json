{"ast":null,"code":"import { VideoSource } from \"./source/sourceTypes/VideoSource.js\";\nimport { ImageSource } from \"./source/sourceTypes/ImageSource.js\";\nimport { SubtitlesSource } from \"./source/sourceTypes/SubtitlesSource.js\";\nimport { FetchSource } from \"./source/sourceTypes/FetchSource.js\";\nimport { TextSource } from \"./source/sourceTypes/TextSource.js\";\n/**\n * @description This namespace contains different sources that can be used in overlays and underlays\n * @memberOf Qualifiers\n * @namespace Source\n * @see {@link Actions.Overlay| The overlay action}\n * @see {@link Actions.Underlay| The underlay action}\n */\n/**\n * @summary qualifier\n * @description Returns an instance of an ImageSource\n * @memberOf Qualifiers.Source\n * @param {string} publicID The publicID of the image to be used as a layer\n * @return {Qualifiers.Source.ImageSource}\n */\nfunction image(publicID) {\n  return new ImageSource(publicID);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of a TextSource\n * @memberOf Qualifiers.Source\n * @param {string} text The text to display.\n * @param {TextStyle | string} textStyle The textStyle to use with the text in the layer\n * @return {Qualifiers.Source.TextSource}\n */\nfunction text(text, textStyle) {\n  return new TextSource(text, textStyle);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of a VideoSource\n * @memberOf Qualifiers.Source\n * @param {string} publicID The publicID of the video to be used as a layer\n * @return {Qualifiers.Source.VideoSource}\n */\nfunction video(publicID) {\n  return new VideoSource(publicID);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of an VideoSource\n * @memberOf Qualifiers.Source\n * @param {string} fileName The publicID of the video to be used as a layer\n * @return {Qualifiers.Source.VideoSource}\n */\nfunction subtitles(fileName) {\n  return new SubtitlesSource(fileName);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of a FetchSource\n * @memberOf Qualifiers.Source\n * @param {string} remoteURL The URL of the remote asset to fetch as a layer\n * @return {Qualifiers.Source.FetchSource}\n */\nfunction fetch(remoteURL) {\n  return new FetchSource(remoteURL);\n}\nvar Source = {\n  image: image,\n  text: text,\n  video: video,\n  subtitles: subtitles,\n  fetch: fetch\n};\nexport { Source, image, text, video, subtitles, fetch };","map":{"version":3,"names":["VideoSource","ImageSource","SubtitlesSource","FetchSource","TextSource","image","publicID","text","textStyle","video","subtitles","fileName","fetch","remoteURL","Source"],"sources":["/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@cloudinary/transformation-builder-sdk/qualifiers/source.js"],"sourcesContent":["import { VideoSource } from \"./source/sourceTypes/VideoSource.js\";\nimport { ImageSource } from \"./source/sourceTypes/ImageSource.js\";\nimport { SubtitlesSource } from \"./source/sourceTypes/SubtitlesSource.js\";\nimport { FetchSource } from \"./source/sourceTypes/FetchSource.js\";\nimport { TextSource } from \"./source/sourceTypes/TextSource.js\";\n/**\n * @description This namespace contains different sources that can be used in overlays and underlays\n * @memberOf Qualifiers\n * @namespace Source\n * @see {@link Actions.Overlay| The overlay action}\n * @see {@link Actions.Underlay| The underlay action}\n */\n/**\n * @summary qualifier\n * @description Returns an instance of an ImageSource\n * @memberOf Qualifiers.Source\n * @param {string} publicID The publicID of the image to be used as a layer\n * @return {Qualifiers.Source.ImageSource}\n */\nfunction image(publicID) {\n    return new ImageSource(publicID);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of a TextSource\n * @memberOf Qualifiers.Source\n * @param {string} text The text to display.\n * @param {TextStyle | string} textStyle The textStyle to use with the text in the layer\n * @return {Qualifiers.Source.TextSource}\n */\nfunction text(text, textStyle) {\n    return new TextSource(text, textStyle);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of a VideoSource\n * @memberOf Qualifiers.Source\n * @param {string} publicID The publicID of the video to be used as a layer\n * @return {Qualifiers.Source.VideoSource}\n */\nfunction video(publicID) {\n    return new VideoSource(publicID);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of an VideoSource\n * @memberOf Qualifiers.Source\n * @param {string} fileName The publicID of the video to be used as a layer\n * @return {Qualifiers.Source.VideoSource}\n */\nfunction subtitles(fileName) {\n    return new SubtitlesSource(fileName);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of a FetchSource\n * @memberOf Qualifiers.Source\n * @param {string} remoteURL The URL of the remote asset to fetch as a layer\n * @return {Qualifiers.Source.FetchSource}\n */\nfunction fetch(remoteURL) {\n    return new FetchSource(remoteURL);\n}\nconst Source = { image, text, video, subtitles, fetch };\nexport { Source, image, text, video, subtitles, fetch };\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,qCAAqC;AACjE,SAASC,WAAW,QAAQ,qCAAqC;AACjE,SAASC,eAAe,QAAQ,yCAAyC;AACzE,SAASC,WAAW,QAAQ,qCAAqC;AACjE,SAASC,UAAU,QAAQ,oCAAoC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,KAAK,CAACC,QAAQ,EAAE;EACrB,OAAO,IAAIL,WAAW,CAACK,QAAQ,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,IAAI,CAACA,IAAI,EAAEC,SAAS,EAAE;EAC3B,OAAO,IAAIJ,UAAU,CAACG,IAAI,EAAEC,SAAS,CAAC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,KAAK,CAACH,QAAQ,EAAE;EACrB,OAAO,IAAIN,WAAW,CAACM,QAAQ,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,SAAS,CAACC,QAAQ,EAAE;EACzB,OAAO,IAAIT,eAAe,CAACS,QAAQ,CAAC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,KAAK,CAACC,SAAS,EAAE;EACtB,OAAO,IAAIV,WAAW,CAACU,SAAS,CAAC;AACrC;AACA,IAAMC,MAAM,GAAG;EAAET,KAAK,EAALA,KAAK;EAAEE,IAAI,EAAJA,IAAI;EAAEE,KAAK,EAALA,KAAK;EAAEC,SAAS,EAATA,SAAS;EAAEE,KAAK,EAALA;AAAM,CAAC;AACvD,SAASE,MAAM,EAAET,KAAK,EAAEE,IAAI,EAAEE,KAAK,EAAEC,SAAS,EAAEE,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}