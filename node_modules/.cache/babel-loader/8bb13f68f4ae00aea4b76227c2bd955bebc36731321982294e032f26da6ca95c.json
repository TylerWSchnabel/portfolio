{"ast":null,"code":"import _toConsumableArray from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { AutoGravity } from \"../../qualifiers/gravity/autoGravity/AutoGravity.js\";\nimport { FocusOnGravity } from \"../../qualifiers/gravity/focusOnGravity/FocusOnGravity.js\";\nimport { autoGravity } from \"../../qualifiers/gravity.js\";\nimport { FocusOnValue } from \"../../qualifiers/focusOn.js\";\n/**\n * true if gravity starts with 'auto' or 'auto:'\n * @param gravity\n */\nfunction isIAutoGravityString(gravity) {\n  return gravity && \"\".concat(gravity).split(':')[0] === 'auto';\n}\n/**\n * Validate that given val is an ICompassGravity\n * @param gravity\n */\nfunction isCompassGravity(gravity) {\n  //const gravityString = `${(typeof gravity === \"string\" ? gravity : gravity.qualifierValue)}`;\n  var gravityValue = getGravityValue(gravity);\n  return ['north', 'center', 'east', 'west', 'south', 'north_west', 'south_east', 'south_west', 'north_east'].includes(gravityValue);\n}\n/**\n * Get the value of given gravity\n * @param gravity\n */\nfunction getGravityValue(gravity) {\n  return \"\".concat(gravity).replace('g_', '');\n}\n/**\n * Creates a compassGravity model\n * @param gravity\n */\nfunction createCompassGravityModel(gravity) {\n  return {\n    compass: getGravityValue(gravity),\n    gravityType: 'direction'\n  };\n}\n/**\n * Validate that given gravity is an instance of ocr gravity\n * @param gravity\n */\nfunction isOcrGravity(gravity) {\n  return getGravityValue(gravity) === 'ocr_text';\n}\n/**\n * Creates an ocr gravity model\n */\nfunction createOcrGravityModel() {\n  return {\n    gravityType: 'ocr'\n  };\n}\n/**\n * Validate that given gravity is an instance of AutoGravity\n * @param gravity\n */\nfunction isAutoGravity(gravity) {\n  return \"\".concat(gravity.qualifierValue).split(':')[0] === 'auto';\n}\n/**\n * Create an instance of IAutoGravityObjectModel\n * @param gravity\n */\nfunction createIAutoFocusObject(gravity) {\n  var gravityString = gravity.toString();\n  var values = gravityString.split('_');\n  var result = {\n    object: values[0]\n  };\n  if (values.length > 1) {\n    if (values[1] === 'avoid') {\n      result.avoid = true;\n    } else {\n      result.weight = +values[1];\n    }\n  }\n  return result;\n}\n/**\n * Creates an auto gravity model from given AutoGravity\n * @param gravity\n */\nfunction createAutoGravityModel(gravity) {\n  var values;\n  var gravityQualifier = gravity === 'auto' ? new AutoGravity() : gravity;\n  if (\"\".concat(gravity).startsWith('auto:')) {\n    values = \"\".concat(gravity).split(':').filter(function (v) {\n      return v !== 'auto';\n    });\n  } else {\n    values = gravityQualifier.qualifierValue.values.filter(function (v) {\n      return v !== 'auto';\n    });\n  }\n  var autoFocus = values.map(createIAutoFocusObject);\n  return {\n    gravityType: 'auto',\n    autoFocus: autoFocus\n  };\n}\n/**\n * Create IFocusOnGravityModel from FocusOnGravity\n * @param gravity\n */\nfunction createFocusOnGravityModel(gravity) {\n  var hasAutoGravity = \"\".concat(gravity).split(':').includes('auto');\n  var values = gravity.qualifierValue.values;\n  var focusOnValues = hasAutoGravity ? values.slice(0, values.length - 1) : values;\n  var result = {\n    gravityType: 'object',\n    focusOnObjects: focusOnValues.map(function (v) {\n      return \"\".concat(v);\n    })\n  };\n  if (hasAutoGravity) {\n    var _autoGravity;\n    // Remove the first 'auto' value by slicing it, because it's added by autoGravity()\n    var autoFocusObjects = values[values.length - 1].values.slice(1);\n    var autoGravityInstance = (_autoGravity = autoGravity()).autoFocus.apply(_autoGravity, _toConsumableArray(autoFocusObjects));\n    result.fallbackGravity = createAutoGravityModel(autoGravityInstance);\n  }\n  return result;\n}\n/**\n * Creates a FocusOnGravity from given string\n * @param gravity\n */\nfunction createFocusOnGravity(gravity) {\n  var values = gravity.split(':');\n  var focusOnValues = values.map(function (g) {\n    return new FocusOnValue(g);\n  });\n  return new FocusOnGravity(focusOnValues);\n}\n/**\n * Create a model of given gravity\n * @param gravity\n */\nexport function createGravityModel(gravity) {\n  if (isCompassGravity(gravity)) {\n    return createCompassGravityModel(gravity);\n  }\n  if (isOcrGravity(gravity)) {\n    return createOcrGravityModel();\n  }\n  if (isIAutoGravityString(gravity) || isAutoGravity(gravity)) {\n    return createAutoGravityModel(gravity);\n  }\n  return createFocusOnGravityModel(typeof gravity === 'string' ? createFocusOnGravity(gravity) : gravity);\n}","map":{"version":3,"names":["AutoGravity","FocusOnGravity","autoGravity","FocusOnValue","isIAutoGravityString","gravity","split","isCompassGravity","gravityValue","getGravityValue","includes","replace","createCompassGravityModel","compass","gravityType","isOcrGravity","createOcrGravityModel","isAutoGravity","qualifierValue","createIAutoFocusObject","gravityString","toString","values","result","object","length","avoid","weight","createAutoGravityModel","gravityQualifier","startsWith","filter","v","autoFocus","map","createFocusOnGravityModel","hasAutoGravity","focusOnValues","slice","focusOnObjects","autoFocusObjects","autoGravityInstance","fallbackGravity","createFocusOnGravity","g","createGravityModel"],"sources":["/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@cloudinary/transformation-builder-sdk/internal/models/createGravityModel.js"],"sourcesContent":["import { AutoGravity } from \"../../qualifiers/gravity/autoGravity/AutoGravity.js\";\nimport { FocusOnGravity } from \"../../qualifiers/gravity/focusOnGravity/FocusOnGravity.js\";\nimport { autoGravity } from \"../../qualifiers/gravity.js\";\nimport { FocusOnValue } from \"../../qualifiers/focusOn.js\";\n/**\n * true if gravity starts with 'auto' or 'auto:'\n * @param gravity\n */\nfunction isIAutoGravityString(gravity) {\n    return gravity && `${gravity}`.split(':')[0] === 'auto';\n}\n/**\n * Validate that given val is an ICompassGravity\n * @param gravity\n */\nfunction isCompassGravity(gravity) {\n    //const gravityString = `${(typeof gravity === \"string\" ? gravity : gravity.qualifierValue)}`;\n    const gravityValue = getGravityValue(gravity);\n    return ['north', 'center', 'east', 'west', 'south', 'north_west', 'south_east', 'south_west', 'north_east'].includes(gravityValue);\n}\n/**\n * Get the value of given gravity\n * @param gravity\n */\nfunction getGravityValue(gravity) {\n    return `${gravity}`.replace('g_', '');\n}\n/**\n * Creates a compassGravity model\n * @param gravity\n */\nfunction createCompassGravityModel(gravity) {\n    return {\n        compass: getGravityValue(gravity),\n        gravityType: 'direction'\n    };\n}\n/**\n * Validate that given gravity is an instance of ocr gravity\n * @param gravity\n */\nfunction isOcrGravity(gravity) {\n    return getGravityValue(gravity) === 'ocr_text';\n}\n/**\n * Creates an ocr gravity model\n */\nfunction createOcrGravityModel() {\n    return {\n        gravityType: 'ocr'\n    };\n}\n/**\n * Validate that given gravity is an instance of AutoGravity\n * @param gravity\n */\nfunction isAutoGravity(gravity) {\n    return `${gravity.qualifierValue}`.split(':')[0] === 'auto';\n}\n/**\n * Create an instance of IAutoGravityObjectModel\n * @param gravity\n */\nfunction createIAutoFocusObject(gravity) {\n    const gravityString = gravity.toString();\n    const values = gravityString.split('_');\n    const result = {\n        object: values[0]\n    };\n    if (values.length > 1) {\n        if (values[1] === 'avoid') {\n            result.avoid = true;\n        }\n        else {\n            result.weight = +values[1];\n        }\n    }\n    return result;\n}\n/**\n * Creates an auto gravity model from given AutoGravity\n * @param gravity\n */\nfunction createAutoGravityModel(gravity) {\n    let values;\n    const gravityQualifier = gravity === 'auto' ? new AutoGravity() : gravity;\n    if (`${gravity}`.startsWith('auto:')) {\n        values = `${gravity}`.split(':').filter((v) => v !== 'auto');\n    }\n    else {\n        values = gravityQualifier.qualifierValue.values.filter((v) => v !== 'auto');\n    }\n    const autoFocus = values.map(createIAutoFocusObject);\n    return {\n        gravityType: 'auto',\n        autoFocus\n    };\n}\n/**\n * Create IFocusOnGravityModel from FocusOnGravity\n * @param gravity\n */\nfunction createFocusOnGravityModel(gravity) {\n    const hasAutoGravity = `${gravity}`.split(':').includes('auto');\n    const values = gravity.qualifierValue.values;\n    const focusOnValues = hasAutoGravity ? values.slice(0, values.length - 1) : values;\n    const result = {\n        gravityType: 'object',\n        focusOnObjects: focusOnValues.map((v) => `${v}`)\n    };\n    if (hasAutoGravity) {\n        // Remove the first 'auto' value by slicing it, because it's added by autoGravity()\n        const autoFocusObjects = values[values.length - 1].values.slice(1);\n        const autoGravityInstance = autoGravity().autoFocus(...autoFocusObjects);\n        result.fallbackGravity = createAutoGravityModel(autoGravityInstance);\n    }\n    return result;\n}\n/**\n * Creates a FocusOnGravity from given string\n * @param gravity\n */\nfunction createFocusOnGravity(gravity) {\n    const values = gravity.split(':');\n    const focusOnValues = values.map((g) => new FocusOnValue(g));\n    return new FocusOnGravity(focusOnValues);\n}\n/**\n * Create a model of given gravity\n * @param gravity\n */\nexport function createGravityModel(gravity) {\n    if (isCompassGravity(gravity)) {\n        return createCompassGravityModel(gravity);\n    }\n    if (isOcrGravity(gravity)) {\n        return createOcrGravityModel();\n    }\n    if (isIAutoGravityString(gravity) || isAutoGravity(gravity)) {\n        return createAutoGravityModel(gravity);\n    }\n    return createFocusOnGravityModel(typeof gravity === 'string' ? createFocusOnGravity(gravity) : gravity);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}