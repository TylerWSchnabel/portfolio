{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Action } from \"../internal/Action.js\";\nimport { BackgroundColor } from \"../actions/background/actions/BackgroundColor.js\";\nimport { prepareColor } from \"../internal/utils/prepareColor.js\";\nimport { FlagQualifier } from \"../qualifiers/flag/FlagQualifier.js\";\nimport { RawAction } from \"../internal/RawAction.js\";\nimport { isErrorObject } from \"../internal/models/IErrorObject.js\";\nimport { DeliveryFormatAction } from \"../actions/delivery/DeliveryFormatAction.js\";\n/**\n * @summary SDK\n * @description - Defines how to transform an asset\n * @memberOf SDK\n */\nvar Transformation = /*#__PURE__*/function () {\n  function Transformation() {\n    _classCallCheck(this, Transformation);\n    this.actions = [];\n  }\n  /**\n   * @param {SDK.Action | string} action\n   * @return {this}\n   */\n  _createClass(Transformation, [{\n    key: \"addAction\",\n    value: function addAction(action) {\n      var actionToAdd;\n      if (typeof action === 'string') {\n        if (action.indexOf('/') >= 0) {\n          throw 'addAction cannot accept a string with a forward slash in it - /, use .addTransformation() instead';\n        } else {\n          actionToAdd = new RawAction(action);\n        }\n      } else {\n        actionToAdd = action;\n      }\n      this.actions.push(actionToAdd);\n      return this;\n    }\n    /**\n     * @description Allows the injection of a raw transformation as a string into the transformation, or a Transformation instance that was previously created\n     * @param {string | SDK.Transformation} tx\n     * @example\n     * import {Transformation} from \"@cloudinary/url-gen\";\n     *\n     * const transformation = new Transformation();\n     * transformation.addTransformation('w_100/w_200/w_300');\n     * @return {this}\n     */\n  }, {\n    key: \"addTransformation\",\n    value: function addTransformation(tx) {\n      if (tx instanceof Transformation) {\n        // Concat the new actions into the existing actions\n        this.actions = this.actions.concat(tx.actions);\n      } else {\n        this.actions.push(new RawAction(tx));\n      }\n      return this;\n    }\n    /**\n     * @return {string}\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.actions.map(function (action) {\n        return action.toString();\n      }).filter(function (a) {\n        return a;\n      }).join('/');\n    }\n    /**\n     * @description Delivers an animated GIF.\n     * @param {AnimatedAction} animatedAction\n     * @return {this}\n     */\n  }, {\n    key: \"animated\",\n    value: function animated(animatedAction) {\n      return this.addAction(animatedAction);\n    }\n    /**\n     * @description Adds a border around the image.\n     * @param {Border} borderAction\n     * @return {this}\n     */\n  }, {\n    key: \"border\",\n    value: function border(borderAction) {\n      return this.addAction(borderAction);\n    }\n    /**\n     * @description Adjusts the shape of the delivered image. </br>\n     * <b>Learn more:</b> {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#distort|Shape changes and distortion effects}\n     * @param {IReshape} reshapeAction\n     * @return {this}\n     */\n  }, {\n    key: \"reshape\",\n    value: function reshape(reshapeAction) {\n      return this.addAction(reshapeAction);\n    }\n    /**\n     * @description Resize the asset using provided resize action\n     * @param {ResizeSimpleAction} resizeAction\n     * @return {this}\n     */\n  }, {\n    key: \"resize\",\n    value: function resize(resizeAction) {\n      return this.addAction(resizeAction);\n    }\n    /**\n     * @desc An alias to Action Delivery.quality\n     * @param {string|number} quality\n     * @return {this}\n     */\n  }, {\n    key: \"quality\",\n    value: function quality(_quality) {\n      this.addAction(new DeliveryFormatAction('q', _quality));\n      return this;\n    }\n    /**\n     * @desc An alias to Action Delivery.format\n     * @param {string} format\n     * @return {this}\n     */\n  }, {\n    key: \"format\",\n    value: function format(_format) {\n      this.addAction(new DeliveryFormatAction('f', _format));\n      return this;\n    }\n    /**\n     * @description Rounds the specified corners of an image.\n     * @param roundCornersAction\n     * @return {this}\n     */\n  }, {\n    key: \"roundCorners\",\n    value: function roundCorners(roundCornersAction) {\n      return this.addAction(roundCornersAction);\n    }\n    /**\n     * @description Adds an overlay over the base image.\n     * @param {LayerAction} overlayAction\n     * @return {this}\n     */\n  }, {\n    key: \"overlay\",\n    value: function overlay(overlayAction) {\n      return this.addAction(overlayAction);\n    }\n    /**\n     * @description Adds an underlay under the base image.\n     * @param {LayerAction} underlayAction\n     * @return {this}\n     */\n  }, {\n    key: \"underlay\",\n    value: function underlay(underlayAction) {\n      underlayAction.setLayerType('u');\n      return this.addAction(underlayAction);\n    }\n    /**\n     * @description Defines an new user variable.\n     * @param {VariableAction} variableAction\n     * @return {this}\n     */\n  }, {\n    key: \"addVariable\",\n    value: function addVariable(variableAction) {\n      return this.addAction(variableAction);\n    }\n    /**\n     * @description Specifies a condition to be met before applying a transformation.\n     * @param {ConditionalAction} conditionAction\n     * @return {this}\n     */\n  }, {\n    key: \"conditional\",\n    value: function conditional(conditionAction) {\n      return this.addAction(conditionAction);\n    }\n    /**\n     * @description Applies a filter or an effect on an asset.\n     * @param {SimpleEffectAction} effectAction\n     * @return {this}\n     */\n  }, {\n    key: \"effect\",\n    value: function effect(effectAction) {\n      return this.addAction(effectAction);\n    }\n    /**\n     * @description Applies adjustment effect on an asset.\n     * @param action\n     * @return {this}\n     */\n  }, {\n    key: \"adjust\",\n    value: function adjust(action) {\n      return this.addAction(action);\n    }\n    /**\n     * @description Rotates the asset by the given angle.\n     * @param {RotateAction} rotateAction\n     * @return {this}\n     */\n  }, {\n    key: \"rotate\",\n    value: function rotate(rotateAction) {\n      return this.addAction(rotateAction);\n    }\n    /**\n     * @description Applies a pre-defined named transformation of the given name.\n     * @param {NamedTransformation} namedTransformation\n     * @return {this}\n     */\n  }, {\n    key: \"namedTransformation\",\n    value: function namedTransformation(_namedTransformation) {\n      return this.addAction(_namedTransformation);\n    }\n    /**\n     * @description Applies delivery action.\n     * @param deliveryAction\n     * @return {this}\n     */\n  }, {\n    key: \"delivery\",\n    value: function delivery(deliveryAction) {\n      return this.addAction(deliveryAction);\n    }\n    /**\n     * @description Sets the color of the background.\n     * @param {Qualifiers.Color} color\n     * @return {this}\n     */\n  }, {\n    key: \"backgroundColor\",\n    value: function backgroundColor(color) {\n      return this.addAction(new BackgroundColor(prepareColor(color)));\n    }\n    /**\n     * @description Adds a layer in a Photoshop document.\n     * @param action\n     * @return {this}\n     */\n  }, {\n    key: \"psdTools\",\n    value: function psdTools(action) {\n      return this.addAction(action);\n    }\n    /**\n     * @description Extracts an image or a page using an index, a range, or a name from a layered media asset.\n     * @param action\n     * @return {this}\n     */\n  }, {\n    key: \"extract\",\n    value: function extract(action) {\n      return this.addAction(action);\n    }\n    /**\n     * @description Adds a flag as a separate action.\n     * @param {Qualifiers.Flag | string} flagQualifier\n     * @return {this}\n     */\n  }, {\n    key: \"addFlag\",\n    value: function addFlag(flagQualifier) {\n      var action = new Action();\n      var flagToAdd = flagQualifier;\n      if (typeof flagQualifier === 'string') {\n        flagToAdd = new FlagQualifier(flagQualifier);\n      }\n      action.addQualifier(flagToAdd);\n      return this.addAction(action);\n    }\n    /**\n     * @description Inject a custom function into the image transformation pipeline.\n     * @return {this}\n     */\n  }, {\n    key: \"customFunction\",\n    value: function customFunction(_customFunction) {\n      return this.addAction(_customFunction);\n    }\n    /**\n     * Transcodes the video (or audio) to another format.\n     * @param {Action} action\n     * @return {this}\n     */\n  }, {\n    key: \"transcode\",\n    value: function transcode(action) {\n      return this.addAction(action);\n    }\n    /**\n     * Applies the specified video edit action.\n     *\n     * @param {videoEditType} action\n     * @return {this}\n     */\n  }, {\n    key: \"videoEdit\",\n    value: function videoEdit(action) {\n      return this.addAction(action);\n    }\n  }, {\n    key: \"toJson\",\n    value: function toJson() {\n      var actions = [];\n      var _iterator = _createForOfIteratorHelper(this.actions),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var action = _step.value;\n          var json = action.toJson();\n          if (isErrorObject(json)) {\n            // Fail early and return an IErrorObject\n            return json;\n          }\n          actions.push(json);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return {\n        actions: actions\n      };\n    }\n  }]);\n  return Transformation;\n}();\nexport { Transformation };","map":{"version":3,"names":["Action","BackgroundColor","prepareColor","FlagQualifier","RawAction","isErrorObject","DeliveryFormatAction","Transformation","actions","action","actionToAdd","indexOf","push","tx","concat","map","toString","filter","a","join","animatedAction","addAction","borderAction","reshapeAction","resizeAction","quality","format","roundCornersAction","overlayAction","underlayAction","setLayerType","variableAction","conditionAction","effectAction","rotateAction","namedTransformation","deliveryAction","color","flagQualifier","flagToAdd","addQualifier","customFunction","json","toJson"],"sources":["/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@cloudinary/transformation-builder-sdk/transformation/Transformation.js"],"sourcesContent":["import { Action } from \"../internal/Action.js\";\nimport { BackgroundColor } from \"../actions/background/actions/BackgroundColor.js\";\nimport { prepareColor } from \"../internal/utils/prepareColor.js\";\nimport { FlagQualifier } from \"../qualifiers/flag/FlagQualifier.js\";\nimport { RawAction } from \"../internal/RawAction.js\";\nimport { isErrorObject } from \"../internal/models/IErrorObject.js\";\nimport { DeliveryFormatAction } from \"../actions/delivery/DeliveryFormatAction.js\";\n/**\n * @summary SDK\n * @description - Defines how to transform an asset\n * @memberOf SDK\n */\nclass Transformation {\n    constructor() {\n        this.actions = [];\n    }\n    /**\n     * @param {SDK.Action | string} action\n     * @return {this}\n     */\n    addAction(action) {\n        let actionToAdd;\n        if (typeof action === 'string') {\n            if (action.indexOf('/') >= 0) {\n                throw 'addAction cannot accept a string with a forward slash in it - /, use .addTransformation() instead';\n            }\n            else {\n                actionToAdd = new RawAction(action);\n            }\n        }\n        else {\n            actionToAdd = action;\n        }\n        this.actions.push(actionToAdd);\n        return this;\n    }\n    /**\n     * @description Allows the injection of a raw transformation as a string into the transformation, or a Transformation instance that was previously created\n     * @param {string | SDK.Transformation} tx\n     * @example\n     * import {Transformation} from \"@cloudinary/url-gen\";\n     *\n     * const transformation = new Transformation();\n     * transformation.addTransformation('w_100/w_200/w_300');\n     * @return {this}\n     */\n    addTransformation(tx) {\n        if (tx instanceof Transformation) {\n            // Concat the new actions into the existing actions\n            this.actions = this.actions.concat(tx.actions);\n        }\n        else {\n            this.actions.push(new RawAction(tx));\n        }\n        return this;\n    }\n    /**\n     * @return {string}\n     */\n    toString() {\n        return this.actions\n            .map((action) => {\n            return action.toString();\n        })\n            .filter((a) => a)\n            .join('/');\n    }\n    /**\n     * @description Delivers an animated GIF.\n     * @param {AnimatedAction} animatedAction\n     * @return {this}\n     */\n    animated(animatedAction) {\n        return this.addAction(animatedAction);\n    }\n    /**\n     * @description Adds a border around the image.\n     * @param {Border} borderAction\n     * @return {this}\n     */\n    border(borderAction) {\n        return this.addAction(borderAction);\n    }\n    /**\n     * @description Adjusts the shape of the delivered image. </br>\n     * <b>Learn more:</b> {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#distort|Shape changes and distortion effects}\n     * @param {IReshape} reshapeAction\n     * @return {this}\n     */\n    reshape(reshapeAction) {\n        return this.addAction(reshapeAction);\n    }\n    /**\n     * @description Resize the asset using provided resize action\n     * @param {ResizeSimpleAction} resizeAction\n     * @return {this}\n     */\n    resize(resizeAction) {\n        return this.addAction(resizeAction);\n    }\n    /**\n     * @desc An alias to Action Delivery.quality\n     * @param {string|number} quality\n     * @return {this}\n     */\n    quality(quality) {\n        this.addAction(new DeliveryFormatAction('q', quality));\n        return this;\n    }\n    /**\n     * @desc An alias to Action Delivery.format\n     * @param {string} format\n     * @return {this}\n     */\n    format(format) {\n        this.addAction(new DeliveryFormatAction('f', format));\n        return this;\n    }\n    /**\n     * @description Rounds the specified corners of an image.\n     * @param roundCornersAction\n     * @return {this}\n     */\n    roundCorners(roundCornersAction) {\n        return this.addAction(roundCornersAction);\n    }\n    /**\n     * @description Adds an overlay over the base image.\n     * @param {LayerAction} overlayAction\n     * @return {this}\n     */\n    overlay(overlayAction) {\n        return this.addAction(overlayAction);\n    }\n    /**\n     * @description Adds an underlay under the base image.\n     * @param {LayerAction} underlayAction\n     * @return {this}\n     */\n    underlay(underlayAction) {\n        underlayAction.setLayerType('u');\n        return this.addAction(underlayAction);\n    }\n    /**\n     * @description Defines an new user variable.\n     * @param {VariableAction} variableAction\n     * @return {this}\n     */\n    addVariable(variableAction) {\n        return this.addAction(variableAction);\n    }\n    /**\n     * @description Specifies a condition to be met before applying a transformation.\n     * @param {ConditionalAction} conditionAction\n     * @return {this}\n     */\n    conditional(conditionAction) {\n        return this.addAction(conditionAction);\n    }\n    /**\n     * @description Applies a filter or an effect on an asset.\n     * @param {SimpleEffectAction} effectAction\n     * @return {this}\n     */\n    effect(effectAction) {\n        return this.addAction(effectAction);\n    }\n    /**\n     * @description Applies adjustment effect on an asset.\n     * @param action\n     * @return {this}\n     */\n    adjust(action) {\n        return this.addAction(action);\n    }\n    /**\n     * @description Rotates the asset by the given angle.\n     * @param {RotateAction} rotateAction\n     * @return {this}\n     */\n    rotate(rotateAction) {\n        return this.addAction(rotateAction);\n    }\n    /**\n     * @description Applies a pre-defined named transformation of the given name.\n     * @param {NamedTransformation} namedTransformation\n     * @return {this}\n     */\n    namedTransformation(namedTransformation) {\n        return this.addAction(namedTransformation);\n    }\n    /**\n     * @description Applies delivery action.\n     * @param deliveryAction\n     * @return {this}\n     */\n    delivery(deliveryAction) {\n        return this.addAction(deliveryAction);\n    }\n    /**\n     * @description Sets the color of the background.\n     * @param {Qualifiers.Color} color\n     * @return {this}\n     */\n    backgroundColor(color) {\n        return this.addAction(new BackgroundColor(prepareColor(color)));\n    }\n    /**\n     * @description Adds a layer in a Photoshop document.\n     * @param action\n     * @return {this}\n     */\n    psdTools(action) {\n        return this.addAction(action);\n    }\n    /**\n     * @description Extracts an image or a page using an index, a range, or a name from a layered media asset.\n     * @param action\n     * @return {this}\n     */\n    extract(action) {\n        return this.addAction(action);\n    }\n    /**\n     * @description Adds a flag as a separate action.\n     * @param {Qualifiers.Flag | string} flagQualifier\n     * @return {this}\n     */\n    addFlag(flagQualifier) {\n        const action = new Action();\n        let flagToAdd = flagQualifier;\n        if (typeof flagQualifier === 'string') {\n            flagToAdd = new FlagQualifier(flagQualifier);\n        }\n        action.addQualifier(flagToAdd);\n        return this.addAction(action);\n    }\n    /**\n     * @description Inject a custom function into the image transformation pipeline.\n     * @return {this}\n     */\n    customFunction(customFunction) {\n        return this.addAction(customFunction);\n    }\n    /**\n     * Transcodes the video (or audio) to another format.\n     * @param {Action} action\n     * @return {this}\n     */\n    transcode(action) {\n        return this.addAction(action);\n    }\n    /**\n     * Applies the specified video edit action.\n     *\n     * @param {videoEditType} action\n     * @return {this}\n     */\n    videoEdit(action) {\n        return this.addAction(action);\n    }\n    toJson() {\n        const actions = [];\n        for (const action of this.actions) {\n            const json = action.toJson();\n            if (isErrorObject(json)) {\n                // Fail early and return an IErrorObject\n                return json;\n            }\n            actions.push(json);\n        }\n        return { actions };\n    }\n}\nexport { Transformation };\n"],"mappings":";;;AAAA,SAASA,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,eAAe,QAAQ,kDAAkD;AAClF,SAASC,YAAY,QAAQ,mCAAmC;AAChE,SAASC,aAAa,QAAQ,qCAAqC;AACnE,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAASC,aAAa,QAAQ,oCAAoC;AAClE,SAASC,oBAAoB,QAAQ,6CAA6C;AAClF;AACA;AACA;AACA;AACA;AAJA,IAKMC,cAAc;EAChB,0BAAc;IAAA;IACV,IAAI,CAACC,OAAO,GAAG,EAAE;EACrB;EACA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,mBAAUC,MAAM,EAAE;MACd,IAAIC,WAAW;MACf,IAAI,OAAOD,MAAM,KAAK,QAAQ,EAAE;QAC5B,IAAIA,MAAM,CAACE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;UAC1B,MAAM,mGAAmG;QAC7G,CAAC,MACI;UACDD,WAAW,GAAG,IAAIN,SAAS,CAACK,MAAM,CAAC;QACvC;MACJ,CAAC,MACI;QACDC,WAAW,GAAGD,MAAM;MACxB;MACA,IAAI,CAACD,OAAO,CAACI,IAAI,CAACF,WAAW,CAAC;MAC9B,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EATI;IAAA;IAAA,OAUA,2BAAkBG,EAAE,EAAE;MAClB,IAAIA,EAAE,YAAYN,cAAc,EAAE;QAC9B;QACA,IAAI,CAACC,OAAO,GAAG,IAAI,CAACA,OAAO,CAACM,MAAM,CAACD,EAAE,CAACL,OAAO,CAAC;MAClD,CAAC,MACI;QACD,IAAI,CAACA,OAAO,CAACI,IAAI,CAAC,IAAIR,SAAS,CAACS,EAAE,CAAC,CAAC;MACxC;MACA,OAAO,IAAI;IACf;IACA;AACJ;AACA;EAFI;IAAA;IAAA,OAGA,oBAAW;MACP,OAAO,IAAI,CAACL,OAAO,CACdO,GAAG,CAAC,UAACN,MAAM,EAAK;QACjB,OAAOA,MAAM,CAACO,QAAQ,EAAE;MAC5B,CAAC,CAAC,CACGC,MAAM,CAAC,UAACC,CAAC;QAAA,OAAKA,CAAC;MAAA,EAAC,CAChBC,IAAI,CAAC,GAAG,CAAC;IAClB;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,kBAASC,cAAc,EAAE;MACrB,OAAO,IAAI,CAACC,SAAS,CAACD,cAAc,CAAC;IACzC;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,gBAAOE,YAAY,EAAE;MACjB,OAAO,IAAI,CAACD,SAAS,CAACC,YAAY,CAAC;IACvC;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA;IAAA,OAMA,iBAAQC,aAAa,EAAE;MACnB,OAAO,IAAI,CAACF,SAAS,CAACE,aAAa,CAAC;IACxC;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,gBAAOC,YAAY,EAAE;MACjB,OAAO,IAAI,CAACH,SAAS,CAACG,YAAY,CAAC;IACvC;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,iBAAQC,QAAO,EAAE;MACb,IAAI,CAACJ,SAAS,CAAC,IAAIf,oBAAoB,CAAC,GAAG,EAAEmB,QAAO,CAAC,CAAC;MACtD,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,gBAAOC,OAAM,EAAE;MACX,IAAI,CAACL,SAAS,CAAC,IAAIf,oBAAoB,CAAC,GAAG,EAAEoB,OAAM,CAAC,CAAC;MACrD,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,sBAAaC,kBAAkB,EAAE;MAC7B,OAAO,IAAI,CAACN,SAAS,CAACM,kBAAkB,CAAC;IAC7C;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,iBAAQC,aAAa,EAAE;MACnB,OAAO,IAAI,CAACP,SAAS,CAACO,aAAa,CAAC;IACxC;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,kBAASC,cAAc,EAAE;MACrBA,cAAc,CAACC,YAAY,CAAC,GAAG,CAAC;MAChC,OAAO,IAAI,CAACT,SAAS,CAACQ,cAAc,CAAC;IACzC;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,qBAAYE,cAAc,EAAE;MACxB,OAAO,IAAI,CAACV,SAAS,CAACU,cAAc,CAAC;IACzC;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,qBAAYC,eAAe,EAAE;MACzB,OAAO,IAAI,CAACX,SAAS,CAACW,eAAe,CAAC;IAC1C;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,gBAAOC,YAAY,EAAE;MACjB,OAAO,IAAI,CAACZ,SAAS,CAACY,YAAY,CAAC;IACvC;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,gBAAOxB,MAAM,EAAE;MACX,OAAO,IAAI,CAACY,SAAS,CAACZ,MAAM,CAAC;IACjC;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,gBAAOyB,YAAY,EAAE;MACjB,OAAO,IAAI,CAACb,SAAS,CAACa,YAAY,CAAC;IACvC;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,6BAAoBC,oBAAmB,EAAE;MACrC,OAAO,IAAI,CAACd,SAAS,CAACc,oBAAmB,CAAC;IAC9C;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,kBAASC,cAAc,EAAE;MACrB,OAAO,IAAI,CAACf,SAAS,CAACe,cAAc,CAAC;IACzC;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,yBAAgBC,KAAK,EAAE;MACnB,OAAO,IAAI,CAAChB,SAAS,CAAC,IAAIpB,eAAe,CAACC,YAAY,CAACmC,KAAK,CAAC,CAAC,CAAC;IACnE;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,kBAAS5B,MAAM,EAAE;MACb,OAAO,IAAI,CAACY,SAAS,CAACZ,MAAM,CAAC;IACjC;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,iBAAQA,MAAM,EAAE;MACZ,OAAO,IAAI,CAACY,SAAS,CAACZ,MAAM,CAAC;IACjC;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,iBAAQ6B,aAAa,EAAE;MACnB,IAAM7B,MAAM,GAAG,IAAIT,MAAM,EAAE;MAC3B,IAAIuC,SAAS,GAAGD,aAAa;MAC7B,IAAI,OAAOA,aAAa,KAAK,QAAQ,EAAE;QACnCC,SAAS,GAAG,IAAIpC,aAAa,CAACmC,aAAa,CAAC;MAChD;MACA7B,MAAM,CAAC+B,YAAY,CAACD,SAAS,CAAC;MAC9B,OAAO,IAAI,CAAClB,SAAS,CAACZ,MAAM,CAAC;IACjC;IACA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,wBAAegC,eAAc,EAAE;MAC3B,OAAO,IAAI,CAACpB,SAAS,CAACoB,eAAc,CAAC;IACzC;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,mBAAUhC,MAAM,EAAE;MACd,OAAO,IAAI,CAACY,SAAS,CAACZ,MAAM,CAAC;IACjC;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA;IAAA,OAMA,mBAAUA,MAAM,EAAE;MACd,OAAO,IAAI,CAACY,SAAS,CAACZ,MAAM,CAAC;IACjC;EAAC;IAAA;IAAA,OACD,kBAAS;MACL,IAAMD,OAAO,GAAG,EAAE;MAAC,2CACE,IAAI,CAACA,OAAO;QAAA;MAAA;QAAjC,oDAAmC;UAAA,IAAxBC,MAAM;UACb,IAAMiC,IAAI,GAAGjC,MAAM,CAACkC,MAAM,EAAE;UAC5B,IAAItC,aAAa,CAACqC,IAAI,CAAC,EAAE;YACrB;YACA,OAAOA,IAAI;UACf;UACAlC,OAAO,CAACI,IAAI,CAAC8B,IAAI,CAAC;QACtB;MAAC;QAAA;MAAA;QAAA;MAAA;MACD,OAAO;QAAElC,OAAO,EAAPA;MAAQ,CAAC;IACtB;EAAC;EAAA;AAAA;AAEL,SAASD,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}