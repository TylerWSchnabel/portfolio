{"ast":null,"code":"import _classCallCheck from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { tiled as _tiled } from \"../flag.js\";\nimport { noOverflow } from \"../flag.js\";\nimport { createGravityModel } from \"../../internal/models/createGravityModel.js\";\n/**\n * @description\n * Defines the position of a layer: overlay or underlay.</br>\n * Even though Position is technically an action qualifier, it implements exactly the same functionality as an action.</br>\n * This is true because Position is compounded of multiple qualifiers</br>\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/layers|Applying overlays to images} | {@link https://cloudinary.com/documentation/video_layers|Applying overlays to videos}\n *\n * @extends {SDK.Actions}\n */\nvar PositionQualifier = /*#__PURE__*/function (_Action) {\n  _inherits(PositionQualifier, _Action);\n  var _super = _createSuper(PositionQualifier);\n  function PositionQualifier() {\n    var _this;\n    _classCallCheck(this, PositionQualifier);\n    _this = _super.call(this);\n    _this._actionModel = {};\n    return _this;\n  }\n  _createClass(PositionQualifier, [{\n    key: \"gravity\",\n    value: function gravity(gravityQualifier) {\n      this.addQualifier(gravityQualifier);\n      this._actionModel.gravity = createGravityModel(gravityQualifier);\n      return this;\n    }\n    /**\n     * @description Tiles the overlay across your image.\n     * <b>Learn more:</b> {@link https://cloudinary.com/documentation/layers#automatic_tiling|Tiling overlay}\n     */\n  }, {\n    key: \"tiled\",\n    value: function tiled() {\n      this.addFlag(_tiled());\n      this._actionModel.tiled = true;\n      return this;\n    }\n    /**\n     * TODO - This should accept a boolean value\n     * @description Prevents an image or text overlay from extending a delivered image canvas beyond the dimensions of the base image\n     * <b>Learn more:</b> {@link https://cloudinary.com/documentation/transformation_reference#fl_no_overflow|Overflow in overlays}\n     */\n  }, {\n    key: \"allowOverflow\",\n    value: function allowOverflow() {\n      var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (bool === false) {\n        this.addFlag(noOverflow());\n      }\n      this._actionModel.allowOverflow = bool;\n      return this;\n    }\n    /**\n     * @description Set the X Offset\n     * @param {number | string} offsetX\n     * @return {this}\n     */\n  }, {\n    key: \"offsetX\",\n    value: function offsetX(_offsetX) {\n      this.addQualifier(new Qualifier('x', _offsetX));\n      this._actionModel.offsetX = _offsetX;\n      return this;\n    }\n    /**\n     * @description Set the Y Offset\n     * @param {number | string} offsetY\n     * @return {this}\n     */\n  }, {\n    key: \"offsetY\",\n    value: function offsetY(_offsetY) {\n      this.addQualifier(new Qualifier('y', _offsetY));\n      this._actionModel.offsetY = _offsetY;\n      return this;\n    }\n  }]);\n  return PositionQualifier;\n}(Action);\nexport { PositionQualifier };","map":{"version":3,"names":["Action","Qualifier","tiled","noOverflow","createGravityModel","PositionQualifier","_actionModel","gravityQualifier","addQualifier","gravity","addFlag","bool","allowOverflow","offsetX","offsetY"],"sources":["/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@cloudinary/transformation-builder-sdk/qualifiers/position/PositionQualifier.js"],"sourcesContent":["import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { tiled } from \"../flag.js\";\nimport { noOverflow } from \"../flag.js\";\nimport { createGravityModel } from \"../../internal/models/createGravityModel.js\";\n/**\n * @description\n * Defines the position of a layer: overlay or underlay.</br>\n * Even though Position is technically an action qualifier, it implements exactly the same functionality as an action.</br>\n * This is true because Position is compounded of multiple qualifiers</br>\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/layers|Applying overlays to images} | {@link https://cloudinary.com/documentation/video_layers|Applying overlays to videos}\n *\n * @extends {SDK.Actions}\n */\nclass PositionQualifier extends Action {\n    constructor() {\n        super();\n        this._actionModel = {};\n    }\n    gravity(gravityQualifier) {\n        this.addQualifier(gravityQualifier);\n        this._actionModel.gravity = createGravityModel(gravityQualifier);\n        return this;\n    }\n    /**\n     * @description Tiles the overlay across your image.\n     * <b>Learn more:</b> {@link https://cloudinary.com/documentation/layers#automatic_tiling|Tiling overlay}\n     */\n    tiled() {\n        this.addFlag(tiled());\n        this._actionModel.tiled = true;\n        return this;\n    }\n    /**\n     * TODO - This should accept a boolean value\n     * @description Prevents an image or text overlay from extending a delivered image canvas beyond the dimensions of the base image\n     * <b>Learn more:</b> {@link https://cloudinary.com/documentation/transformation_reference#fl_no_overflow|Overflow in overlays}\n     */\n    allowOverflow(bool = true) {\n        if (bool === false) {\n            this.addFlag(noOverflow());\n        }\n        this._actionModel.allowOverflow = bool;\n        return this;\n    }\n    /**\n     * @description Set the X Offset\n     * @param {number | string} offsetX\n     * @return {this}\n     */\n    offsetX(offsetX) {\n        this.addQualifier(new Qualifier('x', offsetX));\n        this._actionModel.offsetX = offsetX;\n        return this;\n    }\n    /**\n     * @description Set the Y Offset\n     * @param {number | string} offsetY\n     * @return {this}\n     */\n    offsetY(offsetY) {\n        this.addQualifier(new Qualifier('y', offsetY));\n        this._actionModel.offsetY = offsetY;\n        return this;\n    }\n}\nexport { PositionQualifier };\n"],"mappings":";;;;AAAA,SAASA,MAAM,QAAQ,0BAA0B;AACjD,SAASC,SAAS,QAAQ,uCAAuC;AACjE,SAASC,KAAK,IAALA,MAAK,QAAQ,YAAY;AAClC,SAASC,UAAU,QAAQ,YAAY;AACvC,SAASC,kBAAkB,QAAQ,6CAA6C;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA,IAUMC,iBAAiB;EAAA;EAAA;EACnB,6BAAc;IAAA;IAAA;IACV;IACA,MAAKC,YAAY,GAAG,CAAC,CAAC;IAAC;EAC3B;EAAC;IAAA;IAAA,OACD,iBAAQC,gBAAgB,EAAE;MACtB,IAAI,CAACC,YAAY,CAACD,gBAAgB,CAAC;MACnC,IAAI,CAACD,YAAY,CAACG,OAAO,GAAGL,kBAAkB,CAACG,gBAAgB,CAAC;MAChE,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,iBAAQ;MACJ,IAAI,CAACG,OAAO,CAACR,MAAK,EAAE,CAAC;MACrB,IAAI,CAACI,YAAY,CAACJ,KAAK,GAAG,IAAI;MAC9B,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,yBAA2B;MAAA,IAAbS,IAAI,uEAAG,IAAI;MACrB,IAAIA,IAAI,KAAK,KAAK,EAAE;QAChB,IAAI,CAACD,OAAO,CAACP,UAAU,EAAE,CAAC;MAC9B;MACA,IAAI,CAACG,YAAY,CAACM,aAAa,GAAGD,IAAI;MACtC,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,iBAAQE,QAAO,EAAE;MACb,IAAI,CAACL,YAAY,CAAC,IAAIP,SAAS,CAAC,GAAG,EAAEY,QAAO,CAAC,CAAC;MAC9C,IAAI,CAACP,YAAY,CAACO,OAAO,GAAGA,QAAO;MACnC,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,iBAAQC,QAAO,EAAE;MACb,IAAI,CAACN,YAAY,CAAC,IAAIP,SAAS,CAAC,GAAG,EAAEa,QAAO,CAAC,CAAC;MAC9C,IAAI,CAACR,YAAY,CAACQ,OAAO,GAAGA,QAAO;MACnC,OAAO,IAAI;IACf;EAAC;EAAA;AAAA,EAlD2Bd,MAAM;AAoDtC,SAASK,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}