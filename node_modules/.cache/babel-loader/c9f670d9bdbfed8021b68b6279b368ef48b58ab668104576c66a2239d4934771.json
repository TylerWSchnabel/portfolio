{"ast":null,"code":"import _classCallCheck from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { LeveledEffectAction } from \"../EffectActions/LeveledEffectAction.js\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../../internal/qualifier/QualifierValue.js\";\nimport { prepareColor } from \"../../../internal/utils/prepareColor.js\";\nimport { ACTION_TYPE_TO_EFFECT_MODE_MAP } from \"../../../internal/internalConstants.js\";\n/**\n * @description Makes the background of the image transparent (or solid white for formats that do not support transparency).\n * @extends LeveledEffectAction\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nvar MakeTransparentEffectAction = /*#__PURE__*/function (_LeveledEffectAction) {\n  _inherits(MakeTransparentEffectAction, _LeveledEffectAction);\n  var _super = _createSuper(MakeTransparentEffectAction);\n  function MakeTransparentEffectAction() {\n    var _this;\n    _classCallCheck(this, MakeTransparentEffectAction);\n    _this = _super.apply(this, arguments);\n    _this._actionModel = {\n      actionType: 'makeTransparent'\n    };\n    return _this;\n  }\n  /**\n   * @description Sets the tolerance used to accommodate variance in the background color.\n   * @param {number | string} value The tolerance used to accommodate variance in the background color. (Range: 0 to 100, Server default: 10)\n   */\n  _createClass(MakeTransparentEffectAction, [{\n    key: \"tolerance\",\n    value: function tolerance(value) {\n      this._actionModel.tolerance = value;\n      var qualifierEffect = this.createEffectQualifier(this.effectType, value);\n      this.addQualifier(qualifierEffect);\n      return this;\n    }\n    /**\n     * @description Sets the color to make transparent.\n     * @param {string} color The HTML name of the color (red, green, etc.) or RGB hex code.\n     * @return {this}\n     */\n  }, {\n    key: \"colorToReplace\",\n    value: function colorToReplace(color) {\n      this._actionModel.color = color;\n      return this.addQualifier(new Qualifier('co', new QualifierValue(prepareColor(color))));\n    }\n  }], [{\n    key: \"fromJson\",\n    value: function fromJson(actionModel) {\n      var actionType = actionModel.actionType,\n        tolerance = actionModel.tolerance,\n        color = actionModel.color;\n      // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n      // This allows the inheriting classes to determine the class to be created\n      var result = new this(ACTION_TYPE_TO_EFFECT_MODE_MAP[actionType], tolerance);\n      tolerance && result.tolerance(tolerance);\n      color && result.colorToReplace(color);\n      return result;\n    }\n  }]);\n  return MakeTransparentEffectAction;\n}(LeveledEffectAction);\nexport { MakeTransparentEffectAction };","map":{"version":3,"names":["LeveledEffectAction","Qualifier","QualifierValue","prepareColor","ACTION_TYPE_TO_EFFECT_MODE_MAP","MakeTransparentEffectAction","arguments","_actionModel","actionType","value","tolerance","qualifierEffect","createEffectQualifier","effectType","addQualifier","color","actionModel","result","colorToReplace"],"sources":["/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@cloudinary/transformation-builder-sdk/actions/effect/leveled/MakeTransparent.js"],"sourcesContent":["import { LeveledEffectAction } from \"../EffectActions/LeveledEffectAction.js\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../../internal/qualifier/QualifierValue.js\";\nimport { prepareColor } from \"../../../internal/utils/prepareColor.js\";\nimport { ACTION_TYPE_TO_EFFECT_MODE_MAP } from \"../../../internal/internalConstants.js\";\n/**\n * @description Makes the background of the image transparent (or solid white for formats that do not support transparency).\n * @extends LeveledEffectAction\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass MakeTransparentEffectAction extends LeveledEffectAction {\n    constructor() {\n        super(...arguments);\n        this._actionModel = { actionType: 'makeTransparent' };\n    }\n    /**\n     * @description Sets the tolerance used to accommodate variance in the background color.\n     * @param {number | string} value The tolerance used to accommodate variance in the background color. (Range: 0 to 100, Server default: 10)\n     */\n    tolerance(value) {\n        this._actionModel.tolerance = value;\n        const qualifierEffect = this.createEffectQualifier(this.effectType, value);\n        this.addQualifier(qualifierEffect);\n        return this;\n    }\n    /**\n     * @description Sets the color to make transparent.\n     * @param {string} color The HTML name of the color (red, green, etc.) or RGB hex code.\n     * @return {this}\n     */\n    colorToReplace(color) {\n        this._actionModel.color = color;\n        return this.addQualifier(new Qualifier('co', new QualifierValue(prepareColor(color))));\n    }\n    static fromJson(actionModel) {\n        const { actionType, tolerance, color } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(ACTION_TYPE_TO_EFFECT_MODE_MAP[actionType], tolerance);\n        tolerance && result.tolerance(tolerance);\n        color && result.colorToReplace(color);\n        return result;\n    }\n}\nexport { MakeTransparentEffectAction };\n"],"mappings":";;;;AAAA,SAASA,mBAAmB,QAAQ,yCAAyC;AAC7E,SAASC,SAAS,QAAQ,0CAA0C;AACpE,SAASC,cAAc,QAAQ,+CAA+C;AAC9E,SAASC,YAAY,QAAQ,yCAAyC;AACtE,SAASC,8BAA8B,QAAQ,wCAAwC;AACvF;AACA;AACA;AACA;AACA;AACA;AALA,IAMMC,2BAA2B;EAAA;EAAA;EAC7B,uCAAc;IAAA;IAAA;IACV,2BAASC,SAAS;IAClB,MAAKC,YAAY,GAAG;MAAEC,UAAU,EAAE;IAAkB,CAAC;IAAC;EAC1D;EACA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,mBAAUC,KAAK,EAAE;MACb,IAAI,CAACF,YAAY,CAACG,SAAS,GAAGD,KAAK;MACnC,IAAME,eAAe,GAAG,IAAI,CAACC,qBAAqB,CAAC,IAAI,CAACC,UAAU,EAAEJ,KAAK,CAAC;MAC1E,IAAI,CAACK,YAAY,CAACH,eAAe,CAAC;MAClC,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,wBAAeI,KAAK,EAAE;MAClB,IAAI,CAACR,YAAY,CAACQ,KAAK,GAAGA,KAAK;MAC/B,OAAO,IAAI,CAACD,YAAY,CAAC,IAAIb,SAAS,CAAC,IAAI,EAAE,IAAIC,cAAc,CAACC,YAAY,CAACY,KAAK,CAAC,CAAC,CAAC,CAAC;IAC1F;EAAC;IAAA;IAAA,OACD,kBAAgBC,WAAW,EAAE;MACzB,IAAQR,UAAU,GAAuBQ,WAAW,CAA5CR,UAAU;QAAEE,SAAS,GAAYM,WAAW,CAAhCN,SAAS;QAAEK,KAAK,GAAKC,WAAW,CAArBD,KAAK;MACpC;MACA;MACA,IAAME,MAAM,GAAG,IAAI,IAAI,CAACb,8BAA8B,CAACI,UAAU,CAAC,EAAEE,SAAS,CAAC;MAC9EA,SAAS,IAAIO,MAAM,CAACP,SAAS,CAACA,SAAS,CAAC;MACxCK,KAAK,IAAIE,MAAM,CAACC,cAAc,CAACH,KAAK,CAAC;MACrC,OAAOE,MAAM;IACjB;EAAC;EAAA;AAAA,EAhCqCjB,mBAAmB;AAkC7D,SAASK,2BAA2B"},"metadata":{},"sourceType":"module","externalDependencies":[]}