{"ast":null,"code":"import _classCallCheck from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { BaseSource } from \"../BaseSource.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate a video layer, is an instance of a {@link VideoTransformation|VideoTransformation}\n * <div class=\"panel panel-primary\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}\n *   </ul>\n * </div>\n */\nvar VideoSource = /*#__PURE__*/function (_BaseSource) {\n  _inherits(VideoSource, _BaseSource);\n  var _super = _createSuper(VideoSource);\n  function VideoSource(publicID) {\n    var _this;\n    _classCallCheck(this, VideoSource);\n    _this = _super.call(this);\n    _this._publicID = publicID;\n    _this._qualifierModel = {\n      publicId: publicID,\n      sourceType: 'video'\n    };\n    return _this;\n  }\n  /**\n   * @description\n   * Returns the opening string of the layer,\n   * This method is used internally within {@link SDK.LayerAction|LayerAction}\n   * @returns {string}\n   */\n  _createClass(VideoSource, [{\n    key: \"getOpenSourceString\",\n    value: function getOpenSourceString(layerType) {\n      var encodedPublicID = this.encodeAssetPublicID(this._publicID);\n      return \"\".concat(layerType, \"_video:\").concat(encodedPublicID);\n    }\n  }], [{\n    key: \"fromJson\",\n    value: function fromJson(qualifierModel, transformationFromJson) {\n      var publicId = qualifierModel.publicId,\n        transformation = qualifierModel.transformation;\n      // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\n      // This allows the inheriting classes to determine the class to be created\n      // @ts-ignore\n      var result = new this(publicId);\n      if (transformation) {\n        result.transformation(transformationFromJson(transformation));\n      }\n      return result;\n    }\n  }]);\n  return VideoSource;\n}(BaseSource);\nexport { VideoSource };","map":{"version":3,"names":["BaseSource","VideoSource","publicID","_publicID","_qualifierModel","publicId","sourceType","layerType","encodedPublicID","encodeAssetPublicID","qualifierModel","transformationFromJson","transformation","result"],"sources":["/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/VideoSource.js"],"sourcesContent":["import { BaseSource } from \"../BaseSource.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate a video layer, is an instance of a {@link VideoTransformation|VideoTransformation}\n * <div class=\"panel panel-primary\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}\n *   </ul>\n * </div>\n */\nclass VideoSource extends BaseSource {\n    constructor(publicID) {\n        super();\n        this._publicID = publicID;\n        this._qualifierModel = {\n            publicId: publicID,\n            sourceType: 'video'\n        };\n    }\n    /**\n     * @description\n     * Returns the opening string of the layer,\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\n     * @returns {string}\n     */\n    getOpenSourceString(layerType) {\n        const encodedPublicID = this.encodeAssetPublicID(this._publicID);\n        return `${layerType}_video:${encodedPublicID}`;\n    }\n    static fromJson(qualifierModel, transformationFromJson) {\n        const { publicId, transformation } = qualifierModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\n        // This allows the inheriting classes to determine the class to be created\n        // @ts-ignore\n        const result = new this(publicId);\n        if (transformation) {\n            result.transformation(transformationFromJson(transformation));\n        }\n        return result;\n    }\n}\nexport { VideoSource };\n"],"mappings":";;;;AAAA,SAASA,UAAU,QAAQ,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA,IAgBMC,WAAW;EAAA;EAAA;EACb,qBAAYC,QAAQ,EAAE;IAAA;IAAA;IAClB;IACA,MAAKC,SAAS,GAAGD,QAAQ;IACzB,MAAKE,eAAe,GAAG;MACnBC,QAAQ,EAAEH,QAAQ;MAClBI,UAAU,EAAE;IAChB,CAAC;IAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA;IAAA,OAMA,6BAAoBC,SAAS,EAAE;MAC3B,IAAMC,eAAe,GAAG,IAAI,CAACC,mBAAmB,CAAC,IAAI,CAACN,SAAS,CAAC;MAChE,iBAAUI,SAAS,oBAAUC,eAAe;IAChD;EAAC;IAAA;IAAA,OACD,kBAAgBE,cAAc,EAAEC,sBAAsB,EAAE;MACpD,IAAQN,QAAQ,GAAqBK,cAAc,CAA3CL,QAAQ;QAAEO,cAAc,GAAKF,cAAc,CAAjCE,cAAc;MAChC;MACA;MACA;MACA,IAAMC,MAAM,GAAG,IAAI,IAAI,CAACR,QAAQ,CAAC;MACjC,IAAIO,cAAc,EAAE;QAChBC,MAAM,CAACD,cAAc,CAACD,sBAAsB,CAACC,cAAc,CAAC,CAAC;MACjE;MACA,OAAOC,MAAM;IACjB;EAAC;EAAA;AAAA,EA7BqBb,UAAU;AA+BpC,SAASC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}