{"ast":null,"code":"import _slicedToArray from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _get from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport Condition from './condition.js';\nimport { CONFIG_PARAMS } from './configuration.js';\nimport { cloneDeep } from '../internal/utils/cloneDeep.js';\nimport { camelCase, contains, difference } from \"./utils/legacyBaseUtil.js\";\nimport { snakeCase } from \"./utils/snakeCase.js\";\nimport Expression from './expression.js';\nimport Layer from './legacyLayer/layer.js';\nimport TextLayer from './legacyLayer/textlayer.js';\nimport SubtitlesLayer from './legacyLayer/subtitleslayer.js';\nimport FetchLayer from './legacyLayer/fetchlayer.js';\nimport { isObject } from \"./utils/isObject.js\";\nimport { isString } from \"../internal/utils/dataStructureUtils.js\";\nimport { isEmpty } from \"./utils/isEmpty.js\";\nimport { isFunction } from \"./utils/isFunction.js\";\nimport { identity, withCamelCaseKeys } from \"./utils/legacyBaseUtil.js\";\n/**\n * A list of keys used by the url() function.\n * @private\n */\nexport var URL_KEYS = ['accessibility', 'api_secret', 'auth_token', 'cdn_subdomain', 'cloud_name', 'cname', 'format', 'placeholder', 'private_cdn', 'resource_type', 'secure', 'secure_cdn_subdomain', 'secure_distribution', 'shorten', 'sign_url', 'signature', 'ssl_detected', 'type', 'url_suffix', 'use_root_path', 'version'];\n/**\n * Assign key, value to target, when value is not null.<br>\n *   This function mutates the target!\n * @param {object} target the object to assign the values to\n * @param {object} sources one or more objects to get values from\n * @returns {object} the target after the assignment\n */\nfunction assignNotNull(target) {\n  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n  sources.forEach(function (source) {\n    Object.keys(source).forEach(function (key) {\n      // @ts-ignore\n      if (source[key] != null) {\n        // @ts-ignore\n        target[key] = source[key];\n      }\n    });\n  });\n  return target;\n}\n/**\n * Return true if all items in list are strings\n * @function Util.allString\n * @param {Array} list - an array of items\n */\nvar allStrings = function allStrings(list) {\n  return list.length && list.every(isString);\n};\n/**\n * Transformation parameters\n * Depends on 'util', 'transformation'\n */\nvar Param = /*#__PURE__*/function () {\n  /**\n   * Represents a single parameter.\n   * @class Param\n   * @param {string} name - The name of the parameter in snake_case\n   * @param {string} shortName - The name of the serialized form of the parameter.\n   *                         If a value is not provided, the parameter will not be serialized.\n   * @param {function} [process=Util.identity ] - Manipulate origValue when value is called\n   * @ignore\n   */\n  function Param(name, shortName) {\n    var process = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : identity;\n    _classCallCheck(this, Param);\n    /**\n     * The name of the parameter in snake_case\n     * @member {string} Param#name\n     */\n    this.name = name;\n    /**\n     * The name of the serialized form of the parameter\n     * @member {string} Param#shortName\n     */\n    this.shortName = shortName;\n    /**\n     * Manipulate origValue when value is called\n     * @member {function} Param#process\n     */\n    this.process = process;\n  }\n  /**\n   * Set a (unprocessed) value for this parameter\n   * @function Param#set\n   * @param {*} origValue - the value of the parameter\n   * @return {Param} self for chaining\n   */\n  _createClass(Param, [{\n    key: \"set\",\n    value: function set(origValue) {\n      this.origValue = origValue;\n      return this;\n    }\n    /**\n     * Generate the serialized form of the parameter\n     * @function Param#serialize\n     * @return {string} the serialized form of the parameter\n     */\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var val, valid;\n      val = this.value();\n      valid = Array.isArray(val) || isObject(val) || isString(val) ? !isEmpty(val) : val != null;\n      if (this.shortName != null && valid) {\n        return \"\".concat(this.shortName, \"_\").concat(val);\n      } else {\n        return '';\n      }\n    }\n    /**\n     * Return the processed value of the parameter\n     * @function Param#value\n     */\n  }, {\n    key: \"value\",\n    value: function value() {\n      return this.process(this.origValue);\n    }\n  }], [{\n    key: \"norm_color\",\n    value: function norm_color(value) {\n      return value != null ? value.replace(/^#/, 'rgb:') : void 0;\n    }\n  }, {\n    key: \"build_array\",\n    value: function build_array(arg) {\n      if (arg == null) {\n        return [];\n      } else if (Array.isArray(arg)) {\n        return arg;\n      } else {\n        return [arg];\n      }\n    }\n    /**\n     * Covert value to video codec string.\n     *\n     * If the parameter is an object,\n     * @param {(string|Object)} param - the video codec as either a String or a Hash\n     * @return {string} the video codec string in the format codec:profile:level\n     * @example\n     * vc_[ :profile : [level]]\n     * or\n     { codec: 'h264', profile: 'basic', level: '3.1' }\n     * @ignore\n     */\n  }, {\n    key: \"process_video_params\",\n    value: function process_video_params(param) {\n      var video;\n      switch (param.constructor) {\n        case Object:\n          video = \"\";\n          if ('codec' in param) {\n            video = param.codec;\n            if ('profile' in param) {\n              video += \":\" + param.profile;\n              if ('level' in param) {\n                video += \":\" + param.level;\n              }\n            }\n          }\n          return video;\n        case String:\n          return param;\n        default:\n          return null;\n      }\n    }\n  }]);\n  return Param;\n}();\nvar ArrayParam = /*#__PURE__*/function (_Param) {\n  _inherits(ArrayParam, _Param);\n  var _super = _createSuper(ArrayParam);\n  /**\n   * A parameter that represents an array.\n   * @param {string} name - The name of the parameter in snake_case.\n   * @param {string} shortName - The name of the serialized form of the parameter\n   *                         If a value is not provided, the parameter will not be serialized.\n   * @param {string} [sep='.'] - The separator to use when joining the array elements together\n   * @param {function} [process=Util.identity ] - Manipulate origValue when value is called\n   * @class ArrayParam\n   * @extends Param\n   * @ignore\n   */\n  function ArrayParam(name, shortName) {\n    var _this;\n    var sep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '.';\n    var process = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;\n    _classCallCheck(this, ArrayParam);\n    _this = _super.call(this, name, shortName, process);\n    _this.sep = sep;\n    return _this;\n  }\n  _createClass(ArrayParam, [{\n    key: \"serialize\",\n    value: function serialize() {\n      if (this.shortName != null) {\n        var arrayValue = this.value();\n        if (isEmpty(arrayValue)) {\n          return '';\n        } else if (isString(arrayValue)) {\n          return \"\".concat(this.shortName, \"_\").concat(arrayValue);\n        } else {\n          var flat = arrayValue.map(function (t) {\n            return isFunction(t.serialize) ? t.serialize() : t;\n          }).join(this.sep);\n          return \"\".concat(this.shortName, \"_\").concat(flat);\n        }\n      } else {\n        return '';\n      }\n    }\n  }, {\n    key: \"value\",\n    value: function value() {\n      var _this2 = this;\n      if (Array.isArray(this.origValue)) {\n        return this.origValue.map(function (v) {\n          return _this2.process(v);\n        });\n      } else {\n        return this.process(this.origValue);\n      }\n    }\n  }, {\n    key: \"set\",\n    value: function set(origValue) {\n      if (origValue == null || Array.isArray(origValue)) {\n        return _get(_getPrototypeOf(ArrayParam.prototype), \"set\", this).call(this, origValue);\n      } else {\n        return _get(_getPrototypeOf(ArrayParam.prototype), \"set\", this).call(this, [origValue]);\n      }\n    }\n  }]);\n  return ArrayParam;\n}(Param);\nvar TransformationParam = /*#__PURE__*/function (_Param2) {\n  _inherits(TransformationParam, _Param2);\n  var _super2 = _createSuper(TransformationParam);\n  /**\n   * A parameter that represents a transformation\n   * @param {string} name - The name of the parameter in snake_case\n   * @param {string} [shortName='t'] - The name of the serialized form of the parameter\n   * @param {string} [sep='.'] - The separator to use when joining the array elements together\n   * @param {function} [process=Util.identity ] - Manipulate origValue when value is called\n   * @class TransformationParam\n   * @extends Param\n   * @ignore\n   */\n  function TransformationParam(name) {\n    var _this3;\n    var shortName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"t\";\n    var sep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '.';\n    var process = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;\n    _classCallCheck(this, TransformationParam);\n    _this3 = _super2.call(this, name, shortName, process);\n    _this3.sep = sep;\n    return _this3;\n  }\n  /**\n   * Generate string representations of the transformation.\n   * @returns {*} Returns either the transformation as a string, or an array of string representations.\n   */\n  _createClass(TransformationParam, [{\n    key: \"serialize\",\n    value: function serialize() {\n      var _this4 = this;\n      var result = '';\n      var val = this.value();\n      if (isEmpty(val)) {\n        return result;\n      }\n      // val is an array of strings so join them\n      if (allStrings(val)) {\n        var joined = val.join(this.sep); // creates t1.t2.t3 in case multiple named transformations were configured\n        if (!isEmpty(joined)) {\n          // in case options.transformation was not set with an empty string (val != ['']);\n          result = \"\".concat(this.shortName, \"_\").concat(joined);\n        }\n      } else {\n        // Convert val to an array of strings\n        result = val.map(function (t) {\n          if (isString(t) && !isEmpty(t)) {\n            return \"\".concat(_this4.shortName, \"_\").concat(t);\n          }\n          if (isFunction(t.serialize)) {\n            return t.serialize();\n          }\n          if (isObject(t) && !isEmpty(t)) {\n            return new Transformation(t).serialize();\n          }\n          return undefined;\n        }).filter(function (t) {\n          return t;\n        });\n      }\n      return result;\n    }\n  }, {\n    key: \"set\",\n    value: function set(origValue1) {\n      this.origValue = origValue1;\n      if (Array.isArray(this.origValue)) {\n        return _get(_getPrototypeOf(TransformationParam.prototype), \"set\", this).call(this, this.origValue);\n      } else {\n        return _get(_getPrototypeOf(TransformationParam.prototype), \"set\", this).call(this, [this.origValue]);\n      }\n    }\n  }]);\n  return TransformationParam;\n}(Param);\nvar number_pattern = \"([0-9]*)\\\\.([0-9]+)|([0-9]+)\";\nvar offset_any_pattern = \"(\" + number_pattern + \")([%pP])?\";\nvar RangeParam = /*#__PURE__*/function (_Param3) {\n  _inherits(RangeParam, _Param3);\n  var _super3 = _createSuper(RangeParam);\n  /**\n   * A parameter that represents a range\n   * @param {string} name - The name of the parameter in snake_case\n   * @param {string} shortName - The name of the serialized form of the parameter\n   *                         If a value is not provided, the parameter will not be serialized.\n   * @param {function} [process=norm_range_value ] - Manipulate origValue when value is called\n   * @class RangeParam\n   * @extends Param\n   * @ignore\n   */\n  function RangeParam(name, shortName) {\n    var process = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : RangeParam.norm_range_value;\n    _classCallCheck(this, RangeParam);\n    return _super3.call(this, name, shortName, process);\n  }\n  _createClass(RangeParam, null, [{\n    key: \"norm_range_value\",\n    value: function norm_range_value(value) {\n      var offset = String(value).match(new RegExp('^' + offset_any_pattern + '$'));\n      if (offset) {\n        var modifier = offset[5] != null ? 'p' : '';\n        value = (offset[1] || offset[4]) + modifier;\n      }\n      return value;\n    }\n  }]);\n  return RangeParam;\n}(Param);\nvar RawParam = /*#__PURE__*/function (_Param4) {\n  _inherits(RawParam, _Param4);\n  var _super4 = _createSuper(RawParam);\n  function RawParam(name, shortName) {\n    var process = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : identity;\n    _classCallCheck(this, RawParam);\n    return _super4.call(this, name, shortName, process);\n  }\n  _createClass(RawParam, [{\n    key: \"serialize\",\n    value: function serialize() {\n      return this.value();\n    }\n  }]);\n  return RawParam;\n}(Param);\nvar LayerParam = /*#__PURE__*/function (_Param5) {\n  _inherits(LayerParam, _Param5);\n  var _super5 = _createSuper(LayerParam);\n  function LayerParam() {\n    _classCallCheck(this, LayerParam);\n    return _super5.apply(this, arguments);\n  }\n  _createClass(LayerParam, [{\n    key: \"value\",\n    value:\n    // Parse layer options\n    // @return [string] layer transformation string\n    // @private\n    function value() {\n      if (this.origValue == null) {\n        return '';\n      }\n      var result;\n      if (this.origValue instanceof Layer) {\n        result = this.origValue;\n      } else if (isObject(this.origValue)) {\n        var layerOptions = withCamelCaseKeys(this.origValue);\n        // @ts-ignore\n        if (layerOptions.resourceType === \"text\" || layerOptions.text != null) {\n          result = new TextLayer(layerOptions);\n        } else {\n          // @ts-ignore\n          if (layerOptions.resourceType === \"subtitles\") {\n            result = new SubtitlesLayer(layerOptions);\n          } else {\n            // @ts-ignore\n            if (layerOptions.resourceType === \"fetch\" || layerOptions.url != null) {\n              result = new FetchLayer(layerOptions);\n            } else {\n              result = new Layer(layerOptions);\n            }\n          }\n        }\n      } else if (isString(this.origValue)) {\n        if (/^fetch:.+/.test(this.origValue)) {\n          result = new FetchLayer(this.origValue.substr(6));\n        } else {\n          result = this.origValue;\n        }\n      } else {\n        result = '';\n      }\n      return result.toString();\n    }\n  }], [{\n    key: \"textStyle\",\n    value: function textStyle(layer) {\n      return new TextLayer(layer).textStyleIdentifier();\n    }\n  }]);\n  return LayerParam;\n}(Param);\n/**\n * TransformationBase\n * Depends on 'configuration', 'parameters','util'\n * @internal\n */\nvar TransformationBase = /*#__PURE__*/function () {\n  /**\n   * The base class for transformations.\n   * Members of this class are documented as belonging to the {@link Transformation} class for convenience.\n   * @class TransformationBase\n   */\n  function TransformationBase(options) {\n    var _this5 = this;\n    _classCallCheck(this, TransformationBase);\n    /** @private */\n    /** @private */\n    var parent;\n    var trans;\n    parent = void 0;\n    trans = {};\n    /**\n     * Return an options object that can be used to create an identical Transformation\n     * @function Transformation#toOptions\n     * @return {Object} Returns a plain object representing this transformation\n     */\n    this.toOptions = function (withChain) {\n      var opt = {};\n      if (withChain == null) {\n        withChain = true;\n      }\n      // @ts-ignore\n      Object.keys(trans).forEach(function (key) {\n        return opt[key] = trans[key].origValue;\n      });\n      assignNotNull(opt, _this5.otherOptions);\n      if (withChain && !isEmpty(_this5.chained)) {\n        var list = _this5.chained.map(function (tr) {\n          return tr.toOptions();\n        });\n        list.push(opt);\n        opt = {};\n        assignNotNull(opt, _this5.otherOptions);\n        // @ts-ignore\n        opt.transformation = list;\n      }\n      return opt;\n    };\n    /**\n     * Set a parent for this object for chaining purposes.\n     *\n     * @function Transformation#setParent\n     * @param {Object} object - the parent to be assigned to\n     * @returns {Transformation} Returns this instance for chaining purposes.\n     */\n    this.setParent = function (object) {\n      parent = object;\n      if (object != null) {\n        // @ts-ignore\n        _this5.fromOptions(typeof object.toOptions === \"function\" ? object.toOptions() : void 0);\n      }\n      return _this5;\n    };\n    /**\n     * Returns the parent of this object in the chain\n     * @function Transformation#getParent\n     * @protected\n     * @return {Object} Returns the parent of this object if there is any\n     */\n    this.getParent = function () {\n      return parent;\n    };\n    // Helper methods to create parameter methods\n    // These methods are defined here because they access `trans` which is\n    // a private member of `TransformationBase`\n    /** @protected */\n    this.param = function (value, name, abbr, defaultValue, process) {\n      if (process == null) {\n        if (isFunction(defaultValue)) {\n          process = defaultValue;\n        } else {\n          process = identity;\n        }\n      }\n      // @ts-ignore\n      trans[name] = new Param(name, abbr, process).set(value);\n      return _this5;\n    };\n    /** @protected */\n    this.rawParam = function (value, name, abbr, defaultValue, process) {\n      process = lastArgCallback(arguments);\n      // @ts-ignore\n      trans[name] = new RawParam(name, abbr, process).set(value);\n      return this;\n    };\n    /** @protected */\n    this.rangeParam = function (value, name, abbr, defaultValue, process) {\n      process = lastArgCallback(arguments);\n      // @ts-ignore\n      trans[name] = new RangeParam(name, abbr, process).set(value);\n      return this;\n    };\n    /** @protected */\n    this.arrayParam = function (value, name, abbr) {\n      var sep = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \":\";\n      var defaultValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n      var process = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;\n      process = lastArgCallback(arguments);\n      // @ts-ignore\n      trans[name] = new ArrayParam(name, abbr, sep, process).set(value);\n      return this;\n    };\n    /** @protected */\n    this.transformationParam = function (value, name, abbr) {\n      var sep = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \".\";\n      var defaultValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;\n      var process = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;\n      process = lastArgCallback(arguments);\n      // @ts-ignore\n      trans[name] = new TransformationParam(name, abbr, sep, process).set(value);\n      return this;\n    };\n    this.layerParam = function (value, name, abbr) {\n      // @ts-ignore\n      trans[name] = new LayerParam(name, abbr).set(value);\n      return this;\n    };\n    // End Helper methods\n    /**\n     * Get the value associated with the given name.\n     * Get the value associated with the given name.\n     * @function Transformation#getValue\n     * @param {string} name - the name of the parameter\n     * @return {*} the processed value associated with the given name\n     * @description Use {@link get}.origValue for the value originally provided for the parameter\n     */\n    this.getValue = function (name) {\n      // @ts-ignore\n      var value = trans[name] && trans[name].value();\n      return value != null ? value : this.otherOptions[name];\n    };\n    /**\n     * Get the parameter object for the given parameter name\n     * @function Transformation#get\n     * @param {string} name the name of the transformation parameter\n     * @returns {Param} the param object for the given name, or undefined\n     */\n    this.get = function (name) {\n      // @ts-ignore\n      return trans[name];\n    };\n    /**\n     * Remove a transformation option from the transformation.\n     * @function Transformation#remove\n     * @param {string} name - the name of the option to remove\n     * @return {*} Returns the option that was removed or null if no option by that name was found. The type of the\n     *              returned value depends on the value.\n     */\n    this.remove = function (name) {\n      var temp;\n      switch (false) {\n        // @ts-ignore\n        case trans[name] == null:\n          // @ts-ignore\n          temp = trans[name];\n          // @ts-ignore\n          delete trans[name];\n          return temp.origValue;\n        case this.otherOptions[name] == null:\n          temp = this.otherOptions[name];\n          delete this.otherOptions[name];\n          return temp;\n        default:\n          return null;\n      }\n    };\n    /**\n     * Return an array of all the keys (option names) in the transformation.\n     * @return {Array<string>} the keys in snakeCase format\n     */\n    this.keys = function () {\n      var key;\n      return function () {\n        var results;\n        results = [];\n        for (key in trans) {\n          if (key != null) {\n            results.push(key.match(VAR_NAME_RE) ? key : snakeCase(key));\n          }\n        }\n        return results;\n      }().sort();\n    };\n    /**\n     * Returns a plain object representation of the transformation. Values are processed.\n     * @function Transformation#toPlainObject\n     * @return {Object} the transformation options as plain object\n     */\n    this.toPlainObject = function () {\n      var hash, key, list;\n      hash = {};\n      for (key in trans) {\n        // @ts-ignore\n        hash[key] = trans[key].value();\n        // @ts-ignore\n        if (isObject(hash[key])) {\n          // @ts-ignore\n          hash[key] = cloneDeep(hash[key]);\n        }\n      }\n      if (!isEmpty(this.chained)) {\n        list = this.chained.map(function (tr) {\n          return tr.toPlainObject();\n        });\n        list.push(hash);\n        hash = {\n          transformation: list\n        };\n      }\n      return hash;\n    };\n    /**\n     * Complete the current transformation and chain to a new one.\n     * In the URL, transformations are chained together by slashes.\n     * @function Transformation#chain\n     * @return {Transformation} Returns this transformation for chaining\n     * @example\n     * var tr = cloudinary.Transformation.new();\n     * tr.width(10).crop('fit').chain().angle(15).serialize()\n     * // produces \"c_fit,w_10/a_15\"\n     */\n    this.chain = function () {\n      var names, tr;\n      names = Object.getOwnPropertyNames(trans);\n      if (names.length !== 0) {\n        tr = new this.constructor(this.toOptions(false));\n        this.resetTransformations();\n        this.chained.push(tr);\n      }\n      return this;\n    };\n    this.resetTransformations = function () {\n      trans = {};\n      return this;\n    };\n    this.otherOptions = {};\n    this.chained = [];\n    this.fromOptions(options);\n  }\n  /**\n   * Merge the provided options with own's options\n   * @param {Object} [options={}] key-value list of options\n   * @returns {Transformation} Returns this instance for chaining\n   */\n  _createClass(TransformationBase, [{\n    key: \"fromOptions\",\n    value: function fromOptions() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (options instanceof TransformationBase) {\n        this.fromTransformation(options);\n      } else {\n        if (isString(options) || Array.isArray(options)) {\n          options = {\n            transformation: options\n          };\n        }\n        options = cloneDeep(options);\n        // Handling of \"if\" statements precedes other options as it creates a chained transformation\n        // @ts-ignore\n        if (options[\"if\"]) {\n          // @ts-ignore\n          this.set(\"if\", options[\"if\"]);\n          // @ts-ignore\n          delete options[\"if\"];\n        }\n        for (var key in options) {\n          // @ts-ignore\n          var opt = options[key];\n          if (opt != null) {\n            if (key.match(VAR_NAME_RE)) {\n              if (key !== '$attr') {\n                this.set('variable', key, opt);\n              }\n            } else {\n              this.set(key, opt);\n            }\n          }\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"fromTransformation\",\n    value: function fromTransformation(other) {\n      var _this6 = this;\n      if (other instanceof TransformationBase) {\n        other.keys().forEach(function (key) {\n          return _this6.set(key, other.get(key).origValue);\n        });\n      }\n      return this;\n    }\n    /**\n     * Set a parameter.\n     * The parameter name `key` is converted to\n     * @param {string} key - the name of the parameter\n     * @param {*} values - the value of the parameter\n     * @returns {Transformation} Returns this instance for chaining\n     */\n  }, {\n    key: \"set\",\n    value: function set(key) {\n      var camelKey;\n      camelKey = camelCase(key);\n      for (var _len2 = arguments.length, values = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        values[_key2 - 1] = arguments[_key2];\n      }\n      if (contains(methods, camelKey)) {\n        // @ts-ignore\n        this[camelKey].apply(this, values);\n      } else {\n        this.otherOptions[key] = values[0];\n      }\n      return this;\n    }\n  }, {\n    key: \"hasLayer\",\n    value: function hasLayer() {\n      return this.getValue(\"overlay\") || this.getValue(\"underlay\");\n    }\n    /**\n     * Generate a string representation of the transformation.\n     * @function Transformation#serialize\n     * @return {string} Returns the transformation as a string\n     */\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var ifParam, j, len, paramList, ref, ref1, ref2, ref3, ref4, resultArray, t, transformationList, transformationString, transformations, value, variables, vars;\n      resultArray = this.chained.map(function (tr) {\n        return tr.serialize();\n      });\n      paramList = this.keys();\n      transformations = (ref = this.get(\"transformation\")) != null ? ref.serialize() : void 0;\n      ifParam = (ref1 = this.get(\"if\")) != null ? ref1.serialize() : void 0;\n      variables = processVar((ref2 = this.get(\"variables\")) != null ? ref2.value() : void 0);\n      paramList = difference(paramList, [\"transformation\", \"if\", \"variables\"]);\n      vars = [];\n      transformationList = [];\n      for (j = 0, len = paramList.length; j < len; j++) {\n        t = paramList[j];\n        if (t.match(VAR_NAME_RE)) {\n          vars.push(t + \"_\" + Expression.normalize((ref3 = this.get(t)) != null ? ref3.value() : void 0));\n        } else {\n          transformationList.push((ref4 = this.get(t)) != null ? ref4.serialize() : void 0);\n        }\n      }\n      switch (false) {\n        case !isString(transformations):\n          transformationList.push(transformations);\n          break;\n        case !Array.isArray(transformations):\n          resultArray = resultArray.concat(transformations);\n      }\n      transformationList = function () {\n        var k, len1, results;\n        results = [];\n        for (k = 0, len1 = transformationList.length; k < len1; k++) {\n          value = transformationList[k];\n          if (Array.isArray(value) && !isEmpty(value) || !Array.isArray(value) && value) {\n            results.push(value);\n          }\n        }\n        return results;\n      }();\n      transformationList = vars.sort().concat(variables).concat(transformationList.sort());\n      if (ifParam === \"if_end\") {\n        transformationList.push(ifParam);\n      } else if (!isEmpty(ifParam)) {\n        transformationList.unshift(ifParam);\n      }\n      transformationString = transformationList.filter(function (x) {\n        return !!x;\n      }).join(param_separator);\n      if (!isEmpty(transformationString)) {\n        resultArray.push(transformationString);\n      }\n      return resultArray.filter(function (x) {\n        return !!x;\n      }).join(trans_separator);\n    }\n    /**\n     * Provide a list of all the valid transformation option names\n     * @function Transformation#listNames\n     * @private\n     * @return {Array<string>} a array of all the valid option names\n     */\n  }, {\n    key: \"toHtmlAttributes\",\n    value:\n    /**\n     * Returns the attributes for an HTML tag.\n     * @function Cloudinary.toHtmlAttributes\n     * @return PlainObject\n     */\n    function toHtmlAttributes() {\n      var _this7 = this;\n      var attrName, height, options, ref2, ref3, value, width;\n      options = {};\n      var snakeCaseKey;\n      Object.keys(this.otherOptions).forEach(function (key) {\n        value = _this7.otherOptions[key];\n        snakeCaseKey = snakeCase(key);\n        if (!contains(PARAM_NAMES, snakeCaseKey) && !contains(URL_KEYS, snakeCaseKey)) {\n          attrName = /^html_/.test(key) ? key.slice(5) : key;\n          options[attrName] = value;\n        }\n      });\n      // convert all \"html_key\" to \"key\" with the same value\n      this.keys().forEach(function (key) {\n        if (/^html_/.test(key)) {\n          options[camelCase(key.slice(5))] = _this7.getValue(key);\n        }\n      });\n      if (!(this.hasLayer() || this.getValue(\"angle\") || contains([\"fit\", \"limit\", \"lfill\"], this.getValue(\"crop\")))) {\n        width = (ref2 = this.get(\"width\")) != null ? ref2.origValue : void 0;\n        height = (ref3 = this.get(\"height\")) != null ? ref3.origValue : void 0;\n        if (parseFloat(width) >= 1.0) {\n          if (options.width == null) {\n            options.width = width;\n          }\n        }\n        if (parseFloat(height) >= 1.0) {\n          if (options.height == null) {\n            options.height = height;\n          }\n        }\n      }\n      return options;\n    }\n  }, {\n    key: \"toHtml\",\n    value:\n    /**\n     * Delegate to the parent (up the call chain) to produce HTML\n     * @function Transformation#toHtml\n     * @return {string} HTML representation of the parent if possible.\n     * @example\n     * tag = cloudinary.ImageTag.new(\"sample\", {cloud_name: \"demo\"})\n     * // ImageTag {name: \"img\", publicId: \"sample\"}\n     * tag.toHtml()\n     * // <img src=\"sample\">\n     * tag.transformation().crop(\"fit\").width(300).toHtml()\n     * // <img src=\"c_fit,w_300\">\n     */\n    function toHtml() {\n      var ref;\n      return (ref = this.getParent()) != null ? typeof ref.toHtml === \"function\" ? ref.toHtml() : void 0 : void 0;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.serialize();\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new TransformationBase(this.toOptions(true));\n    }\n  }], [{\n    key: \"listNames\",\n    value: function listNames() {\n      return methods;\n    }\n  }, {\n    key: \"isValidParamName\",\n    value: function isValidParamName(name) {\n      return methods.indexOf(camelCase(name)) >= 0;\n    }\n  }]);\n  return TransformationBase;\n}();\nvar VAR_NAME_RE = /^\\$[a-zA-Z0-9]+$/;\nvar trans_separator = '/';\nvar param_separator = ',';\nfunction lastArgCallback(args) {\n  var callback;\n  callback = args != null ? args[args.length - 1] : void 0;\n  if (isFunction(callback)) {\n    return callback;\n  } else {\n    return void 0;\n  }\n}\nfunction processVar(varArray) {\n  var j, len, name, results, v;\n  if (Array.isArray(varArray)) {\n    results = [];\n    for (j = 0, len = varArray.length; j < len; j++) {\n      var _varArray$j = _slicedToArray(varArray[j], 2);\n      name = _varArray$j[0];\n      v = _varArray$j[1];\n      results.push(\"\".concat(name, \"_\").concat(Expression.normalize(v)));\n    }\n    return results;\n  } else {\n    return varArray;\n  }\n}\n// @ts-ignore\nfunction processCustomFunction(_ref) {\n  var function_type = _ref.function_type,\n    source = _ref.source;\n  if (function_type === 'remote') {\n    return [function_type, btoa(source)].join(\":\");\n  } else if (function_type === 'wasm') {\n    return [function_type, source].join(\":\");\n  }\n}\n/**\n * Transformation Class methods.\n * This is a list of the parameters defined in Transformation.\n * Values are camelCased.\n * @const Transformation.methods\n * @private\n * @ignore\n * @type {Array<string>}\n */\n/**\n * Parameters that are filtered out before passing the options to an HTML tag.\n *\n * The list of parameters is a combination of `Transformation::methods` and `Configuration::CONFIG_PARAMS`\n * @const {Array<string>} Transformation.PARAM_NAMES\n * @private\n * @ignore\n * @see toHtmlAttributes\n */\nvar Transformation = /*#__PURE__*/function (_TransformationBase) {\n  _inherits(Transformation, _TransformationBase);\n  var _super6 = _createSuper(Transformation);\n  /**\n   * Represents a single transformation.\n   * @class Transformation\n   * @example\n   * t = new cloudinary.Transformation();\n   * t.angle(20).crop(\"scale\").width(\"auto\");\n   *\n   * // or\n   *\n   * t = new cloudinary.Transformation( {angle: 20, crop: \"scale\", width: \"auto\"});\n   * @see <a href=\"https://cloudinary.com/documentation/image_transformation_reference\"\n   *  target=\"_blank\">Available image transformations</a>\n   * @see <a href=\"https://cloudinary.com/documentation/video_transformation_reference\"\n   *  target=\"_blank\">Available video transformations</a>\n   */\n  function Transformation(options) {\n    _classCallCheck(this, Transformation);\n    return _super6.call(this, options);\n  }\n  /**\n   * Convenience constructor\n   * @param {Object} options\n   * @return {Transformation}\n   * @example cl = cloudinary.Transformation.new( {angle: 20, crop: \"scale\", width: \"auto\"})\n   */\n  _createClass(Transformation, [{\n    key: \"angle\",\n    value:\n    /*\n      Transformation Parameters\n    */\n    function angle(value) {\n      this.arrayParam(value, \"angle\", \"a\", \".\", Expression.normalize);\n      return this;\n    }\n  }, {\n    key: \"audioCodec\",\n    value: function audioCodec(value) {\n      this.param(value, \"audio_codec\", \"ac\");\n      return this;\n    }\n  }, {\n    key: \"audioFrequency\",\n    value: function audioFrequency(value) {\n      this.param(value, \"audio_frequency\", \"af\");\n      return this;\n    }\n  }, {\n    key: \"aspectRatio\",\n    value: function aspectRatio(value) {\n      this.param(value, \"aspect_ratio\", \"ar\", Expression.normalize);\n      return this;\n    }\n  }, {\n    key: \"background\",\n    value: function background(value) {\n      this.param(value, \"background\", \"b\", Param.norm_color);\n      return this;\n    }\n  }, {\n    key: \"bitRate\",\n    value: function bitRate(value) {\n      this.param(value, \"bit_rate\", \"br\");\n      return this;\n    }\n  }, {\n    key: \"border\",\n    value: function border(value) {\n      return this.param(value, \"border\", \"bo\", function (border) {\n        if (isObject(border)) {\n          border = Object.assign({}, {\n            color: \"black\",\n            width: 2\n          }, border);\n          return \"\".concat(border.width, \"px_solid_\").concat(Param.norm_color(border.color));\n        } else {\n          return border;\n        }\n      });\n    }\n  }, {\n    key: \"color\",\n    value: function color(value) {\n      this.param(value, \"color\", \"co\", Param.norm_color);\n      return this;\n    }\n  }, {\n    key: \"colorSpace\",\n    value: function colorSpace(value) {\n      this.param(value, \"color_space\", \"cs\");\n      return this;\n    }\n  }, {\n    key: \"crop\",\n    value: function crop(value) {\n      this.param(value, \"crop\", \"c\");\n      return this;\n    }\n  }, {\n    key: \"customFunction\",\n    value: function customFunction(value) {\n      return this.param(value, \"custom_function\", \"fn\", function () {\n        return processCustomFunction(value);\n      });\n    }\n  }, {\n    key: \"customPreFunction\",\n    value: function customPreFunction(value) {\n      if (this.get('custom_function')) {\n        return;\n      }\n      return this.rawParam(value, \"custom_function\", \"\", function () {\n        value = processCustomFunction(value);\n        return value ? \"fn_pre:\".concat(value) : value;\n      });\n    }\n  }, {\n    key: \"defaultImage\",\n    value: function defaultImage(value) {\n      this.param(value, \"default_image\", \"d\");\n      return this;\n    }\n  }, {\n    key: \"delay\",\n    value: function delay(value) {\n      this.param(value, \"delay\", \"dl\");\n      return this;\n    }\n  }, {\n    key: \"density\",\n    value: function density(value) {\n      this.param(value, \"density\", \"dn\");\n      return this;\n    }\n  }, {\n    key: \"duration\",\n    value: function duration(value) {\n      this.rangeParam(value, \"duration\", \"du\");\n      return this;\n    }\n  }, {\n    key: \"dpr\",\n    value: function dpr(value) {\n      return this.param(value, \"dpr\", \"dpr\", function (dpr) {\n        dpr = dpr.toString();\n        if (dpr != null ? dpr.match(/^\\d+$/) : void 0) {\n          return dpr + \".0\";\n        } else {\n          return Expression.normalize(dpr);\n        }\n      });\n    }\n  }, {\n    key: \"effect\",\n    value: function effect(value) {\n      this.arrayParam(value, \"effect\", \"e\", \":\", Expression.normalize);\n      return this;\n    }\n  }, {\n    key: \"else\",\n    value: function _else() {\n      return this.if('else');\n    }\n  }, {\n    key: \"endIf\",\n    value: function endIf() {\n      return this.if('end');\n    }\n  }, {\n    key: \"endOffset\",\n    value: function endOffset(value) {\n      this.rangeParam(value, \"end_offset\", \"eo\");\n      return this;\n    }\n  }, {\n    key: \"fallbackContent\",\n    value: function fallbackContent(value) {\n      this.param(value, \"fallback_content\");\n      return this;\n    }\n  }, {\n    key: \"fetchFormat\",\n    value: function fetchFormat(value) {\n      this.param(value, \"fetch_format\", \"f\");\n      return this;\n    }\n  }, {\n    key: \"format\",\n    value: function format(value) {\n      this.param(value, \"format\");\n      return this;\n    }\n  }, {\n    key: \"flags\",\n    value: function flags(value) {\n      this.arrayParam(value, \"flags\", \"fl\", \".\");\n      return this;\n    }\n  }, {\n    key: \"gravity\",\n    value: function gravity(value) {\n      this.param(value, \"gravity\", \"g\");\n      return this;\n    }\n  }, {\n    key: \"fps\",\n    value: function fps(value) {\n      return this.param(value, \"fps\", \"fps\", function (fps) {\n        if (isString(fps)) {\n          return fps;\n        } else if (Array.isArray(fps)) {\n          return fps.join(\"-\");\n        } else {\n          return fps;\n        }\n      });\n    }\n  }, {\n    key: \"height\",\n    value: function height(value) {\n      var _this8 = this;\n      return this.param(value, \"height\", \"h\", function () {\n        if (_this8.getValue(\"crop\") || _this8.getValue(\"overlay\") || _this8.getValue(\"underlay\")) {\n          return Expression.normalize(value);\n        } else {\n          return null;\n        }\n      });\n    }\n  }, {\n    key: \"htmlHeight\",\n    value: function htmlHeight(value) {\n      this.param(value, \"html_height\");\n      return this;\n    }\n  }, {\n    key: \"htmlWidth\",\n    value: function htmlWidth(value) {\n      this.param(value, \"html_width\");\n      return this;\n    }\n  }, {\n    key: \"if\",\n    value: function _if() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      var i, ifVal, j, ref, trIf, trRest;\n      switch (value) {\n        case \"else\":\n          this.chain();\n          return this.param(value, \"if\", \"if\");\n        case \"end\":\n          this.chain();\n          for (i = j = ref = this.chained.length - 1; j >= 0; i = j += -1) {\n            ifVal = this.chained[i].getValue(\"if\");\n            if (ifVal === \"end\") {\n              break;\n            } else if (ifVal != null) {\n              trIf = Transformation.new().if(ifVal);\n              this.chained[i].remove(\"if\");\n              trRest = this.chained[i];\n              this.chained[i] = Transformation.new().transformation([trIf, trRest]);\n              if (ifVal !== \"else\") {\n                break;\n              }\n            }\n          }\n          return this.param(value, \"if\", \"if\");\n        case \"\":\n          return Condition.new().setParent(this);\n        default:\n          return this.param(value, \"if\", \"if\", function (value) {\n            return Condition.new(value).toString();\n          });\n      }\n    }\n  }, {\n    key: \"keyframeInterval\",\n    value: function keyframeInterval(value) {\n      this.param(value, \"keyframe_interval\", \"ki\");\n      return this;\n    }\n  }, {\n    key: \"ocr\",\n    value: function ocr(value) {\n      this.param(value, \"ocr\", \"ocr\");\n      return this;\n    }\n  }, {\n    key: \"offset\",\n    value: function offset(value) {\n      var end_o, start_o;\n      var _ref2 = isFunction(value != null ? value.split : void 0) ? value.split('..') : Array.isArray(value) ? value : [null, null];\n      var _ref3 = _slicedToArray(_ref2, 2);\n      start_o = _ref3[0];\n      end_o = _ref3[1];\n      if (start_o != null) {\n        this.startOffset(start_o);\n      }\n      if (end_o != null) {\n        return this.endOffset(end_o);\n      }\n    }\n  }, {\n    key: \"opacity\",\n    value: function opacity(value) {\n      this.param(value, \"opacity\", \"o\", Expression.normalize);\n      return this;\n    }\n  }, {\n    key: \"overlay\",\n    value: function overlay(value) {\n      this.layerParam(value, \"overlay\", \"l\");\n      return this;\n    }\n  }, {\n    key: \"page\",\n    value: function page(value) {\n      this.param(value, \"page\", \"pg\");\n      return this;\n    }\n  }, {\n    key: \"poster\",\n    value: function poster(value) {\n      this.param(value, \"poster\");\n      return this;\n    }\n  }, {\n    key: \"prefix\",\n    value: function prefix(value) {\n      this.param(value, \"prefix\", \"p\");\n      return this;\n    }\n  }, {\n    key: \"quality\",\n    value: function quality(value) {\n      this.param(value, \"quality\", \"q\", Expression.normalize);\n      return this;\n    }\n  }, {\n    key: \"radius\",\n    value: function radius(value) {\n      this.arrayParam(value, \"radius\", \"r\", \":\", Expression.normalize);\n      return this;\n    }\n  }, {\n    key: \"rawTransformation\",\n    value: function rawTransformation(value) {\n      this.rawParam(value, \"raw_transformation\");\n      return this;\n    }\n  }, {\n    key: \"size\",\n    value: function size(value) {\n      var height, width;\n      if (isFunction(value != null ? value.split : void 0)) {\n        var _value$split = value.split('x');\n        var _value$split2 = _slicedToArray(_value$split, 2);\n        width = _value$split2[0];\n        height = _value$split2[1];\n        this.width(width);\n        return this.height(height);\n      }\n    }\n  }, {\n    key: \"sourceTypes\",\n    value: function sourceTypes(value) {\n      this.param(value, \"source_types\");\n      return this;\n    }\n  }, {\n    key: \"sourceTransformation\",\n    value: function sourceTransformation(value) {\n      return this.param(value, \"source_transformation\");\n    }\n  }, {\n    key: \"startOffset\",\n    value: function startOffset(value) {\n      this.rangeParam(value, \"start_offset\", \"so\");\n      return this;\n    }\n  }, {\n    key: \"streamingProfile\",\n    value: function streamingProfile(value) {\n      this.param(value, \"streaming_profile\", \"sp\");\n      return this;\n    }\n  }, {\n    key: \"transformation\",\n    value: function transformation(value) {\n      this.transformationParam(value, \"transformation\", \"t\");\n      return this;\n    }\n  }, {\n    key: \"underlay\",\n    value: function underlay(value) {\n      this.layerParam(value, \"underlay\", \"u\");\n      return this;\n    }\n  }, {\n    key: \"variable\",\n    value: function variable(name, value) {\n      this.param(value, name, name);\n      return this;\n    }\n  }, {\n    key: \"variables\",\n    value: function variables(values) {\n      this.arrayParam(values, \"variables\");\n      return this;\n    }\n  }, {\n    key: \"videoCodec\",\n    value: function videoCodec(value) {\n      this.param(value, \"video_codec\", \"vc\", Param.process_video_params);\n      return this;\n    }\n  }, {\n    key: \"videoSampling\",\n    value: function videoSampling(value) {\n      this.param(value, \"video_sampling\", \"vs\");\n      return this;\n    }\n  }, {\n    key: \"width\",\n    value: function width(value) {\n      var _this9 = this;\n      this.param(value, \"width\", \"w\", function () {\n        if (_this9.getValue(\"crop\") || _this9.getValue(\"overlay\") || _this9.getValue(\"underlay\")) {\n          return Expression.normalize(value);\n        } else {\n          return null;\n        }\n      });\n      return this;\n    }\n  }, {\n    key: \"x\",\n    value: function x(value) {\n      this.param(value, \"x\", \"x\", Expression.normalize);\n      return this;\n    }\n  }, {\n    key: \"y\",\n    value: function y(value) {\n      this.param(value, \"y\", \"y\", Expression.normalize);\n      return this;\n    }\n  }, {\n    key: \"zoom\",\n    value: function zoom(value) {\n      this.param(value, \"zoom\", \"z\", Expression.normalize);\n      return this;\n    }\n  }], [{\n    key: \"new\",\n    value: function _new(options) {\n      return new Transformation(options);\n    }\n  }]);\n  return Transformation;\n}(TransformationBase);\n/**\n * Transformation Class methods.\n * This is a list of the parameters defined in Transformation.\n * Values are camelCased.\n */\nvar methods = [\"angle\", \"audioCodec\", \"audioFrequency\", \"aspectRatio\", \"background\", \"bitRate\", \"border\", \"color\", \"colorSpace\", \"crop\", \"customFunction\", \"customPreFunction\", \"defaultImage\", \"delay\", \"density\", \"duration\", \"dpr\", \"effect\", \"else\", \"endIf\", \"endOffset\", \"fallbackContent\", \"fetchFormat\", \"format\", \"flags\", \"gravity\", \"fps\", \"height\", \"htmlHeight\", \"htmlWidth\", \"if\", \"keyframeInterval\", \"ocr\", \"offset\", \"opacity\", \"overlay\", \"page\", \"poster\", \"prefix\", \"quality\", \"radius\", \"rawTransformation\", \"size\", \"sourceTypes\", \"sourceTransformation\", \"startOffset\", \"streamingProfile\", \"transformation\", \"underlay\", \"variable\", \"variables\", \"videoCodec\", \"videoSampling\", \"width\", \"x\", \"y\", \"zoom\"];\n/**\n * Parameters that are filtered out before passing the options to an HTML tag.\n *\n * The list of parameters is a combination of `Transformation::methods` and `Configuration::CONFIG_PARAMS`\n */\nvar PARAM_NAMES = methods.map(snakeCase).concat(CONFIG_PARAMS);\nexport default Transformation;","map":{"version":3,"names":["Condition","CONFIG_PARAMS","cloneDeep","camelCase","contains","difference","snakeCase","Expression","Layer","TextLayer","SubtitlesLayer","FetchLayer","isObject","isString","isEmpty","isFunction","identity","withCamelCaseKeys","URL_KEYS","assignNotNull","target","sources","forEach","source","Object","keys","key","allStrings","list","length","every","Param","name","shortName","process","origValue","val","valid","value","Array","isArray","replace","arg","param","video","constructor","codec","profile","level","String","ArrayParam","sep","undefined","arrayValue","flat","map","t","serialize","join","v","TransformationParam","result","joined","Transformation","filter","origValue1","number_pattern","offset_any_pattern","RangeParam","norm_range_value","offset","match","RegExp","modifier","RawParam","LayerParam","layerOptions","resourceType","text","url","test","substr","toString","layer","textStyleIdentifier","TransformationBase","options","parent","trans","toOptions","withChain","opt","otherOptions","chained","tr","push","transformation","setParent","object","fromOptions","getParent","abbr","defaultValue","set","rawParam","lastArgCallback","arguments","rangeParam","arrayParam","transformationParam","layerParam","getValue","get","remove","temp","results","VAR_NAME_RE","sort","toPlainObject","hash","chain","names","getOwnPropertyNames","resetTransformations","fromTransformation","other","camelKey","values","methods","apply","ifParam","j","len","paramList","ref","ref1","ref2","ref3","ref4","resultArray","transformationList","transformationString","transformations","variables","vars","processVar","normalize","concat","k","len1","unshift","x","param_separator","trans_separator","attrName","height","width","snakeCaseKey","PARAM_NAMES","slice","hasLayer","parseFloat","toHtml","indexOf","args","callback","varArray","processCustomFunction","function_type","btoa","norm_color","border","assign","color","dpr","if","fps","i","ifVal","trIf","trRest","new","end_o","start_o","split","startOffset","endOffset","process_video_params"],"sources":["/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@cloudinary/transformation-builder-sdk/backwards/transformation.js"],"sourcesContent":["import Condition from './condition.js';\nimport { CONFIG_PARAMS } from './configuration.js';\nimport { cloneDeep } from '../internal/utils/cloneDeep.js';\nimport { camelCase, contains, difference, } from \"./utils/legacyBaseUtil.js\";\nimport { snakeCase } from \"./utils/snakeCase.js\";\nimport Expression from './expression.js';\nimport Layer from './legacyLayer/layer.js';\nimport TextLayer from './legacyLayer/textlayer.js';\nimport SubtitlesLayer from './legacyLayer/subtitleslayer.js';\nimport FetchLayer from './legacyLayer/fetchlayer.js';\nimport { isObject } from \"./utils/isObject.js\";\nimport { isString } from \"../internal/utils/dataStructureUtils.js\";\nimport { isEmpty } from \"./utils/isEmpty.js\";\nimport { isFunction } from \"./utils/isFunction.js\";\nimport { identity, withCamelCaseKeys } from \"./utils/legacyBaseUtil.js\";\n/**\n * A list of keys used by the url() function.\n * @private\n */\nexport const URL_KEYS = [\n    'accessibility',\n    'api_secret',\n    'auth_token',\n    'cdn_subdomain',\n    'cloud_name',\n    'cname',\n    'format',\n    'placeholder',\n    'private_cdn',\n    'resource_type',\n    'secure',\n    'secure_cdn_subdomain',\n    'secure_distribution',\n    'shorten',\n    'sign_url',\n    'signature',\n    'ssl_detected',\n    'type',\n    'url_suffix',\n    'use_root_path',\n    'version'\n];\n/**\n * Assign key, value to target, when value is not null.<br>\n *   This function mutates the target!\n * @param {object} target the object to assign the values to\n * @param {object} sources one or more objects to get values from\n * @returns {object} the target after the assignment\n */\nfunction assignNotNull(target, ...sources) {\n    sources.forEach(source => {\n        Object.keys(source).forEach(key => {\n            // @ts-ignore\n            if (source[key] != null) {\n                // @ts-ignore\n                target[key] = source[key];\n            }\n        });\n    });\n    return target;\n}\n/**\n * Return true if all items in list are strings\n * @function Util.allString\n * @param {Array} list - an array of items\n */\nconst allStrings = function (list) {\n    return list.length && list.every(isString);\n};\n/**\n * Transformation parameters\n * Depends on 'util', 'transformation'\n */\nclass Param {\n    /**\n     * Represents a single parameter.\n     * @class Param\n     * @param {string} name - The name of the parameter in snake_case\n     * @param {string} shortName - The name of the serialized form of the parameter.\n     *                         If a value is not provided, the parameter will not be serialized.\n     * @param {function} [process=Util.identity ] - Manipulate origValue when value is called\n     * @ignore\n     */\n    constructor(name, shortName, process = identity) {\n        /**\n         * The name of the parameter in snake_case\n         * @member {string} Param#name\n         */\n        this.name = name;\n        /**\n         * The name of the serialized form of the parameter\n         * @member {string} Param#shortName\n         */\n        this.shortName = shortName;\n        /**\n         * Manipulate origValue when value is called\n         * @member {function} Param#process\n         */\n        this.process = process;\n    }\n    /**\n     * Set a (unprocessed) value for this parameter\n     * @function Param#set\n     * @param {*} origValue - the value of the parameter\n     * @return {Param} self for chaining\n     */\n    set(origValue) {\n        this.origValue = origValue;\n        return this;\n    }\n    /**\n     * Generate the serialized form of the parameter\n     * @function Param#serialize\n     * @return {string} the serialized form of the parameter\n     */\n    serialize() {\n        var val, valid;\n        val = this.value();\n        valid = Array.isArray(val) || isObject(val) || isString(val) ? !isEmpty(val) : val != null;\n        if ((this.shortName != null) && valid) {\n            return `${this.shortName}_${val}`;\n        }\n        else {\n            return '';\n        }\n    }\n    /**\n     * Return the processed value of the parameter\n     * @function Param#value\n     */\n    value() {\n        return this.process(this.origValue);\n    }\n    static norm_color(value) {\n        return value != null ? value.replace(/^#/, 'rgb:') : void 0;\n    }\n    static build_array(arg) {\n        if (arg == null) {\n            return [];\n        }\n        else if (Array.isArray(arg)) {\n            return arg;\n        }\n        else {\n            return [arg];\n        }\n    }\n    /**\n     * Covert value to video codec string.\n     *\n     * If the parameter is an object,\n     * @param {(string|Object)} param - the video codec as either a String or a Hash\n     * @return {string} the video codec string in the format codec:profile:level\n     * @example\n     * vc_[ :profile : [level]]\n     * or\n     { codec: 'h264', profile: 'basic', level: '3.1' }\n     * @ignore\n     */\n    static process_video_params(param) {\n        var video;\n        switch (param.constructor) {\n            case Object:\n                video = \"\";\n                if ('codec' in param) {\n                    video = param.codec;\n                    if ('profile' in param) {\n                        video += \":\" + param.profile;\n                        if ('level' in param) {\n                            video += \":\" + param.level;\n                        }\n                    }\n                }\n                return video;\n            case String:\n                return param;\n            default:\n                return null;\n        }\n    }\n}\nclass ArrayParam extends Param {\n    /**\n     * A parameter that represents an array.\n     * @param {string} name - The name of the parameter in snake_case.\n     * @param {string} shortName - The name of the serialized form of the parameter\n     *                         If a value is not provided, the parameter will not be serialized.\n     * @param {string} [sep='.'] - The separator to use when joining the array elements together\n     * @param {function} [process=Util.identity ] - Manipulate origValue when value is called\n     * @class ArrayParam\n     * @extends Param\n     * @ignore\n     */\n    constructor(name, shortName, sep = '.', process = undefined) {\n        super(name, shortName, process);\n        this.sep = sep;\n    }\n    serialize() {\n        if (this.shortName != null) {\n            let arrayValue = this.value();\n            if (isEmpty(arrayValue)) {\n                return '';\n            }\n            else if (isString(arrayValue)) {\n                return `${this.shortName}_${arrayValue}`;\n            }\n            else {\n                let flat = arrayValue.map((t) => isFunction(t.serialize) ? t.serialize() : t).join(this.sep);\n                return `${this.shortName}_${flat}`;\n            }\n        }\n        else {\n            return '';\n        }\n    }\n    value() {\n        if (Array.isArray(this.origValue)) {\n            return this.origValue.map(v => this.process(v));\n        }\n        else {\n            return this.process(this.origValue);\n        }\n    }\n    set(origValue) {\n        if ((origValue == null) || Array.isArray(origValue)) {\n            return super.set(origValue);\n        }\n        else {\n            return super.set([origValue]);\n        }\n    }\n}\nclass TransformationParam extends Param {\n    /**\n     * A parameter that represents a transformation\n     * @param {string} name - The name of the parameter in snake_case\n     * @param {string} [shortName='t'] - The name of the serialized form of the parameter\n     * @param {string} [sep='.'] - The separator to use when joining the array elements together\n     * @param {function} [process=Util.identity ] - Manipulate origValue when value is called\n     * @class TransformationParam\n     * @extends Param\n     * @ignore\n     */\n    constructor(name, shortName = \"t\", sep = '.', process = undefined) {\n        super(name, shortName, process);\n        this.sep = sep;\n    }\n    /**\n     * Generate string representations of the transformation.\n     * @returns {*} Returns either the transformation as a string, or an array of string representations.\n     */\n    serialize() {\n        let result = '';\n        const val = this.value();\n        if (isEmpty(val)) {\n            return result;\n        }\n        // val is an array of strings so join them\n        if (allStrings(val)) {\n            const joined = val.join(this.sep); // creates t1.t2.t3 in case multiple named transformations were configured\n            if (!isEmpty(joined)) {\n                // in case options.transformation was not set with an empty string (val != ['']);\n                result = `${this.shortName}_${joined}`;\n            }\n        }\n        else { // Convert val to an array of strings\n            result = val.map((t) => {\n                if (isString(t) && !isEmpty(t)) {\n                    return `${this.shortName}_${t}`;\n                }\n                if (isFunction(t.serialize)) {\n                    return t.serialize();\n                }\n                if (isObject(t) && !isEmpty(t)) {\n                    return new Transformation(t).serialize();\n                }\n                return undefined;\n            }).filter((t) => t);\n        }\n        return result;\n    }\n    set(origValue1) {\n        this.origValue = origValue1;\n        if (Array.isArray(this.origValue)) {\n            return super.set(this.origValue);\n        }\n        else {\n            return super.set([this.origValue]);\n        }\n    }\n}\nconst number_pattern = \"([0-9]*)\\\\.([0-9]+)|([0-9]+)\";\nconst offset_any_pattern = \"(\" + number_pattern + \")([%pP])?\";\nclass RangeParam extends Param {\n    /**\n     * A parameter that represents a range\n     * @param {string} name - The name of the parameter in snake_case\n     * @param {string} shortName - The name of the serialized form of the parameter\n     *                         If a value is not provided, the parameter will not be serialized.\n     * @param {function} [process=norm_range_value ] - Manipulate origValue when value is called\n     * @class RangeParam\n     * @extends Param\n     * @ignore\n     */\n    constructor(name, shortName, process = RangeParam.norm_range_value) {\n        super(name, shortName, process);\n    }\n    static norm_range_value(value) {\n        let offset = String(value).match(new RegExp('^' + offset_any_pattern + '$'));\n        if (offset) {\n            let modifier = offset[5] != null ? 'p' : '';\n            value = (offset[1] || offset[4]) + modifier;\n        }\n        return value;\n    }\n}\nclass RawParam extends Param {\n    constructor(name, shortName, process = identity) {\n        super(name, shortName, process);\n    }\n    serialize() {\n        return this.value();\n    }\n}\nclass LayerParam extends Param {\n    // Parse layer options\n    // @return [string] layer transformation string\n    // @private\n    value() {\n        if (this.origValue == null) {\n            return '';\n        }\n        let result;\n        if (this.origValue instanceof Layer) {\n            result = this.origValue;\n        }\n        else if (isObject(this.origValue)) {\n            let layerOptions = withCamelCaseKeys(this.origValue);\n            // @ts-ignore\n            if (layerOptions.resourceType === \"text\" || (layerOptions.text != null)) {\n                result = new TextLayer(layerOptions);\n            }\n            else { // @ts-ignore\n                if (layerOptions.resourceType === \"subtitles\") {\n                    result = new SubtitlesLayer(layerOptions);\n                }\n                else { // @ts-ignore\n                    if (layerOptions.resourceType === \"fetch\" || (layerOptions.url != null)) {\n                        result = new FetchLayer(layerOptions);\n                    }\n                    else {\n                        result = new Layer(layerOptions);\n                    }\n                }\n            }\n        }\n        else if (isString(this.origValue)) {\n            if (/^fetch:.+/.test(this.origValue)) {\n                result = new FetchLayer(this.origValue.substr(6));\n            }\n            else {\n                result = this.origValue;\n            }\n        }\n        else {\n            result = '';\n        }\n        return result.toString();\n    }\n    static textStyle(layer) {\n        return (new TextLayer(layer)).textStyleIdentifier();\n    }\n}\n/**\n * TransformationBase\n * Depends on 'configuration', 'parameters','util'\n * @internal\n */\nclass TransformationBase {\n    /**\n     * The base class for transformations.\n     * Members of this class are documented as belonging to the {@link Transformation} class for convenience.\n     * @class TransformationBase\n     */\n    constructor(options) {\n        /** @private */\n        /** @private */\n        let parent;\n        let trans;\n        parent = void 0;\n        trans = {};\n        /**\n         * Return an options object that can be used to create an identical Transformation\n         * @function Transformation#toOptions\n         * @return {Object} Returns a plain object representing this transformation\n         */\n        this.toOptions = (withChain) => {\n            let opt = {};\n            if (withChain == null) {\n                withChain = true;\n            }\n            // @ts-ignore\n            Object.keys(trans).forEach(key => opt[key] = trans[key].origValue);\n            assignNotNull(opt, this.otherOptions);\n            if (withChain && !isEmpty(this.chained)) {\n                let list = this.chained.map((tr) => tr.toOptions());\n                list.push(opt);\n                opt = {};\n                assignNotNull(opt, this.otherOptions);\n                // @ts-ignore\n                opt.transformation = list;\n            }\n            return opt;\n        };\n        /**\n         * Set a parent for this object for chaining purposes.\n         *\n         * @function Transformation#setParent\n         * @param {Object} object - the parent to be assigned to\n         * @returns {Transformation} Returns this instance for chaining purposes.\n         */\n        this.setParent = (object) => {\n            parent = object;\n            if (object != null) {\n                // @ts-ignore\n                this.fromOptions(typeof object.toOptions === \"function\" ? object.toOptions() : void 0);\n            }\n            return this;\n        };\n        /**\n         * Returns the parent of this object in the chain\n         * @function Transformation#getParent\n         * @protected\n         * @return {Object} Returns the parent of this object if there is any\n         */\n        this.getParent = () => {\n            return parent;\n        };\n        // Helper methods to create parameter methods\n        // These methods are defined here because they access `trans` which is\n        // a private member of `TransformationBase`\n        /** @protected */\n        this.param = (value, name, abbr, defaultValue, process) => {\n            if (process == null) {\n                if (isFunction(defaultValue)) {\n                    process = defaultValue;\n                }\n                else {\n                    process = identity;\n                }\n            }\n            // @ts-ignore\n            trans[name] = new Param(name, abbr, process).set(value);\n            return this;\n        };\n        /** @protected */\n        this.rawParam = function (value, name, abbr, defaultValue, process) {\n            process = lastArgCallback(arguments);\n            // @ts-ignore\n            trans[name] = new RawParam(name, abbr, process).set(value);\n            return this;\n        };\n        /** @protected */\n        this.rangeParam = function (value, name, abbr, defaultValue, process) {\n            process = lastArgCallback(arguments);\n            // @ts-ignore\n            trans[name] = new RangeParam(name, abbr, process).set(value);\n            return this;\n        };\n        /** @protected */\n        this.arrayParam = function (value, name, abbr, sep = \":\", defaultValue = [], process = undefined) {\n            process = lastArgCallback(arguments);\n            // @ts-ignore\n            trans[name] = new ArrayParam(name, abbr, sep, process).set(value);\n            return this;\n        };\n        /** @protected */\n        this.transformationParam = function (value, name, abbr, sep = \".\", defaultValue = undefined, process = undefined) {\n            process = lastArgCallback(arguments);\n            // @ts-ignore\n            trans[name] = new TransformationParam(name, abbr, sep, process).set(value);\n            return this;\n        };\n        this.layerParam = function (value, name, abbr) {\n            // @ts-ignore\n            trans[name] = new LayerParam(name, abbr).set(value);\n            return this;\n        };\n        // End Helper methods\n        /**\n         * Get the value associated with the given name.\n         * Get the value associated with the given name.\n         * @function Transformation#getValue\n         * @param {string} name - the name of the parameter\n         * @return {*} the processed value associated with the given name\n         * @description Use {@link get}.origValue for the value originally provided for the parameter\n         */\n        this.getValue = function (name) {\n            // @ts-ignore\n            let value = trans[name] && trans[name].value();\n            return value != null ? value : this.otherOptions[name];\n        };\n        /**\n         * Get the parameter object for the given parameter name\n         * @function Transformation#get\n         * @param {string} name the name of the transformation parameter\n         * @returns {Param} the param object for the given name, or undefined\n         */\n        this.get = function (name) {\n            // @ts-ignore\n            return trans[name];\n        };\n        /**\n         * Remove a transformation option from the transformation.\n         * @function Transformation#remove\n         * @param {string} name - the name of the option to remove\n         * @return {*} Returns the option that was removed or null if no option by that name was found. The type of the\n         *              returned value depends on the value.\n         */\n        this.remove = function (name) {\n            var temp;\n            switch (false) {\n                // @ts-ignore\n                case trans[name] == null:\n                    // @ts-ignore\n                    temp = trans[name];\n                    // @ts-ignore\n                    delete trans[name];\n                    return temp.origValue;\n                case this.otherOptions[name] == null:\n                    temp = this.otherOptions[name];\n                    delete this.otherOptions[name];\n                    return temp;\n                default:\n                    return null;\n            }\n        };\n        /**\n         * Return an array of all the keys (option names) in the transformation.\n         * @return {Array<string>} the keys in snakeCase format\n         */\n        this.keys = function () {\n            var key;\n            return ((function () {\n                var results;\n                results = [];\n                for (key in trans) {\n                    if (key != null) {\n                        results.push(key.match(VAR_NAME_RE) ? key : snakeCase(key));\n                    }\n                }\n                return results;\n            })()).sort();\n        };\n        /**\n         * Returns a plain object representation of the transformation. Values are processed.\n         * @function Transformation#toPlainObject\n         * @return {Object} the transformation options as plain object\n         */\n        this.toPlainObject = function () {\n            var hash, key, list;\n            hash = {};\n            for (key in trans) {\n                // @ts-ignore\n                hash[key] = trans[key].value();\n                // @ts-ignore\n                if (isObject(hash[key])) {\n                    // @ts-ignore\n                    hash[key] = cloneDeep(hash[key]);\n                }\n            }\n            if (!isEmpty(this.chained)) {\n                list = this.chained.map((tr) => tr.toPlainObject());\n                list.push(hash);\n                hash = {\n                    transformation: list\n                };\n            }\n            return hash;\n        };\n        /**\n         * Complete the current transformation and chain to a new one.\n         * In the URL, transformations are chained together by slashes.\n         * @function Transformation#chain\n         * @return {Transformation} Returns this transformation for chaining\n         * @example\n         * var tr = cloudinary.Transformation.new();\n         * tr.width(10).crop('fit').chain().angle(15).serialize()\n         * // produces \"c_fit,w_10/a_15\"\n         */\n        this.chain = function () {\n            var names, tr;\n            names = Object.getOwnPropertyNames(trans);\n            if (names.length !== 0) {\n                tr = new this.constructor(this.toOptions(false));\n                this.resetTransformations();\n                this.chained.push(tr);\n            }\n            return this;\n        };\n        this.resetTransformations = function () {\n            trans = {};\n            return this;\n        };\n        this.otherOptions = {};\n        this.chained = [];\n        this.fromOptions(options);\n    }\n    /**\n     * Merge the provided options with own's options\n     * @param {Object} [options={}] key-value list of options\n     * @returns {Transformation} Returns this instance for chaining\n     */\n    fromOptions(options = {}) {\n        if (options instanceof TransformationBase) {\n            this.fromTransformation(options);\n        }\n        else {\n            if (isString(options) || Array.isArray(options)) {\n                options = {\n                    transformation: options\n                };\n            }\n            options = cloneDeep(options);\n            // Handling of \"if\" statements precedes other options as it creates a chained transformation\n            // @ts-ignore\n            if (options[\"if\"]) {\n                // @ts-ignore\n                this.set(\"if\", options[\"if\"]);\n                // @ts-ignore\n                delete options[\"if\"];\n            }\n            for (let key in options) {\n                // @ts-ignore\n                let opt = options[key];\n                if (opt != null) {\n                    if (key.match(VAR_NAME_RE)) {\n                        if (key !== '$attr') {\n                            this.set('variable', key, opt);\n                        }\n                    }\n                    else {\n                        this.set(key, opt);\n                    }\n                }\n            }\n        }\n        return this;\n    }\n    fromTransformation(other) {\n        if (other instanceof TransformationBase) {\n            other.keys().forEach(key => this.set(key, other.get(key).origValue));\n        }\n        return this;\n    }\n    /**\n     * Set a parameter.\n     * The parameter name `key` is converted to\n     * @param {string} key - the name of the parameter\n     * @param {*} values - the value of the parameter\n     * @returns {Transformation} Returns this instance for chaining\n     */\n    set(key, ...values) {\n        let camelKey;\n        camelKey = camelCase(key);\n        if (contains(methods, camelKey)) {\n            // @ts-ignore\n            this[camelKey].apply(this, values);\n        }\n        else {\n            this.otherOptions[key] = values[0];\n        }\n        return this;\n    }\n    hasLayer() {\n        return this.getValue(\"overlay\") || this.getValue(\"underlay\");\n    }\n    /**\n     * Generate a string representation of the transformation.\n     * @function Transformation#serialize\n     * @return {string} Returns the transformation as a string\n     */\n    serialize() {\n        var ifParam, j, len, paramList, ref, ref1, ref2, ref3, ref4, resultArray, t, transformationList, transformationString, transformations, value, variables, vars;\n        resultArray = this.chained.map((tr) => tr.serialize());\n        paramList = this.keys();\n        transformations = (ref = this.get(\"transformation\")) != null ? ref.serialize() : void 0;\n        ifParam = (ref1 = this.get(\"if\")) != null ? ref1.serialize() : void 0;\n        variables = processVar((ref2 = this.get(\"variables\")) != null ? ref2.value() : void 0);\n        paramList = difference(paramList, [\"transformation\", \"if\", \"variables\"]);\n        vars = [];\n        transformationList = [];\n        for (j = 0, len = paramList.length; j < len; j++) {\n            t = paramList[j];\n            if (t.match(VAR_NAME_RE)) {\n                vars.push(t + \"_\" + Expression.normalize((ref3 = this.get(t)) != null ? ref3.value() : void 0));\n            }\n            else {\n                transformationList.push((ref4 = this.get(t)) != null ? ref4.serialize() : void 0);\n            }\n        }\n        switch (false) {\n            case !isString(transformations):\n                transformationList.push(transformations);\n                break;\n            case !Array.isArray(transformations):\n                resultArray = resultArray.concat(transformations);\n        }\n        transformationList = (function () {\n            var k, len1, results;\n            results = [];\n            for (k = 0, len1 = transformationList.length; k < len1; k++) {\n                value = transformationList[k];\n                if (Array.isArray(value) && !isEmpty(value) || !Array.isArray(value) && value) {\n                    results.push(value);\n                }\n            }\n            return results;\n        })();\n        transformationList = vars.sort().concat(variables).concat(transformationList.sort());\n        if (ifParam === \"if_end\") {\n            transformationList.push(ifParam);\n        }\n        else if (!isEmpty(ifParam)) {\n            transformationList.unshift(ifParam);\n        }\n        transformationString = (transformationList).filter(x => !!x).join(param_separator);\n        if (!isEmpty(transformationString)) {\n            resultArray.push(transformationString);\n        }\n        return (resultArray).filter((x) => !!x).join(trans_separator);\n    }\n    /**\n     * Provide a list of all the valid transformation option names\n     * @function Transformation#listNames\n     * @private\n     * @return {Array<string>} a array of all the valid option names\n     */\n    static listNames() {\n        return methods;\n    }\n    /**\n     * Returns the attributes for an HTML tag.\n     * @function Cloudinary.toHtmlAttributes\n     * @return PlainObject\n     */\n    toHtmlAttributes() {\n        let attrName, height, options, ref2, ref3, value, width;\n        options = {};\n        let snakeCaseKey;\n        Object.keys(this.otherOptions).forEach(key => {\n            value = this.otherOptions[key];\n            snakeCaseKey = snakeCase(key);\n            if (!contains(PARAM_NAMES, snakeCaseKey) && !contains(URL_KEYS, snakeCaseKey)) {\n                attrName = /^html_/.test(key) ? key.slice(5) : key;\n                options[attrName] = value;\n            }\n        });\n        // convert all \"html_key\" to \"key\" with the same value\n        this.keys().forEach(key => {\n            if (/^html_/.test(key)) {\n                options[camelCase(key.slice(5))] = this.getValue(key);\n            }\n        });\n        if (!(this.hasLayer() || this.getValue(\"angle\") || contains([\"fit\", \"limit\", \"lfill\"], this.getValue(\"crop\")))) {\n            width = (ref2 = this.get(\"width\")) != null ? ref2.origValue : void 0;\n            height = (ref3 = this.get(\"height\")) != null ? ref3.origValue : void 0;\n            if (parseFloat(width) >= 1.0) {\n                if (options.width == null) {\n                    options.width = width;\n                }\n            }\n            if (parseFloat(height) >= 1.0) {\n                if (options.height == null) {\n                    options.height = height;\n                }\n            }\n        }\n        return options;\n    }\n    static isValidParamName(name) {\n        return methods.indexOf(camelCase(name)) >= 0;\n    }\n    /**\n     * Delegate to the parent (up the call chain) to produce HTML\n     * @function Transformation#toHtml\n     * @return {string} HTML representation of the parent if possible.\n     * @example\n     * tag = cloudinary.ImageTag.new(\"sample\", {cloud_name: \"demo\"})\n     * // ImageTag {name: \"img\", publicId: \"sample\"}\n     * tag.toHtml()\n     * // <img src=\"sample\">\n     * tag.transformation().crop(\"fit\").width(300).toHtml()\n     * // <img src=\"c_fit,w_300\">\n     */\n    toHtml() {\n        var ref;\n        return (ref = this.getParent()) != null ? typeof ref.toHtml === \"function\" ? ref.toHtml() : void 0 : void 0;\n    }\n    toString() {\n        return this.serialize();\n    }\n    clone() {\n        return new TransformationBase(this.toOptions(true));\n    }\n}\nconst VAR_NAME_RE = /^\\$[a-zA-Z0-9]+$/;\nconst trans_separator = '/';\nconst param_separator = ',';\nfunction lastArgCallback(args) {\n    var callback;\n    callback = args != null ? args[args.length - 1] : void 0;\n    if (isFunction(callback)) {\n        return callback;\n    }\n    else {\n        return void 0;\n    }\n}\nfunction processVar(varArray) {\n    var j, len, name, results, v;\n    if (Array.isArray(varArray)) {\n        results = [];\n        for (j = 0, len = varArray.length; j < len; j++) {\n            [name, v] = varArray[j];\n            results.push(`${name}_${Expression.normalize(v)}`);\n        }\n        return results;\n    }\n    else {\n        return varArray;\n    }\n}\n// @ts-ignore\nfunction processCustomFunction({ function_type, source }) {\n    if (function_type === 'remote') {\n        return [function_type, btoa(source)].join(\":\");\n    }\n    else if (function_type === 'wasm') {\n        return [function_type, source].join(\":\");\n    }\n}\n/**\n * Transformation Class methods.\n * This is a list of the parameters defined in Transformation.\n * Values are camelCased.\n * @const Transformation.methods\n * @private\n * @ignore\n * @type {Array<string>}\n */\n/**\n * Parameters that are filtered out before passing the options to an HTML tag.\n *\n * The list of parameters is a combination of `Transformation::methods` and `Configuration::CONFIG_PARAMS`\n * @const {Array<string>} Transformation.PARAM_NAMES\n * @private\n * @ignore\n * @see toHtmlAttributes\n */\nclass Transformation extends TransformationBase {\n    /**\n     * Represents a single transformation.\n     * @class Transformation\n     * @example\n     * t = new cloudinary.Transformation();\n     * t.angle(20).crop(\"scale\").width(\"auto\");\n     *\n     * // or\n     *\n     * t = new cloudinary.Transformation( {angle: 20, crop: \"scale\", width: \"auto\"});\n     * @see <a href=\"https://cloudinary.com/documentation/image_transformation_reference\"\n     *  target=\"_blank\">Available image transformations</a>\n     * @see <a href=\"https://cloudinary.com/documentation/video_transformation_reference\"\n     *  target=\"_blank\">Available video transformations</a>\n     */\n    constructor(options) {\n        super(options);\n    }\n    /**\n     * Convenience constructor\n     * @param {Object} options\n     * @return {Transformation}\n     * @example cl = cloudinary.Transformation.new( {angle: 20, crop: \"scale\", width: \"auto\"})\n     */\n    static new(options) {\n        return new Transformation(options);\n    }\n    /*\n      Transformation Parameters\n    */\n    angle(value) {\n        this.arrayParam(value, \"angle\", \"a\", \".\", Expression.normalize);\n        return this;\n    }\n    audioCodec(value) {\n        this.param(value, \"audio_codec\", \"ac\");\n        return this;\n    }\n    audioFrequency(value) {\n        this.param(value, \"audio_frequency\", \"af\");\n        return this;\n    }\n    aspectRatio(value) {\n        this.param(value, \"aspect_ratio\", \"ar\", Expression.normalize);\n        return this;\n    }\n    background(value) {\n        this.param(value, \"background\", \"b\", Param.norm_color);\n        return this;\n    }\n    bitRate(value) {\n        this.param(value, \"bit_rate\", \"br\");\n        return this;\n    }\n    border(value) {\n        return this.param(value, \"border\", \"bo\", (border) => {\n            if (isObject(border)) {\n                border = Object.assign({}, {\n                    color: \"black\",\n                    width: 2\n                }, border);\n                return `${border.width}px_solid_${Param.norm_color(border.color)}`;\n            }\n            else {\n                return border;\n            }\n        });\n    }\n    color(value) {\n        this.param(value, \"color\", \"co\", Param.norm_color);\n        return this;\n    }\n    colorSpace(value) {\n        this.param(value, \"color_space\", \"cs\");\n        return this;\n    }\n    crop(value) {\n        this.param(value, \"crop\", \"c\");\n        return this;\n    }\n    customFunction(value) {\n        return this.param(value, \"custom_function\", \"fn\", () => {\n            return processCustomFunction(value);\n        });\n    }\n    customPreFunction(value) {\n        if (this.get('custom_function')) {\n            return;\n        }\n        return this.rawParam(value, \"custom_function\", \"\", () => {\n            value = processCustomFunction(value);\n            return value ? `fn_pre:${value}` : value;\n        });\n    }\n    defaultImage(value) {\n        this.param(value, \"default_image\", \"d\");\n        return this;\n    }\n    delay(value) {\n        this.param(value, \"delay\", \"dl\");\n        return this;\n    }\n    density(value) {\n        this.param(value, \"density\", \"dn\");\n        return this;\n    }\n    duration(value) {\n        this.rangeParam(value, \"duration\", \"du\");\n        return this;\n    }\n    dpr(value) {\n        return this.param(value, \"dpr\", \"dpr\", (dpr) => {\n            dpr = dpr.toString();\n            if (dpr != null ? dpr.match(/^\\d+$/) : void 0) {\n                return dpr + \".0\";\n            }\n            else {\n                return Expression.normalize(dpr);\n            }\n        });\n    }\n    effect(value) {\n        this.arrayParam(value, \"effect\", \"e\", \":\", Expression.normalize);\n        return this;\n    }\n    else() {\n        return this.if('else');\n    }\n    endIf() {\n        return this.if('end');\n    }\n    endOffset(value) {\n        this.rangeParam(value, \"end_offset\", \"eo\");\n        return this;\n    }\n    fallbackContent(value) {\n        this.param(value, \"fallback_content\");\n        return this;\n    }\n    fetchFormat(value) {\n        this.param(value, \"fetch_format\", \"f\");\n        return this;\n    }\n    format(value) {\n        this.param(value, \"format\");\n        return this;\n    }\n    flags(value) {\n        this.arrayParam(value, \"flags\", \"fl\", \".\");\n        return this;\n    }\n    gravity(value) {\n        this.param(value, \"gravity\", \"g\");\n        return this;\n    }\n    fps(value) {\n        return this.param(value, \"fps\", \"fps\", (fps) => {\n            if (isString(fps)) {\n                return fps;\n            }\n            else if (Array.isArray(fps)) {\n                return fps.join(\"-\");\n            }\n            else {\n                return fps;\n            }\n        });\n    }\n    height(value) {\n        return this.param(value, \"height\", \"h\", () => {\n            if (this.getValue(\"crop\") || this.getValue(\"overlay\") || this.getValue(\"underlay\")) {\n                return Expression.normalize(value);\n            }\n            else {\n                return null;\n            }\n        });\n    }\n    htmlHeight(value) {\n        this.param(value, \"html_height\");\n        return this;\n    }\n    htmlWidth(value) {\n        this.param(value, \"html_width\");\n        return this;\n    }\n    if(value = \"\") {\n        var i, ifVal, j, ref, trIf, trRest;\n        switch (value) {\n            case \"else\":\n                this.chain();\n                return this.param(value, \"if\", \"if\");\n            case \"end\":\n                this.chain();\n                for (i = j = ref = this.chained.length - 1; j >= 0; i = j += -1) {\n                    ifVal = this.chained[i].getValue(\"if\");\n                    if (ifVal === \"end\") {\n                        break;\n                    }\n                    else if (ifVal != null) {\n                        trIf = Transformation.new().if(ifVal);\n                        this.chained[i].remove(\"if\");\n                        trRest = this.chained[i];\n                        this.chained[i] = Transformation.new().transformation([trIf, trRest]);\n                        if (ifVal !== \"else\") {\n                            break;\n                        }\n                    }\n                }\n                return this.param(value, \"if\", \"if\");\n            case \"\":\n                return Condition.new().setParent(this);\n            default:\n                return this.param(value, \"if\", \"if\", (value) => {\n                    return Condition.new(value).toString();\n                });\n        }\n    }\n    keyframeInterval(value) {\n        this.param(value, \"keyframe_interval\", \"ki\");\n        return this;\n    }\n    ocr(value) {\n        this.param(value, \"ocr\", \"ocr\");\n        return this;\n    }\n    offset(value) {\n        var end_o, start_o;\n        [start_o, end_o] = (isFunction(value != null ? value.split : void 0)) ? value.split('..') : Array.isArray(value) ? value : [null, null];\n        if (start_o != null) {\n            this.startOffset(start_o);\n        }\n        if (end_o != null) {\n            return this.endOffset(end_o);\n        }\n    }\n    opacity(value) {\n        this.param(value, \"opacity\", \"o\", Expression.normalize);\n        return this;\n    }\n    overlay(value) {\n        this.layerParam(value, \"overlay\", \"l\");\n        return this;\n    }\n    page(value) {\n        this.param(value, \"page\", \"pg\");\n        return this;\n    }\n    poster(value) {\n        this.param(value, \"poster\");\n        return this;\n    }\n    prefix(value) {\n        this.param(value, \"prefix\", \"p\");\n        return this;\n    }\n    quality(value) {\n        this.param(value, \"quality\", \"q\", Expression.normalize);\n        return this;\n    }\n    radius(value) {\n        this.arrayParam(value, \"radius\", \"r\", \":\", Expression.normalize);\n        return this;\n    }\n    rawTransformation(value) {\n        this.rawParam(value, \"raw_transformation\");\n        return this;\n    }\n    size(value) {\n        let height, width;\n        if (isFunction(value != null ? value.split : void 0)) {\n            [width, height] = value.split('x');\n            this.width(width);\n            return this.height(height);\n        }\n    }\n    sourceTypes(value) {\n        this.param(value, \"source_types\");\n        return this;\n    }\n    sourceTransformation(value) {\n        return this.param(value, \"source_transformation\");\n    }\n    startOffset(value) {\n        this.rangeParam(value, \"start_offset\", \"so\");\n        return this;\n    }\n    streamingProfile(value) {\n        this.param(value, \"streaming_profile\", \"sp\");\n        return this;\n    }\n    transformation(value) {\n        this.transformationParam(value, \"transformation\", \"t\");\n        return this;\n    }\n    underlay(value) {\n        this.layerParam(value, \"underlay\", \"u\");\n        return this;\n    }\n    variable(name, value) {\n        this.param(value, name, name);\n        return this;\n    }\n    variables(values) {\n        this.arrayParam(values, \"variables\");\n        return this;\n    }\n    videoCodec(value) {\n        this.param(value, \"video_codec\", \"vc\", Param.process_video_params);\n        return this;\n    }\n    videoSampling(value) {\n        this.param(value, \"video_sampling\", \"vs\");\n        return this;\n    }\n    width(value) {\n        this.param(value, \"width\", \"w\", () => {\n            if (this.getValue(\"crop\") || this.getValue(\"overlay\") || this.getValue(\"underlay\")) {\n                return Expression.normalize(value);\n            }\n            else {\n                return null;\n            }\n        });\n        return this;\n    }\n    x(value) {\n        this.param(value, \"x\", \"x\", Expression.normalize);\n        return this;\n    }\n    y(value) {\n        this.param(value, \"y\", \"y\", Expression.normalize);\n        return this;\n    }\n    zoom(value) {\n        this.param(value, \"zoom\", \"z\", Expression.normalize);\n        return this;\n    }\n}\n/**\n * Transformation Class methods.\n * This is a list of the parameters defined in Transformation.\n * Values are camelCased.\n */\nconst methods = [\n    \"angle\",\n    \"audioCodec\",\n    \"audioFrequency\",\n    \"aspectRatio\",\n    \"background\",\n    \"bitRate\",\n    \"border\",\n    \"color\",\n    \"colorSpace\",\n    \"crop\",\n    \"customFunction\",\n    \"customPreFunction\",\n    \"defaultImage\",\n    \"delay\",\n    \"density\",\n    \"duration\",\n    \"dpr\",\n    \"effect\",\n    \"else\",\n    \"endIf\",\n    \"endOffset\",\n    \"fallbackContent\",\n    \"fetchFormat\",\n    \"format\",\n    \"flags\",\n    \"gravity\",\n    \"fps\",\n    \"height\",\n    \"htmlHeight\",\n    \"htmlWidth\",\n    \"if\",\n    \"keyframeInterval\",\n    \"ocr\",\n    \"offset\",\n    \"opacity\",\n    \"overlay\",\n    \"page\",\n    \"poster\",\n    \"prefix\",\n    \"quality\",\n    \"radius\",\n    \"rawTransformation\",\n    \"size\",\n    \"sourceTypes\",\n    \"sourceTransformation\",\n    \"startOffset\",\n    \"streamingProfile\",\n    \"transformation\",\n    \"underlay\",\n    \"variable\",\n    \"variables\",\n    \"videoCodec\",\n    \"videoSampling\",\n    \"width\",\n    \"x\",\n    \"y\",\n    \"zoom\"\n];\n/**\n * Parameters that are filtered out before passing the options to an HTML tag.\n *\n * The list of parameters is a combination of `Transformation::methods` and `Configuration::CONFIG_PARAMS`\n */\nconst PARAM_NAMES = methods.map(snakeCase).concat(CONFIG_PARAMS);\nexport default Transformation;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}