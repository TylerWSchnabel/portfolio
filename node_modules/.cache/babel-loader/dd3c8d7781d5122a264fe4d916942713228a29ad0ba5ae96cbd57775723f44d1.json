{"ast":null,"code":"import _classCallCheck from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Action } from \"../../internal/Action.js\";\nimport { Transformation } from \"../../transformation/Transformation.js\";\nimport { VideoSource } from \"../../qualifiers/source/sourceTypes/VideoSource.js\";\nimport { createSourceFromModel } from \"../../internal/models/createSourceFromModel.js\";\n/**\n * @description Class for Concatenating another video.\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_trimming_and_concatenating#concatenating_media|Concatenating videos}\n * @extends SDK.Action\n * @memberOf Actions.VideoEdit\n * @see Visit {@link Actions.VideoEdit|VideoEdit} for an example\n */\nvar ConcatenateAction = /*#__PURE__*/function (_Action) {\n  _inherits(ConcatenateAction, _Action);\n  var _super = _createSuper(ConcatenateAction);\n  /**\n   *\n   * @param {Qualifiers.Source.VideoSource | Qualifiers.Source.ImageSource | Qualifiers.Source.FetchSource} source\n   *         the Source to concatenate\n   */\n  function ConcatenateAction(source) {\n    var _this;\n    _classCallCheck(this, ConcatenateAction);\n    _this = _super.call(this);\n    _this._actionModel = {\n      actionType: 'concatenate',\n      source: source.toJson()\n    };\n    _this.concatSource = source;\n    return _this;\n  }\n  /**\n   * @description Sets the transition between a video and a concatenated source\n   * @param {Qualifiers.Transition.VideoSource} source The source to concatenate.\n   * @return {this}\n   */\n  _createClass(ConcatenateAction, [{\n    key: \"transition\",\n    value: function transition(source) {\n      this._actionModel.transition = source.toJson();\n      this._transition = source;\n      return this;\n    }\n    /**\n     * @description Prepend the concatenated video - Adds the video before the original\n     * @return {this}\n     */\n  }, {\n    key: \"prepend\",\n    value: function prepend() {\n      this._actionModel.prepend = true;\n      this._prepend = true;\n      return this;\n    }\n    /**\n     * The duration in seconds\n     * @param {number} sec\n     * @return {this}\n     */\n  }, {\n    key: \"duration\",\n    value: function duration(sec) {\n      this._actionModel.duration = sec;\n      this._duration = sec;\n      return this;\n    }\n    /**\n     * @description Get the transitionString for the toString() method\n     * @return {string}\n     */\n  }, {\n    key: \"getTransitionString\",\n    value: function getTransitionString() {\n      var transTx = this._transition.getTransformation();\n      return [\"e_transition,\".concat(this._transition.getOpenSourceString('l')), transTx && transTx.toString(), 'fl_layer_apply'].filter(function (a) {\n        return a;\n      }).join('/');\n    }\n    /**\n     * @description Get the string representation of the Concatenation action\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      /*\n       *\n       * The toString() method is composed of several steps due to the complex nature of the concatenate transformation.\n       *\n       * First, we calculate the open and close parts of the top-level transformation:\n       *   - {open}/{sourceTransformation}/{close}\n       *\n       * Unlike a regular overlay, there are multiple 'bits' appended to the open and close parts of the tx.\n       * - duration (du_) might be prepended on the opening of the layer (du_5,l_sample)\n       * - fl_splice is also added, but only if a transition is not needed.\n       *\n       * once we've calculated the open and close parts, we now need to deal with the Transition.\n       * the transition is an inner transformation on the source with a special effect (e_transition) appended to it.\n       *\n       * To calculate the transition string, we need to take the transformation from the source(assuming it has one)\n       */\n      // Calculate the open part\n      var open = [this._duration && \"du_\".concat(this._duration), !this._transition && \"fl_splice\", \"\".concat(this.concatSource.getOpenSourceString('l'))].filter(function (a) {\n        return a;\n      }).join(',');\n      // Calculate the open part\n      var close = ['fl_layer_apply', this._prepend && 'so_0'].filter(function (a) {\n        return a;\n      }).join(',');\n      // Calculate the Transition part\n      var concatSourceTx;\n      if (this.concatSource.getTransformation()) {\n        concatSourceTx = this.concatSource.getTransformation();\n      } else {\n        concatSourceTx = new Transformation();\n      }\n      if (this._transition) {\n        concatSourceTx.addTransformation(this.getTransitionString());\n      }\n      // Put it all together, the transition is already part of the concatSourceTx\n      return [open, concatSourceTx.toString(), close].filter(function (a) {\n        return a;\n      }).join('/');\n    }\n  }], [{\n    key: \"fromJson\",\n    value: function fromJson(actionModel, transformationFromJson) {\n      var source = actionModel.source,\n        transition = actionModel.transition,\n        prepend = actionModel.prepend,\n        duration = actionModel.duration;\n      var sourceInstance = createSourceFromModel(source, transformationFromJson);\n      // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n      // This allows the inheriting classes to determine the class to be created\n      var result = new this(sourceInstance);\n      if (transition) {\n        result.transition(VideoSource.fromJson(transition, transformationFromJson));\n      }\n      if (prepend) {\n        result.prepend();\n      }\n      if (duration) {\n        result.duration(duration);\n      }\n      return result;\n    }\n  }]);\n  return ConcatenateAction;\n}(Action);\nexport default ConcatenateAction;","map":{"version":3,"names":["Action","Transformation","VideoSource","createSourceFromModel","ConcatenateAction","source","_actionModel","actionType","toJson","concatSource","transition","_transition","prepend","_prepend","sec","duration","_duration","transTx","getTransformation","getOpenSourceString","toString","filter","a","join","open","close","concatSourceTx","addTransformation","getTransitionString","actionModel","transformationFromJson","sourceInstance","result","fromJson"],"sources":["/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@cloudinary/transformation-builder-sdk/actions/videoEdit/ConcatenateAction.js"],"sourcesContent":["import { Action } from \"../../internal/Action.js\";\nimport { Transformation } from \"../../transformation/Transformation.js\";\nimport { VideoSource } from \"../../qualifiers/source/sourceTypes/VideoSource.js\";\nimport { createSourceFromModel } from \"../../internal/models/createSourceFromModel.js\";\n/**\n * @description Class for Concatenating another video.\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_trimming_and_concatenating#concatenating_media|Concatenating videos}\n * @extends SDK.Action\n * @memberOf Actions.VideoEdit\n * @see Visit {@link Actions.VideoEdit|VideoEdit} for an example\n */\nclass ConcatenateAction extends Action {\n    /**\n     *\n     * @param {Qualifiers.Source.VideoSource | Qualifiers.Source.ImageSource | Qualifiers.Source.FetchSource} source\n     *         the Source to concatenate\n     */\n    constructor(source) {\n        super();\n        this._actionModel = {\n            actionType: 'concatenate',\n            source: source.toJson()\n        };\n        this.concatSource = source;\n    }\n    /**\n     * @description Sets the transition between a video and a concatenated source\n     * @param {Qualifiers.Transition.VideoSource} source The source to concatenate.\n     * @return {this}\n     */\n    transition(source) {\n        this._actionModel.transition = source.toJson();\n        this._transition = source;\n        return this;\n    }\n    /**\n     * @description Prepend the concatenated video - Adds the video before the original\n     * @return {this}\n     */\n    prepend() {\n        this._actionModel.prepend = true;\n        this._prepend = true;\n        return this;\n    }\n    /**\n     * The duration in seconds\n     * @param {number} sec\n     * @return {this}\n     */\n    duration(sec) {\n        this._actionModel.duration = sec;\n        this._duration = sec;\n        return this;\n    }\n    /**\n     * @description Get the transitionString for the toString() method\n     * @return {string}\n     */\n    getTransitionString() {\n        const transTx = this._transition.getTransformation();\n        return [\n            `e_transition,${this._transition.getOpenSourceString('l')}`,\n            transTx && transTx.toString(),\n            'fl_layer_apply'\n        ].filter((a) => a).join('/');\n    }\n    /**\n     * @description Get the string representation of the Concatenation action\n     */\n    toString() {\n        /*\n         *\n         * The toString() method is composed of several steps due to the complex nature of the concatenate transformation.\n         *\n         * First, we calculate the open and close parts of the top-level transformation:\n         *   - {open}/{sourceTransformation}/{close}\n         *\n         * Unlike a regular overlay, there are multiple 'bits' appended to the open and close parts of the tx.\n         * - duration (du_) might be prepended on the opening of the layer (du_5,l_sample)\n         * - fl_splice is also added, but only if a transition is not needed.\n         *\n         * once we've calculated the open and close parts, we now need to deal with the Transition.\n         * the transition is an inner transformation on the source with a special effect (e_transition) appended to it.\n         *\n         * To calculate the transition string, we need to take the transformation from the source(assuming it has one)\n         */\n        // Calculate the open part\n        const open = [\n            this._duration && `du_${this._duration}`,\n            !this._transition && `fl_splice`,\n            `${this.concatSource.getOpenSourceString('l')}`\n        ].filter((a) => a).join(',');\n        // Calculate the open part\n        const close = [\n            'fl_layer_apply',\n            this._prepend && 'so_0'\n        ].filter((a) => a).join(',');\n        // Calculate the Transition part\n        let concatSourceTx;\n        if (this.concatSource.getTransformation()) {\n            concatSourceTx = this.concatSource.getTransformation();\n        }\n        else {\n            concatSourceTx = new Transformation();\n        }\n        if (this._transition) {\n            concatSourceTx.addTransformation(this.getTransitionString());\n        }\n        // Put it all together, the transition is already part of the concatSourceTx\n        return [\n            open,\n            concatSourceTx.toString(),\n            close\n        ].filter((a) => a).join('/');\n    }\n    static fromJson(actionModel, transformationFromJson) {\n        const { source, transition, prepend, duration } = actionModel;\n        const sourceInstance = createSourceFromModel(source, transformationFromJson);\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(sourceInstance);\n        if (transition) {\n            result.transition(VideoSource.fromJson(transition, transformationFromJson));\n        }\n        if (prepend) {\n            result.prepend();\n        }\n        if (duration) {\n            result.duration(duration);\n        }\n        return result;\n    }\n}\nexport default ConcatenateAction;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}