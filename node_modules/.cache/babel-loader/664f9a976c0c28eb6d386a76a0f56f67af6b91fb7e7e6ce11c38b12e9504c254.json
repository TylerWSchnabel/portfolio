{"ast":null,"code":"import _classCallCheck from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @description Vectorizes the image.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nvar VectorizeEffectAction = /*#__PURE__*/function (_Action) {\n  _inherits(VectorizeEffectAction, _Action);\n  var _super = _createSuper(VectorizeEffectAction);\n  function VectorizeEffectAction() {\n    var _this;\n    _classCallCheck(this, VectorizeEffectAction);\n    _this = _super.call(this);\n    _this._actionModel = {};\n    _this._actionModel.actionType = 'vectorize';\n    return _this;\n  }\n  /**\n   * @description The number of colors. (Range: 2 to 30, Server default: 10)\n   * @param {number | string} num\n   * @return {this}\n   */\n  _createClass(VectorizeEffectAction, [{\n    key: \"numOfColors\",\n    value: function numOfColors(num) {\n      this._actionModel.numOfColors = num;\n      this._numOfColors = num;\n      return this;\n    }\n    /**\n     * @description The level of detail. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 1000). (Server default: 300)\n     * @param {number | string} num\n     * @return {this}\n     */\n  }, {\n    key: \"detailsLevel\",\n    value: function detailsLevel(num) {\n      this._actionModel.detailLevel = num;\n      this._detailsLevel = num;\n      return this;\n    }\n    /**\n     * @description The size of speckles to suppress. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 100, Server default: 2)\n     * @param {number | string} num\n     * @return {this}\n     */\n  }, {\n    key: \"despeckleLevel\",\n    value: function despeckleLevel(num) {\n      this._actionModel.despeckleLevel = num;\n      this._despeckleLevel = num;\n      return this;\n    }\n    /**\n     * @description The corner threshold. Specify 100 for no smoothing (polygon corners), 0 for completely smooth corners. (Range: 0 to 100, Default: 25)\n     * @param {number | string} num\n     * @return {this}\n     */\n  }, {\n    key: \"cornersLevel\",\n    value: function cornersLevel(num) {\n      this._actionModel.cornersLevel = num;\n      this._cornersLevel = num;\n      return this;\n    }\n    /**\n     * @description The optimization value. Specify 100 for least optimization and the largest file. (Range: 0 to 100, Server default: 100).\n     * @param {number} num\n     * @return {this}\n     */\n  }, {\n    key: \"paths\",\n    value: function paths(num) {\n      this._actionModel.paths = num;\n      this._paths = num;\n      return this;\n    }\n  }, {\n    key: \"prepareQualifiers\",\n    value: function prepareQualifiers() {\n      var str = 'vectorize';\n      if (this._numOfColors) {\n        str += \":\".concat(new QualifierValue(\"colors:\".concat(this._numOfColors)).toString());\n      }\n      if (this._detailsLevel) {\n        str += \":\".concat(new QualifierValue(\"detail:\".concat(this._detailsLevel)).toString());\n      }\n      if (this._despeckleLevel) {\n        str += \":\".concat(new QualifierValue(\"despeckle:\".concat(this._despeckleLevel)).toString());\n      }\n      if (this._paths) {\n        str += \":\".concat(new QualifierValue(\"paths:\".concat(this._paths)).toString());\n      }\n      if (this._cornersLevel) {\n        str += \":\".concat(new QualifierValue(\"corners:\".concat(this._cornersLevel)).toString());\n      }\n      this.addQualifier(new Qualifier('e', str));\n    }\n  }], [{\n    key: \"fromJson\",\n    value: function fromJson(actionModel) {\n      var actionType = actionModel.actionType,\n        paths = actionModel.paths,\n        cornersLevel = actionModel.cornersLevel,\n        despeckleLevel = actionModel.despeckleLevel,\n        detailLevel = actionModel.detailLevel,\n        numOfColors = actionModel.numOfColors;\n      // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n      // This allows the inheriting classes to determine the class to be created\n      var result = new this();\n      paths && result.paths(paths);\n      cornersLevel && result.cornersLevel(cornersLevel);\n      despeckleLevel && result.despeckleLevel(despeckleLevel);\n      detailLevel && result.detailsLevel(detailLevel);\n      numOfColors && result.numOfColors(numOfColors);\n      return result;\n    }\n  }]);\n  return VectorizeEffectAction;\n}(Action);\nexport { VectorizeEffectAction };","map":{"version":3,"names":["Action","Qualifier","QualifierValue","VectorizeEffectAction","_actionModel","actionType","num","numOfColors","_numOfColors","detailLevel","_detailsLevel","despeckleLevel","_despeckleLevel","cornersLevel","_cornersLevel","paths","_paths","str","toString","addQualifier","actionModel","result","detailsLevel"],"sources":["/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@cloudinary/transformation-builder-sdk/actions/effect/Vectorize.js"],"sourcesContent":["import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @description Vectorizes the image.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass VectorizeEffectAction extends Action {\n    constructor() {\n        super();\n        this._actionModel = {};\n        this._actionModel.actionType = 'vectorize';\n    }\n    /**\n     * @description The number of colors. (Range: 2 to 30, Server default: 10)\n     * @param {number | string} num\n     * @return {this}\n     */\n    numOfColors(num) {\n        this._actionModel.numOfColors = num;\n        this._numOfColors = num;\n        return this;\n    }\n    /**\n     * @description The level of detail. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 1000). (Server default: 300)\n     * @param {number | string} num\n     * @return {this}\n     */\n    detailsLevel(num) {\n        this._actionModel.detailLevel = num;\n        this._detailsLevel = num;\n        return this;\n    }\n    /**\n     * @description The size of speckles to suppress. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 100, Server default: 2)\n     * @param {number | string} num\n     * @return {this}\n     */\n    despeckleLevel(num) {\n        this._actionModel.despeckleLevel = num;\n        this._despeckleLevel = num;\n        return this;\n    }\n    /**\n     * @description The corner threshold. Specify 100 for no smoothing (polygon corners), 0 for completely smooth corners. (Range: 0 to 100, Default: 25)\n     * @param {number | string} num\n     * @return {this}\n     */\n    cornersLevel(num) {\n        this._actionModel.cornersLevel = num;\n        this._cornersLevel = num;\n        return this;\n    }\n    /**\n     * @description The optimization value. Specify 100 for least optimization and the largest file. (Range: 0 to 100, Server default: 100).\n     * @param {number} num\n     * @return {this}\n     */\n    paths(num) {\n        this._actionModel.paths = num;\n        this._paths = num;\n        return this;\n    }\n    prepareQualifiers() {\n        let str = 'vectorize';\n        if (this._numOfColors) {\n            str += `:${new QualifierValue(`colors:${this._numOfColors}`).toString()}`;\n        }\n        if (this._detailsLevel) {\n            str += `:${new QualifierValue(`detail:${this._detailsLevel}`).toString()}`;\n        }\n        if (this._despeckleLevel) {\n            str += `:${new QualifierValue(`despeckle:${this._despeckleLevel}`).toString()}`;\n        }\n        if (this._paths) {\n            str += `:${new QualifierValue(`paths:${this._paths}`).toString()}`;\n        }\n        if (this._cornersLevel) {\n            str += `:${new QualifierValue(`corners:${this._cornersLevel}`).toString()}`;\n        }\n        this.addQualifier(new Qualifier('e', str));\n    }\n    static fromJson(actionModel) {\n        const { actionType, paths, cornersLevel, despeckleLevel, detailLevel, numOfColors } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this();\n        paths && result.paths(paths);\n        cornersLevel && result.cornersLevel(cornersLevel);\n        despeckleLevel && result.despeckleLevel(despeckleLevel);\n        detailLevel && result.detailsLevel(detailLevel);\n        numOfColors && result.numOfColors(numOfColors);\n        return result;\n    }\n}\nexport { VectorizeEffectAction };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}