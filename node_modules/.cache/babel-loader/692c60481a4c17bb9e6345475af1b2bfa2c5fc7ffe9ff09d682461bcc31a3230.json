{"ast":null,"code":"import _classCallCheck from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { getUrlPrefix, getUrlVersion, handleAssetType, handleDeliveryType } from \"../internal/url/cloudinaryURL.js\";\nimport URLConfig from \"../config/URLConfig.js\";\nimport { getSDKAnalyticsSignature } from \"../sdkAnalytics/getSDKAnalyticsSignature.js\";\n/**\n * This const contains all the valid combination of asset/delivery for URL shortening purposes\n * It's exported because it's used in a test, but it's not really shared enough to belong in a separate file\n */\nexport var SEO_TYPES = {\n  \"image/upload\": \"images\",\n  \"image/private\": \"private_images\",\n  \"image/authenticated\": \"authenticated_images\",\n  \"raw/upload\": \"files\",\n  \"video/upload\": \"videos\"\n};\n/**\n * @description Cloudinary file without a transformation\n * @summary SDK\n * @memberOf SDK\n */\nvar CloudinaryFile = /*#__PURE__*/function () {\n  function CloudinaryFile(publicID) {\n    var cloudConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var urlConfig = arguments.length > 2 ? arguments[2] : undefined;\n    _classCallCheck(this, CloudinaryFile);\n    this.setPublicID(publicID);\n    this.setCloudConfig(cloudConfig);\n    this.setURLConfig(urlConfig);\n  }\n  /**\n   * @description Sets the URL Config for this asset\n   * @param urlConfig\n   * @return {this}\n   */\n  _createClass(CloudinaryFile, [{\n    key: \"setURLConfig\",\n    value: function setURLConfig(urlConfig) {\n      this.urlConfig = new URLConfig(urlConfig);\n      return this;\n    }\n    /**\n     * @description Sets the Cloud Config for this asset\n     * @param urlConfig\n     * @return {this}\n     */\n  }, {\n    key: \"setCloudConfig\",\n    value: function setCloudConfig(cloudConfig) {\n      this.cloudName = cloudConfig.cloudName;\n      this.apiKey = cloudConfig.apiKey;\n      this.apiSecret = cloudConfig.apiSecret;\n      this.authToken = cloudConfig.authToken;\n      return this;\n    }\n    /**\n     * @description Sets the public ID of the asset.\n     * @param {string} publicID The public ID of the asset.\n     * @return {this}\n     */\n  }, {\n    key: \"setPublicID\",\n    value: function setPublicID(publicID) {\n      // PublicID must be a string!\n      this.publicID = publicID ? publicID.toString() : '';\n      return this;\n    }\n    /**\n     * @description Sets the delivery type of the asset.\n     * @param {DELIVERY_TYPE | string} newType The type of the asset.\n     * @return {this}\n     */\n  }, {\n    key: \"setDeliveryType\",\n    value: function setDeliveryType(newType) {\n      this.deliveryType = newType;\n      return this;\n    }\n    /**\n     * @description Sets the URL SEO suffix of the asset.\n     * @param {string} newSuffix The SEO suffix.\n     * @return {this}\n     */\n  }, {\n    key: \"setSuffix\",\n    value: function setSuffix(newSuffix) {\n      this.suffix = newSuffix;\n      return this;\n    }\n    /**\n     * @description Sets the signature of the asset.\n     * @param {string} signature The signature.\n     * @return {this}\n     */\n  }, {\n    key: \"setSignature\",\n    value: function setSignature(signature) {\n      this.signature = signature;\n      return this;\n    }\n    /**\n     * @description Sets the version of the asset.\n     * @param {string} newVersion The version of the asset.\n     * @return {this}\n     */\n  }, {\n    key: \"setVersion\",\n    value: function setVersion(newVersion) {\n      if (newVersion) {\n        this.version = newVersion;\n      }\n      return this;\n    }\n    /**\n     * @description Sets the asset type.\n     * @param {string} newType The type of the asset.\n     * @return {this}\n     */\n  }, {\n    key: \"setAssetType\",\n    value: function setAssetType(newType) {\n      if (newType) {\n        this.assetType = newType;\n      }\n      return this;\n    }\n  }, {\n    key: \"sign\",\n    value: function sign() {\n      return this;\n    }\n    /**\n     * @description Serializes to URL string\n     * @param overwriteOptions\n     */\n  }, {\n    key: \"toURL\",\n    value: function toURL() {\n      var overwriteOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.createCloudinaryURL(null, overwriteOptions.trackedAnalytics);\n    }\n    /**\n     * @description Validate various options before attempting to create a URL\n     * The function will throw in case a violation\n     * @throws Validation errors\n     */\n  }, {\n    key: \"validateAssetForURLCreation\",\n    value: function validateAssetForURLCreation() {\n      if (typeof this.cloudName === 'undefined') {\n        throw 'You must supply a cloudName when initializing the asset';\n      }\n      var suffixContainsDot = this.suffix && this.suffix.indexOf('.') >= 0;\n      var suffixContainsSlash = this.suffix && this.suffix.indexOf('/') >= 0;\n      if (suffixContainsDot || suffixContainsSlash) {\n        throw '`suffix`` should not include . or /';\n      }\n    }\n    /**\n     * @description return an SEO friendly name for a combination of asset/delivery, some examples:\n     * * image/upload -> images\n     * * video/upload -> videos\n     * If no match is found, return `{asset}/{delivery}`\n     */\n  }, {\n    key: \"getResourceType\",\n    value: function getResourceType() {\n      var assetType = handleAssetType(this.assetType);\n      var deliveryType = handleDeliveryType(this.deliveryType);\n      var hasSuffix = !!this.suffix;\n      var regularSEOType = \"\".concat(assetType, \"/\").concat(deliveryType);\n      var shortSEOType = SEO_TYPES[\"\".concat(assetType, \"/\").concat(deliveryType)];\n      var useRootPath = this.urlConfig.useRootPath;\n      var shorten = this.urlConfig.shorten;\n      // Quick exit incase of useRootPath\n      if (useRootPath) {\n        if (regularSEOType === 'image/upload') {\n          return ''; // For image/upload we're done, just return nothing\n        } else {\n          throw new Error(\"useRootPath can only be used with assetType: 'image' and deliveryType: 'upload'. Provided: \".concat(regularSEOType, \" instead\"));\n        }\n      }\n      if (shorten && regularSEOType === 'image/upload') {\n        return 'iu';\n      }\n      if (hasSuffix) {\n        if (shortSEOType) {\n          return shortSEOType;\n        } else {\n          throw new Error(\"URL Suffix only supported for \".concat(Object.keys(SEO_TYPES).join(', '), \", Provided: \").concat(regularSEOType, \" instead\"));\n        }\n      }\n      // If all else fails, return the regular image/upload combination (asset/delivery)\n      return regularSEOType;\n    }\n  }, {\n    key: \"getSignature\",\n    value: function getSignature() {\n      if (this.signature) {\n        return \"s--\".concat(this.signature, \"--\");\n      } else {\n        return '';\n      }\n    }\n    /**\n     *\n     * @description Creates a fully qualified CloudinaryURL\n     * @return {string} CloudinaryURL\n     * @throws Validation Errors\n     */\n  }, {\n    key: \"createCloudinaryURL\",\n    value: function createCloudinaryURL(transformation, trackedAnalytics) {\n      // In accordance with the existing implementation, if no publicID exists we should return nothing.\n      if (!this.publicID) {\n        return '';\n      }\n      // Throws if some options are mis-configured\n      // See the function for more information on when it throws\n      this.validateAssetForURLCreation();\n      var prefix = getUrlPrefix(this.cloudName, this.urlConfig);\n      var transformationString = transformation ? transformation.toString() : '';\n      var version = getUrlVersion(this.publicID, this.version, this.urlConfig.forceVersion);\n      var publicID = this.publicID\n      // Serialize the publicID, but leave slashes alone.\n      // we can't use serializeCloudinaryCharacters because that does both things (, and /)\n      .replace(/,/g, '%2C');\n      // Resource type is a mixture of assetType, deliveryType and various URL Configurations\n      // Note how `suffix` changes both image/upload (resourceType) and also is appended at the end\n      var url = [prefix, this.getResourceType(), this.getSignature(), transformationString, version, publicID, this.suffix].filter(function (a) {\n        return a;\n      }).join('/');\n      if (typeof transformation === 'string') {\n        return url;\n      } else {\n        var safeURL = encodeURI(url).replace(/\\?/g, '%3F').replace(/=/g, '%3D');\n        // urlConfig.analytics is true by default, has to be explicitly set to false to overwrite\n        // Don't add analytics when publicId includes a '?' to not risk changing existing query params\n        if (this.urlConfig.analytics !== false && !publicID.includes('?')) {\n          return \"\".concat(safeURL, \"?_a=\").concat(getSDKAnalyticsSignature(trackedAnalytics));\n        } else {\n          return safeURL;\n        }\n      }\n    }\n  }]);\n  return CloudinaryFile;\n}();\nexport { CloudinaryFile };","map":{"version":3,"names":["getUrlPrefix","getUrlVersion","handleAssetType","handleDeliveryType","URLConfig","getSDKAnalyticsSignature","SEO_TYPES","CloudinaryFile","publicID","cloudConfig","urlConfig","setPublicID","setCloudConfig","setURLConfig","cloudName","apiKey","apiSecret","authToken","toString","newType","deliveryType","newSuffix","suffix","signature","newVersion","version","assetType","overwriteOptions","createCloudinaryURL","trackedAnalytics","suffixContainsDot","indexOf","suffixContainsSlash","hasSuffix","regularSEOType","shortSEOType","useRootPath","shorten","Error","Object","keys","join","transformation","validateAssetForURLCreation","prefix","transformationString","forceVersion","replace","url","getResourceType","getSignature","filter","a","safeURL","encodeURI","analytics","includes"],"sources":["/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@cloudinary/url-gen/assets/CloudinaryFile.js"],"sourcesContent":["import { getUrlPrefix, getUrlVersion, handleAssetType, handleDeliveryType } from \"../internal/url/cloudinaryURL.js\";\nimport URLConfig from \"../config/URLConfig.js\";\nimport { getSDKAnalyticsSignature } from \"../sdkAnalytics/getSDKAnalyticsSignature.js\";\n/**\n * This const contains all the valid combination of asset/delivery for URL shortening purposes\n * It's exported because it's used in a test, but it's not really shared enough to belong in a separate file\n */\nexport const SEO_TYPES = {\n    \"image/upload\": \"images\",\n    \"image/private\": \"private_images\",\n    \"image/authenticated\": \"authenticated_images\",\n    \"raw/upload\": \"files\",\n    \"video/upload\": \"videos\"\n};\n/**\n * @description Cloudinary file without a transformation\n * @summary SDK\n * @memberOf SDK\n */\nclass CloudinaryFile {\n    constructor(publicID, cloudConfig = {}, urlConfig) {\n        this.setPublicID(publicID);\n        this.setCloudConfig(cloudConfig);\n        this.setURLConfig(urlConfig);\n    }\n    /**\n     * @description Sets the URL Config for this asset\n     * @param urlConfig\n     * @return {this}\n     */\n    setURLConfig(urlConfig) {\n        this.urlConfig = new URLConfig(urlConfig);\n        return this;\n    }\n    /**\n     * @description Sets the Cloud Config for this asset\n     * @param urlConfig\n     * @return {this}\n     */\n    setCloudConfig(cloudConfig) {\n        this.cloudName = cloudConfig.cloudName;\n        this.apiKey = cloudConfig.apiKey;\n        this.apiSecret = cloudConfig.apiSecret;\n        this.authToken = cloudConfig.authToken;\n        return this;\n    }\n    /**\n     * @description Sets the public ID of the asset.\n     * @param {string} publicID The public ID of the asset.\n     * @return {this}\n     */\n    setPublicID(publicID) {\n        // PublicID must be a string!\n        this.publicID = publicID ? publicID.toString() : '';\n        return this;\n    }\n    /**\n     * @description Sets the delivery type of the asset.\n     * @param {DELIVERY_TYPE | string} newType The type of the asset.\n     * @return {this}\n     */\n    setDeliveryType(newType) {\n        this.deliveryType = newType;\n        return this;\n    }\n    /**\n     * @description Sets the URL SEO suffix of the asset.\n     * @param {string} newSuffix The SEO suffix.\n     * @return {this}\n     */\n    setSuffix(newSuffix) {\n        this.suffix = newSuffix;\n        return this;\n    }\n    /**\n     * @description Sets the signature of the asset.\n     * @param {string} signature The signature.\n     * @return {this}\n     */\n    setSignature(signature) {\n        this.signature = signature;\n        return this;\n    }\n    /**\n     * @description Sets the version of the asset.\n     * @param {string} newVersion The version of the asset.\n     * @return {this}\n     */\n    setVersion(newVersion) {\n        if (newVersion) {\n            this.version = newVersion;\n        }\n        return this;\n    }\n    /**\n     * @description Sets the asset type.\n     * @param {string} newType The type of the asset.\n     * @return {this}\n     */\n    setAssetType(newType) {\n        if (newType) {\n            this.assetType = newType;\n        }\n        return this;\n    }\n    sign() {\n        return this;\n    }\n    /**\n     * @description Serializes to URL string\n     * @param overwriteOptions\n     */\n    toURL(overwriteOptions = {}) {\n        return this.createCloudinaryURL(null, overwriteOptions.trackedAnalytics);\n    }\n    /**\n     * @description Validate various options before attempting to create a URL\n     * The function will throw in case a violation\n     * @throws Validation errors\n     */\n    validateAssetForURLCreation() {\n        if (typeof this.cloudName === 'undefined') {\n            throw 'You must supply a cloudName when initializing the asset';\n        }\n        const suffixContainsDot = this.suffix && this.suffix.indexOf('.') >= 0;\n        const suffixContainsSlash = this.suffix && this.suffix.indexOf('/') >= 0;\n        if (suffixContainsDot || suffixContainsSlash) {\n            throw '`suffix`` should not include . or /';\n        }\n    }\n    /**\n     * @description return an SEO friendly name for a combination of asset/delivery, some examples:\n     * * image/upload -> images\n     * * video/upload -> videos\n     * If no match is found, return `{asset}/{delivery}`\n     */\n    getResourceType() {\n        const assetType = handleAssetType(this.assetType);\n        const deliveryType = handleDeliveryType(this.deliveryType);\n        const hasSuffix = !!this.suffix;\n        const regularSEOType = `${assetType}/${deliveryType}`;\n        const shortSEOType = SEO_TYPES[`${assetType}/${deliveryType}`];\n        const useRootPath = this.urlConfig.useRootPath;\n        const shorten = this.urlConfig.shorten;\n        // Quick exit incase of useRootPath\n        if (useRootPath) {\n            if (regularSEOType === 'image/upload') {\n                return ''; // For image/upload we're done, just return nothing\n            }\n            else {\n                throw new Error(`useRootPath can only be used with assetType: 'image' and deliveryType: 'upload'. Provided: ${regularSEOType} instead`);\n            }\n        }\n        if (shorten && regularSEOType === 'image/upload') {\n            return 'iu';\n        }\n        if (hasSuffix) {\n            if (shortSEOType) {\n                return shortSEOType;\n            }\n            else {\n                throw new Error(`URL Suffix only supported for ${Object.keys(SEO_TYPES).join(', ')}, Provided: ${regularSEOType} instead`);\n            }\n        }\n        // If all else fails, return the regular image/upload combination (asset/delivery)\n        return regularSEOType;\n    }\n    getSignature() {\n        if (this.signature) {\n            return `s--${this.signature}--`;\n        }\n        else {\n            return '';\n        }\n    }\n    /**\n     *\n     * @description Creates a fully qualified CloudinaryURL\n     * @return {string} CloudinaryURL\n     * @throws Validation Errors\n     */\n    createCloudinaryURL(transformation, trackedAnalytics) {\n        // In accordance with the existing implementation, if no publicID exists we should return nothing.\n        if (!this.publicID) {\n            return '';\n        }\n        // Throws if some options are mis-configured\n        // See the function for more information on when it throws\n        this.validateAssetForURLCreation();\n        const prefix = getUrlPrefix(this.cloudName, this.urlConfig);\n        const transformationString = transformation ? transformation.toString() : '';\n        const version = getUrlVersion(this.publicID, this.version, this.urlConfig.forceVersion);\n        const publicID = this.publicID\n            // Serialize the publicID, but leave slashes alone.\n            // we can't use serializeCloudinaryCharacters because that does both things (, and /)\n            .replace(/,/g, '%2C');\n        // Resource type is a mixture of assetType, deliveryType and various URL Configurations\n        // Note how `suffix` changes both image/upload (resourceType) and also is appended at the end\n        const url = [prefix, this.getResourceType(), this.getSignature(), transformationString, version, publicID, this.suffix]\n            .filter((a) => a)\n            .join('/');\n        if (typeof transformation === 'string') {\n            return url;\n        }\n        else {\n            const safeURL = encodeURI(url)\n                .replace(/\\?/g, '%3F')\n                .replace(/=/g, '%3D');\n            // urlConfig.analytics is true by default, has to be explicitly set to false to overwrite\n            // Don't add analytics when publicId includes a '?' to not risk changing existing query params\n            if (this.urlConfig.analytics !== false && !(publicID.includes('?'))) {\n                return `${safeURL}?_a=${getSDKAnalyticsSignature(trackedAnalytics)}`;\n            }\n            else {\n                return safeURL;\n            }\n        }\n    }\n}\nexport { CloudinaryFile };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}