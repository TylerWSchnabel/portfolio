{"ast":null,"code":"import _classCallCheck from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { prepareColor } from \"../../internal/utils/prepareColor.js\";\nimport { EffectActionWithLevel } from \"./EffectActions/EffectActionWithLevel.js\";\n/**\n * @description Applies a colorizing filter to the asset, use the methods in the class to adjust the filter\n * @extends EffectActionWithLevel\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nvar ColorizeEffectAction = /*#__PURE__*/function (_EffectActionWithLeve) {\n  _inherits(ColorizeEffectAction, _EffectActionWithLeve);\n  var _super = _createSuper(ColorizeEffectAction);\n  function ColorizeEffectAction() {\n    _classCallCheck(this, ColorizeEffectAction);\n    return _super.apply(this, arguments);\n  }\n  _createClass(ColorizeEffectAction, [{\n    key: \"color\",\n    value:\n    /**\n     * @description The color to use for colorization. Specify HTML name or RGB hex code. (Server default: gray)\n     * @param {string} color HTML name(red, green, etc.) or RGB hex code. (Server default: gray)\n     * @return {this}\n     */\n    function color(_color) {\n      this._actionModel.color = _color;\n      return this.addQualifier(new Qualifier('co', new QualifierValue(prepareColor(_color))));\n    }\n  }], [{\n    key: \"fromJson\",\n    value: function fromJson(actionModel) {\n      var actionType = actionModel.actionType,\n        level = actionModel.level,\n        color = actionModel.color;\n      // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n      // This allows the inheriting classes to determine the class to be created\n      var result = new this(actionType, level);\n      color && result.color(color);\n      return result;\n    }\n  }]);\n  return ColorizeEffectAction;\n}(EffectActionWithLevel);\nexport { ColorizeEffectAction };","map":{"version":3,"names":["QualifierValue","Qualifier","prepareColor","EffectActionWithLevel","ColorizeEffectAction","color","_actionModel","addQualifier","actionModel","actionType","level","result"],"sources":["/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@cloudinary/transformation-builder-sdk/actions/effect/Colorize.js"],"sourcesContent":["import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { prepareColor } from \"../../internal/utils/prepareColor.js\";\nimport { EffectActionWithLevel } from \"./EffectActions/EffectActionWithLevel.js\";\n/**\n * @description Applies a colorizing filter to the asset, use the methods in the class to adjust the filter\n * @extends EffectActionWithLevel\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass ColorizeEffectAction extends EffectActionWithLevel {\n    /**\n     * @description The color to use for colorization. Specify HTML name or RGB hex code. (Server default: gray)\n     * @param {string} color HTML name(red, green, etc.) or RGB hex code. (Server default: gray)\n     * @return {this}\n     */\n    color(color) {\n        this._actionModel.color = color;\n        return this.addQualifier(new Qualifier('co', new QualifierValue(prepareColor(color))));\n    }\n    static fromJson(actionModel) {\n        const { actionType, level, color } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(actionType, level);\n        color && result.color(color);\n        return result;\n    }\n}\nexport { ColorizeEffectAction };\n"],"mappings":";;;;AAAA,SAASA,cAAc,QAAQ,4CAA4C;AAC3E,SAASC,SAAS,QAAQ,uCAAuC;AACjE,SAASC,YAAY,QAAQ,sCAAsC;AACnE,SAASC,qBAAqB,QAAQ,0CAA0C;AAChF;AACA;AACA;AACA;AACA;AACA;AALA,IAMMC,oBAAoB;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IACtB;AACJ;AACA;AACA;AACA;IACI,eAAMC,MAAK,EAAE;MACT,IAAI,CAACC,YAAY,CAACD,KAAK,GAAGA,MAAK;MAC/B,OAAO,IAAI,CAACE,YAAY,CAAC,IAAIN,SAAS,CAAC,IAAI,EAAE,IAAID,cAAc,CAACE,YAAY,CAACG,MAAK,CAAC,CAAC,CAAC,CAAC;IAC1F;EAAC;IAAA;IAAA,OACD,kBAAgBG,WAAW,EAAE;MACzB,IAAQC,UAAU,GAAmBD,WAAW,CAAxCC,UAAU;QAAEC,KAAK,GAAYF,WAAW,CAA5BE,KAAK;QAAEL,KAAK,GAAKG,WAAW,CAArBH,KAAK;MAChC;MACA;MACA,IAAMM,MAAM,GAAG,IAAI,IAAI,CAACF,UAAU,EAAEC,KAAK,CAAC;MAC1CL,KAAK,IAAIM,MAAM,CAACN,KAAK,CAACA,KAAK,CAAC;MAC5B,OAAOM,MAAM;IACjB;EAAC;EAAA;AAAA,EAjB8BR,qBAAqB;AAmBxD,SAASC,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}