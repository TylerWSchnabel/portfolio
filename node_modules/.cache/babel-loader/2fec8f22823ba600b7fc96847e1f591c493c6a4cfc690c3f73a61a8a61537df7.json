{"ast":null,"code":"import _classCallCheck from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description\n * Maps an input color and those similar to the input color to corresponding shades of a specified output color, taking luminosity and chroma into account, in order to recolor objects in your image in a natural way.</br>\n * More highly saturated input colors usually give the best results. It is recommended to avoid input colors approaching white, black, or gray.</br>\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#replace_color_effect|Replace color examples}\n * @memberOf Actions.Adjust\n */\nvar ReplaceColorAction = /*#__PURE__*/function (_Action) {\n  _inherits(ReplaceColorAction, _Action);\n  var _super = _createSuper(ReplaceColorAction);\n  /**\n   * @description Sets the target output color.\n   * @param {string} toColor - The HTML name or RGB/A hex code of the target output color.\n   */\n  function ReplaceColorAction(toColor) {\n    var _this;\n    _classCallCheck(this, ReplaceColorAction);\n    _this = _super.call(this);\n    _this.targetColor = toColor;\n    return _this;\n  }\n  /**\n   * @description Sets the tolerance threshold.\n   * @param {number} toleranceLevel - The tolerance threshold (a radius in the LAB color space) from the input color, </br>\n   *                                  representing the span of colors that should be replaced with a correspondingly adjusted version of the target output color. </br>\n   *                                  Larger values result in replacing more colors within the image. </br>\n   *                                  The more saturated the original input color, the more a change in value will impact the result (Server default: 50).\n   * @return {this}\n   */\n  _createClass(ReplaceColorAction, [{\n    key: \"tolerance\",\n    value: function tolerance(toleranceLevel) {\n      this.toleranceLevel = toleranceLevel;\n      return this;\n    }\n    /**\n     * @description Sets the base input color to map.\n     * @param {string} baseColor - The HTML name or RGB/A hex code of the base input color to map (Server default: the most prominent high-saturation color in the image).\n     * @return {this}\n     */\n  }, {\n    key: \"fromColor\",\n    value: function fromColor(baseColor) {\n      this.baseColor = baseColor;\n      return this;\n    }\n  }, {\n    key: \"prepareQualifiers\",\n    value: function prepareQualifiers() {\n      // Target color and base color might not exist at this point (optional qualifiers)\n      // If they exist, ensure that any # for RGB are removed from the resulting string\n      var targetColor = this.targetColor && this.targetColor.toString().replace('#', '');\n      var baseColor = this.baseColor && this.baseColor.toString().replace('#', '');\n      var qualifierValue = new QualifierValue(['replace_color', targetColor, this.toleranceLevel, baseColor]);\n      this.addQualifier(new Qualifier('e', qualifierValue));\n      return this;\n    }\n  }]);\n  return ReplaceColorAction;\n}(Action);\nexport { ReplaceColorAction };","map":{"version":3,"names":["Action","QualifierValue","Qualifier","ReplaceColorAction","toColor","targetColor","toleranceLevel","baseColor","toString","replace","qualifierValue","addQualifier"],"sources":["/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@cloudinary/transformation-builder-sdk/actions/adjust/ReplaceColorAction.js"],"sourcesContent":["import { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description\n * Maps an input color and those similar to the input color to corresponding shades of a specified output color, taking luminosity and chroma into account, in order to recolor objects in your image in a natural way.</br>\n * More highly saturated input colors usually give the best results. It is recommended to avoid input colors approaching white, black, or gray.</br>\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#replace_color_effect|Replace color examples}\n * @memberOf Actions.Adjust\n */\nclass ReplaceColorAction extends Action {\n    /**\n     * @description Sets the target output color.\n     * @param {string} toColor - The HTML name or RGB/A hex code of the target output color.\n     */\n    constructor(toColor) {\n        super();\n        this.targetColor = toColor;\n    }\n    /**\n     * @description Sets the tolerance threshold.\n     * @param {number} toleranceLevel - The tolerance threshold (a radius in the LAB color space) from the input color, </br>\n     *                                  representing the span of colors that should be replaced with a correspondingly adjusted version of the target output color. </br>\n     *                                  Larger values result in replacing more colors within the image. </br>\n     *                                  The more saturated the original input color, the more a change in value will impact the result (Server default: 50).\n     * @return {this}\n     */\n    tolerance(toleranceLevel) {\n        this.toleranceLevel = toleranceLevel;\n        return this;\n    }\n    /**\n     * @description Sets the base input color to map.\n     * @param {string} baseColor - The HTML name or RGB/A hex code of the base input color to map (Server default: the most prominent high-saturation color in the image).\n     * @return {this}\n     */\n    fromColor(baseColor) {\n        this.baseColor = baseColor;\n        return this;\n    }\n    prepareQualifiers() {\n        // Target color and base color might not exist at this point (optional qualifiers)\n        // If they exist, ensure that any # for RGB are removed from the resulting string\n        const targetColor = this.targetColor && this.targetColor.toString().replace('#', '');\n        const baseColor = this.baseColor && this.baseColor.toString().replace('#', '');\n        const qualifierValue = new QualifierValue(['replace_color', targetColor, this.toleranceLevel, baseColor]);\n        this.addQualifier(new Qualifier('e', qualifierValue));\n        return this;\n    }\n}\nexport { ReplaceColorAction };\n"],"mappings":";;;;AAAA,SAASA,MAAM,QAAQ,0BAA0B;AACjD,SAASC,cAAc,QAAQ,4CAA4C;AAC3E,SAASC,SAAS,QAAQ,uCAAuC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA,IAQMC,kBAAkB;EAAA;EAAA;EACpB;AACJ;AACA;AACA;EACI,4BAAYC,OAAO,EAAE;IAAA;IAAA;IACjB;IACA,MAAKC,WAAW,GAAGD,OAAO;IAAC;EAC/B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAPI;IAAA;IAAA,OAQA,mBAAUE,cAAc,EAAE;MACtB,IAAI,CAACA,cAAc,GAAGA,cAAc;MACpC,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,mBAAUC,SAAS,EAAE;MACjB,IAAI,CAACA,SAAS,GAAGA,SAAS;MAC1B,OAAO,IAAI;IACf;EAAC;IAAA;IAAA,OACD,6BAAoB;MAChB;MACA;MACA,IAAMF,WAAW,GAAG,IAAI,CAACA,WAAW,IAAI,IAAI,CAACA,WAAW,CAACG,QAAQ,EAAE,CAACC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;MACpF,IAAMF,SAAS,GAAG,IAAI,CAACA,SAAS,IAAI,IAAI,CAACA,SAAS,CAACC,QAAQ,EAAE,CAACC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;MAC9E,IAAMC,cAAc,GAAG,IAAIT,cAAc,CAAC,CAAC,eAAe,EAAEI,WAAW,EAAE,IAAI,CAACC,cAAc,EAAEC,SAAS,CAAC,CAAC;MACzG,IAAI,CAACI,YAAY,CAAC,IAAIT,SAAS,CAAC,GAAG,EAAEQ,cAAc,CAAC,CAAC;MACrD,OAAO,IAAI;IACf;EAAC;EAAA;AAAA,EAtC4BV,MAAM;AAwCvC,SAASG,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}