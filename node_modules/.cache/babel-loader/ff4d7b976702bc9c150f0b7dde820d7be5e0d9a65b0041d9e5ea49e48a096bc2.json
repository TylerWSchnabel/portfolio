{"ast":null,"code":"import _createClass from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @extends SDK.Action\n * @description Converts the colors of every pixel in an image based on the supplied color matrix, in which the value of each color channel is calculated based on the values from all other channels (e.g. a 3x3 matrix for RGB, a 4x4 matrix for RGBA or CMYK, etc).<br/>\n * For every pixel in the image, take each color channel and adjust its value by the specified values of the matrix to get a new value.\n * @memberOf Actions.Adjust\n */\nvar RecolorAction = /*#__PURE__*/function (_Action) {\n  _inherits(RecolorAction, _Action);\n  var _super = _createSuper(RecolorAction);\n  function RecolorAction(recolorMatrix) {\n    var _this;\n    _classCallCheck(this, RecolorAction);\n    _this = _super.call(this);\n    _this.matrix = recolorMatrix;\n    // Turn the matrix into a flat array of values\n    // the values are ordered by row\n    // [...row1, ...row2, ...row3, ..., row(n) ]\n    var flat = [];\n    for (var row = 0; row < recolorMatrix.length; row++) {\n      for (var col = 0; col < recolorMatrix[row].length; col++) {\n        flat.push(recolorMatrix[row][col].toString());\n      }\n    }\n    var qualifierValue = new QualifierValue(['recolor'].concat(flat)).setDelimiter(':');\n    _this.addQualifier(new Qualifier('e', qualifierValue));\n    return _this;\n  }\n  return _createClass(RecolorAction);\n}(Action);\nexport { RecolorAction };","map":{"version":3,"names":["Action","QualifierValue","Qualifier","RecolorAction","recolorMatrix","matrix","flat","row","length","col","push","toString","qualifierValue","setDelimiter","addQualifier"],"sources":["/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@cloudinary/transformation-builder-sdk/actions/adjust/RecolorAction.js"],"sourcesContent":["import { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @extends SDK.Action\n * @description Converts the colors of every pixel in an image based on the supplied color matrix, in which the value of each color channel is calculated based on the values from all other channels (e.g. a 3x3 matrix for RGB, a 4x4 matrix for RGBA or CMYK, etc).<br/>\n * For every pixel in the image, take each color channel and adjust its value by the specified values of the matrix to get a new value.\n * @memberOf Actions.Adjust\n */\nclass RecolorAction extends Action {\n    constructor(recolorMatrix) {\n        super();\n        this.matrix = recolorMatrix;\n        // Turn the matrix into a flat array of values\n        // the values are ordered by row\n        // [...row1, ...row2, ...row3, ..., row(n) ]\n        const flat = [];\n        for (let row = 0; row < recolorMatrix.length; row++) {\n            for (let col = 0; col < recolorMatrix[row].length; col++) {\n                flat.push(recolorMatrix[row][col].toString());\n            }\n        }\n        const qualifierValue = new QualifierValue(['recolor', ...flat]).setDelimiter(':');\n        this.addQualifier(new Qualifier('e', qualifierValue));\n    }\n}\nexport { RecolorAction };\n"],"mappings":";;;;AAAA,SAASA,MAAM,QAAQ,0BAA0B;AACjD,SAASC,cAAc,QAAQ,4CAA4C;AAC3E,SAASC,SAAS,QAAQ,uCAAuC;AACjE;AACA;AACA;AACA;AACA;AACA;AALA,IAMMC,aAAa;EAAA;EAAA;EACf,uBAAYC,aAAa,EAAE;IAAA;IAAA;IACvB;IACA,MAAKC,MAAM,GAAGD,aAAa;IAC3B;IACA;IACA;IACA,IAAME,IAAI,GAAG,EAAE;IACf,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGH,aAAa,CAACI,MAAM,EAAED,GAAG,EAAE,EAAE;MACjD,KAAK,IAAIE,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGL,aAAa,CAACG,GAAG,CAAC,CAACC,MAAM,EAAEC,GAAG,EAAE,EAAE;QACtDH,IAAI,CAACI,IAAI,CAACN,aAAa,CAACG,GAAG,CAAC,CAACE,GAAG,CAAC,CAACE,QAAQ,EAAE,CAAC;MACjD;IACJ;IACA,IAAMC,cAAc,GAAG,IAAIX,cAAc,EAAE,SAAS,SAAKK,IAAI,EAAE,CAACO,YAAY,CAAC,GAAG,CAAC;IACjF,MAAKC,YAAY,CAAC,IAAIZ,SAAS,CAAC,GAAG,EAAEU,cAAc,CAAC,CAAC;IAAC;EAC1D;EAAC;AAAA,EAfuBZ,MAAM;AAiBlC,SAASG,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}