{"ast":null,"code":"import _slicedToArray from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { FlagQualifier } from \"../qualifiers/flag/FlagQualifier.js\";\nimport { Qualifier } from \"./qualifier/Qualifier.js\";\nimport { mapToSortedArray } from \"./utils/dataStructureUtils.js\";\nimport { ActionModel } from \"./models/ActionModel.js\";\n/**\n * @summary SDK\n * @memberOf SDK\n * @description Defines the category of transformation to perform.\n */\nvar Action = /*#__PURE__*/function (_ActionModel) {\n  _inherits(Action, _ActionModel);\n  var _super = _createSuper(Action);\n  function Action() {\n    var _this;\n    _classCallCheck(this, Action);\n    _this = _super.apply(this, arguments);\n    // We're using map, to overwrite existing keys. for example:\n    // addParam(w_100).addQualifier(w_200) should result in w_200. and not w_100,w_200\n    _this.qualifiers = new Map();\n    // Unlike regular qualifiers, there can be multiple flags in each url component /fl_1,fl_2/\n    // If the falgs are added to the qualifiers map, only a single flag could exist in a component (it's a map)\n    // So flags are stored separately until the very end because of that reason\n    _this.flags = [];\n    _this.delimiter = ','; // {qualifier}{delimiter}{qualifier} for example: `${'w_100'}${','}${'c_fill'}`\n    _this.actionTag = ''; // A custom name tag to identify this action in the future\n    return _this;\n  }\n  _createClass(Action, [{\n    key: \"prepareQualifiers\",\n    value: function prepareQualifiers() {}\n    /**\n     * @description Returns the custom name tag that was given to this action\n     * @return {string}\n     */\n  }, {\n    key: \"getActionTag\",\n    value: function getActionTag() {\n      return this.actionTag;\n    }\n    /**\n     * @description Sets the custom name tag for this action\n     * @return {this}\n     */\n  }, {\n    key: \"setActionTag\",\n    value: function setActionTag(tag) {\n      this.actionTag = tag;\n      return this;\n    }\n    /**\n     * @description Calls toString() on all child qualifiers (implicitly by using .join()).\n     * @return {string}\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      this.prepareQualifiers();\n      return mapToSortedArray(this.qualifiers, this.flags).join(this.delimiter);\n    }\n    /**\n     * @description Adds the parameter to the action.\n     * @param {SDK.Qualifier} qualifier\n     * @return {this}\n     */\n  }, {\n    key: \"addQualifier\",\n    value: function addQualifier(qualifier) {\n      // if string, find the key and value\n      if (typeof qualifier === 'string') {\n        var _qualifier$toLowerCas = qualifier.toLowerCase().split('_'),\n          _qualifier$toLowerCas2 = _slicedToArray(_qualifier$toLowerCas, 2),\n          key = _qualifier$toLowerCas2[0],\n          value = _qualifier$toLowerCas2[1];\n        if (key === 'fl') {\n          // if string qualifier is a flag, store it in the flags arrays\n          this.flags.push(new FlagQualifier(value));\n        } else {\n          // if the string qualifier is not a flag, create a new qualifier from it\n          this.qualifiers.set(key, new Qualifier(key, value));\n        }\n      } else {\n        // if a qualifier object, insert to the qualifiers map\n        this.qualifiers.set(qualifier.key, qualifier);\n      }\n      return this;\n    }\n    /**\n     * @description Adds a flag to the current action.\n     * @param {Qualifiers.Flag} flag\n     * @return {this}\n     */\n  }, {\n    key: \"addFlag\",\n    value: function addFlag(flag) {\n      if (typeof flag === 'string') {\n        this.flags.push(new FlagQualifier(flag));\n      } else {\n        if (flag instanceof FlagQualifier) {\n          this.flags.push(flag);\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"addValueToQualifier\",\n    value: function addValueToQualifier(qualifierKey, qualifierValue) {\n      this.qualifiers.get(qualifierKey).addValue(qualifierValue);\n      return this;\n    }\n  }]);\n  return Action;\n}(ActionModel);\nexport { Action };","map":{"version":3,"names":["FlagQualifier","Qualifier","mapToSortedArray","ActionModel","Action","arguments","qualifiers","Map","flags","delimiter","actionTag","tag","prepareQualifiers","join","qualifier","toLowerCase","split","key","value","push","set","flag","qualifierKey","qualifierValue","get","addValue"],"sources":["/Users/tylerschnabel/Documents/the_odin_project/portfolio/node_modules/@cloudinary/transformation-builder-sdk/internal/Action.js"],"sourcesContent":["import { FlagQualifier } from \"../qualifiers/flag/FlagQualifier.js\";\nimport { Qualifier } from \"./qualifier/Qualifier.js\";\nimport { mapToSortedArray } from \"./utils/dataStructureUtils.js\";\nimport { ActionModel } from \"./models/ActionModel.js\";\n/**\n * @summary SDK\n * @memberOf SDK\n * @description Defines the category of transformation to perform.\n */\nclass Action extends ActionModel {\n    constructor() {\n        super(...arguments);\n        // We're using map, to overwrite existing keys. for example:\n        // addParam(w_100).addQualifier(w_200) should result in w_200. and not w_100,w_200\n        this.qualifiers = new Map();\n        // Unlike regular qualifiers, there can be multiple flags in each url component /fl_1,fl_2/\n        // If the falgs are added to the qualifiers map, only a single flag could exist in a component (it's a map)\n        // So flags are stored separately until the very end because of that reason\n        this.flags = [];\n        this.delimiter = ','; // {qualifier}{delimiter}{qualifier} for example: `${'w_100'}${','}${'c_fill'}`\n        this.actionTag = ''; // A custom name tag to identify this action in the future\n    }\n    prepareQualifiers() { }\n    /**\n     * @description Returns the custom name tag that was given to this action\n     * @return {string}\n     */\n    getActionTag() {\n        return this.actionTag;\n    }\n    /**\n     * @description Sets the custom name tag for this action\n     * @return {this}\n     */\n    setActionTag(tag) {\n        this.actionTag = tag;\n        return this;\n    }\n    /**\n     * @description Calls toString() on all child qualifiers (implicitly by using .join()).\n     * @return {string}\n     */\n    toString() {\n        this.prepareQualifiers();\n        return mapToSortedArray(this.qualifiers, this.flags).join(this.delimiter);\n    }\n    /**\n     * @description Adds the parameter to the action.\n     * @param {SDK.Qualifier} qualifier\n     * @return {this}\n     */\n    addQualifier(qualifier) {\n        // if string, find the key and value\n        if (typeof qualifier === 'string') {\n            const [key, value] = qualifier.toLowerCase().split('_');\n            if (key === 'fl') {\n                // if string qualifier is a flag, store it in the flags arrays\n                this.flags.push(new FlagQualifier(value));\n            }\n            else {\n                // if the string qualifier is not a flag, create a new qualifier from it\n                this.qualifiers.set(key, new Qualifier(key, value));\n            }\n        }\n        else {\n            // if a qualifier object, insert to the qualifiers map\n            this.qualifiers.set(qualifier.key, qualifier);\n        }\n        return this;\n    }\n    /**\n     * @description Adds a flag to the current action.\n     * @param {Qualifiers.Flag} flag\n     * @return {this}\n     */\n    addFlag(flag) {\n        if (typeof flag === 'string') {\n            this.flags.push(new FlagQualifier(flag));\n        }\n        else {\n            if (flag instanceof FlagQualifier) {\n                this.flags.push(flag);\n            }\n        }\n        return this;\n    }\n    addValueToQualifier(qualifierKey, qualifierValue) {\n        this.qualifiers.get(qualifierKey).addValue(qualifierValue);\n        return this;\n    }\n}\nexport { Action };\n"],"mappings":";;;;;AAAA,SAASA,aAAa,QAAQ,qCAAqC;AACnE,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAASC,gBAAgB,QAAQ,+BAA+B;AAChE,SAASC,WAAW,QAAQ,yBAAyB;AACrD;AACA;AACA;AACA;AACA;AAJA,IAKMC,MAAM;EAAA;EAAA;EACR,kBAAc;IAAA;IAAA;IACV,2BAASC,SAAS;IAClB;IACA;IACA,MAAKC,UAAU,GAAG,IAAIC,GAAG,EAAE;IAC3B;IACA;IACA;IACA,MAAKC,KAAK,GAAG,EAAE;IACf,MAAKC,SAAS,GAAG,GAAG,CAAC,CAAC;IACtB,MAAKC,SAAS,GAAG,EAAE,CAAC,CAAC;IAAA;EACzB;EAAC;IAAA;IAAA,OACD,6BAAoB,CAAE;IACtB;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,wBAAe;MACX,OAAO,IAAI,CAACA,SAAS;IACzB;IACA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,sBAAaC,GAAG,EAAE;MACd,IAAI,CAACD,SAAS,GAAGC,GAAG;MACpB,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,oBAAW;MACP,IAAI,CAACC,iBAAiB,EAAE;MACxB,OAAOV,gBAAgB,CAAC,IAAI,CAACI,UAAU,EAAE,IAAI,CAACE,KAAK,CAAC,CAACK,IAAI,CAAC,IAAI,CAACJ,SAAS,CAAC;IAC7E;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,sBAAaK,SAAS,EAAE;MACpB;MACA,IAAI,OAAOA,SAAS,KAAK,QAAQ,EAAE;QAC/B,4BAAqBA,SAAS,CAACC,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC;UAAA;UAAhDC,GAAG;UAAEC,KAAK;QACjB,IAAID,GAAG,KAAK,IAAI,EAAE;UACd;UACA,IAAI,CAACT,KAAK,CAACW,IAAI,CAAC,IAAInB,aAAa,CAACkB,KAAK,CAAC,CAAC;QAC7C,CAAC,MACI;UACD;UACA,IAAI,CAACZ,UAAU,CAACc,GAAG,CAACH,GAAG,EAAE,IAAIhB,SAAS,CAACgB,GAAG,EAAEC,KAAK,CAAC,CAAC;QACvD;MACJ,CAAC,MACI;QACD;QACA,IAAI,CAACZ,UAAU,CAACc,GAAG,CAACN,SAAS,CAACG,GAAG,EAAEH,SAAS,CAAC;MACjD;MACA,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,iBAAQO,IAAI,EAAE;MACV,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;QAC1B,IAAI,CAACb,KAAK,CAACW,IAAI,CAAC,IAAInB,aAAa,CAACqB,IAAI,CAAC,CAAC;MAC5C,CAAC,MACI;QACD,IAAIA,IAAI,YAAYrB,aAAa,EAAE;UAC/B,IAAI,CAACQ,KAAK,CAACW,IAAI,CAACE,IAAI,CAAC;QACzB;MACJ;MACA,OAAO,IAAI;IACf;EAAC;IAAA;IAAA,OACD,6BAAoBC,YAAY,EAAEC,cAAc,EAAE;MAC9C,IAAI,CAACjB,UAAU,CAACkB,GAAG,CAACF,YAAY,CAAC,CAACG,QAAQ,CAACF,cAAc,CAAC;MAC1D,OAAO,IAAI;IACf;EAAC;EAAA;AAAA,EAhFgBpB,WAAW;AAkFhC,SAASC,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}